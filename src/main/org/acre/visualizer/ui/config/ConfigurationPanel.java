/**
 *   Copyright 2004-2005 Sun Microsystems, Inc.
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */

package org.acre.visualizer.ui.config;

import org.acre.config.ConfigData;
import org.acre.config.ConfigService;
import org.acre.config.AcreConfigException;
import org.acre.dao.AcreDbDAO;
import org.acre.lang.pql.pdbc.PQLConnection;
import org.acre.lang.pql.pdbc.PQLConnectionFactory;
import org.acre.visualizer.ui.Main;
import org.acre.visualizer.ui.AcreUIConstants;
import org.acre.visualizer.ui.components.AcreColorChooser;

import javax.swing.*;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.io.File;

/**
 *
 * @author  Administrator
 */
public class ConfigurationPanel extends javax.swing.JPanel {

    /** Creates new form Configuration */
    public ConfigurationPanel() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        dbTypeBGroup = new javax.swing.ButtonGroup();
        prefsPanel = new javax.swing.JTabbedPane();
        salsaRepPanel = new javax.swing.JPanel();
        salsaRepositoryDirLabel = new javax.swing.JLabel();
        salsaRepositoryDirTF = new javax.swing.JTextField();
        chooseDirButton = new javax.swing.JButton();
        salsaRootDirLabel = new javax.swing.JLabel();
        salsaHomeDirTF = new javax.swing.JTextField();
        chooseHomeDirButton = new javax.swing.JButton();
        dbPrefsPanel = new javax.swing.JPanel();
        dbFieldsPanel = new javax.swing.JPanel();
        dbDriverName = new javax.swing.JLabel();
        dbJDBCDriverTF = new javax.swing.JTextField();
        dbURLLabel = new javax.swing.JLabel();
        dbURLTF = new javax.swing.JTextField();
        userIdLabel = new javax.swing.JLabel();
        userIdTF = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        passwordTF = new javax.swing.JTextField();
        testRDBconnectButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        defaultSystemLabel = new javax.swing.JLabel();
        defaultVersionLabel = new javax.swing.JLabel();
        defaultSystemCB = new javax.swing.JComboBox();
        defaultVersionCB = new javax.swing.JComboBox();
        debugPrefsPanel = new javax.swing.JPanel();
        debugOnLabel = new javax.swing.JLabel();
        debugOnCheckBox = new javax.swing.JCheckBox();
        debugLevelLabel = new javax.swing.JLabel();
        debugrbpanel = new javax.swing.JPanel();
        debugLevelCB = new javax.swing.JComboBox();
        logFileLabel = new javax.swing.JLabel();
        logFileNameTF = new javax.swing.JTextField();
        viewLogFileButton = new javax.swing.JButton();
        extractorPrefsPanel = new javax.swing.JPanel();
        tigerPathLabel = new javax.swing.JLabel();
        tigerHomeDirPath = new javax.swing.JTextField();
        chooseTigerHome = new javax.swing.JButton();
        buttonPanel = new javax.swing.JPanel();
        saveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        postInitBGroup();

        setLayout(new java.awt.BorderLayout());

        prefsPanel.setToolTipText("Preferences");
        prefsPanel.setName("Preferences");
        salsaRepPanel.setLayout(new java.awt.GridBagLayout());

        salsaRepPanel.setOpaque(false);
        salsaRepositoryDirLabel.setText("Repository Directory");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
        salsaRepPanel.add(salsaRepositoryDirLabel, gridBagConstraints);

        salsaRepositoryDirTF.setColumns(25);
        salsaRepositoryDirTF.setToolTipText("Repository Directory contains PQL, etc.");
        salsaRepositoryDirTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salsaRepositoryDirTFActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        salsaRepPanel.add(salsaRepositoryDirTF, gridBagConstraints);

        chooseDirButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/acre/visualizer/ui/icons/buttons/ChooseButton.gif")));
        chooseDirButton.setToolTipText("Choose Repository Directory");
        chooseDirButton.setBorderPainted(false);
        chooseDirButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        chooseDirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseDirButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 0, 0);
        salsaRepPanel.add(chooseDirButton, gridBagConstraints);

        salsaRootDirLabel.setText("Home Directory (Root)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        salsaRepPanel.add(salsaRootDirLabel, gridBagConstraints);

        salsaHomeDirTF.setColumns(25);
        salsaHomeDirTF.setToolTipText("Home / Root Directory Path");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        salsaRepPanel.add(salsaHomeDirTF, gridBagConstraints);

        chooseHomeDirButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/acre/visualizer/ui/icons/buttons/ChooseButton.gif")));
        chooseHomeDirButton.setToolTipText("Choose Home Directory");
        chooseHomeDirButton.setBorderPainted(false);
        chooseHomeDirButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        chooseHomeDirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseHomeDirButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        salsaRepPanel.add(chooseHomeDirButton, gridBagConstraints);

        prefsPanel.addTab("Repository", null, salsaRepPanel, "Set Salsa Root");

        dbPrefsPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        dbFieldsPanel.setLayout(new java.awt.GridBagLayout());

        dbDriverName.setText("JDBC Driver");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 5);
        dbFieldsPanel.add(dbDriverName, gridBagConstraints);

        dbJDBCDriverTF.setColumns(20);
        dbJDBCDriverTF.setToolTipText("RDBMS Driver Package Name");
        dbJDBCDriverTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dbJDBCDriverTFActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 3.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
        dbFieldsPanel.add(dbJDBCDriverTF, gridBagConstraints);

        dbURLLabel.setText("DB URL");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 5);
        dbFieldsPanel.add(dbURLLabel, gridBagConstraints);

        dbURLTF.setColumns(25);
        dbURLTF.setToolTipText("RDBMS URL to connect");
        dbURLTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dbURLTFActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
        dbFieldsPanel.add(dbURLTF, gridBagConstraints);

        userIdLabel.setText("User Id");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 5);
        dbFieldsPanel.add(userIdLabel, gridBagConstraints);

        userIdTF.setColumns(15);
        userIdTF.setToolTipText("RDBMS User Id");
        userIdTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userIdTFActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
        dbFieldsPanel.add(userIdTF, gridBagConstraints);

        passwordLabel.setText("Password");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 5);
        dbFieldsPanel.add(passwordLabel, gridBagConstraints);

        passwordTF.setColumns(15);
        passwordTF.setToolTipText("RDBMS password");
        passwordTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordTFActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
        dbFieldsPanel.add(passwordTF, gridBagConstraints);

        testRDBconnectButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/acre/visualizer/ui/icons/buttons/TestButton.gif")));
        testRDBconnectButton.setToolTipText("Test RDBMS Connection");
        testRDBconnectButton.setBorderPainted(false);
        testRDBconnectButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        testRDBconnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testRDBconnectButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        dbFieldsPanel.add(testRDBconnectButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        dbFieldsPanel.add(jSeparator1, gridBagConstraints);

        defaultSystemLabel.setText("Default System");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 5);
        dbFieldsPanel.add(defaultSystemLabel, gridBagConstraints);

        defaultVersionLabel.setText("Default Version");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 5);
        dbFieldsPanel.add(defaultVersionLabel, gridBagConstraints);

        populateDefaultSystemCB();
        defaultSystemCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultSystemCBActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
        dbFieldsPanel.add(defaultSystemCB, gridBagConstraints);

        populateDefaultVersionCB();
        defaultVersionCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultVersionCBActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
        dbFieldsPanel.add(defaultVersionCB, gridBagConstraints);

        dbPrefsPanel.add(dbFieldsPanel);

        prefsPanel.addTab("Database", null, dbPrefsPanel, "Set Database Preferences");

        debugPrefsPanel.setLayout(new java.awt.GridBagLayout());

        debugOnLabel.setText("Set Debug");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        debugPrefsPanel.add(debugOnLabel, gridBagConstraints);

        debugOnCheckBox.setText("Off");
        debugOnCheckBox.setToolTipText("Debug On / Off");
        debugOnCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                debugOnCheckBoxActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        debugPrefsPanel.add(debugOnCheckBox, gridBagConstraints);

        debugLevelLabel.setText("Debug Level");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        debugPrefsPanel.add(debugLevelLabel, gridBagConstraints);

        debugrbpanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));

        debugrbpanel.setToolTipText("Debug Level to use for Logging");
        initDebugLevelCB();
        debugLevelCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                debugLevelCBActionPerformed(evt);
            }
        });

        debugrbpanel.add(debugLevelCB);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        debugPrefsPanel.add(debugrbpanel, gridBagConstraints);

        logFileLabel.setText("Log File");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        debugPrefsPanel.add(logFileLabel, gridBagConstraints);

        logFileNameTF.setColumns(25);
        logFileNameTF.setEditable(false);
        logFileNameTF.setToolTipText("Log File contains log messages");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        debugPrefsPanel.add(logFileNameTF, gridBagConstraints);

        viewLogFileButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/acre/visualizer/ui/icons/buttons/ChooseButton.gif")));
        viewLogFileButton.setToolTipText("Click to select Log File");
        viewLogFileButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
        viewLogFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewLogFileButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        debugPrefsPanel.add(viewLogFileButton, gridBagConstraints);

        prefsPanel.addTab("Debug", null, debugPrefsPanel, "Set Debug Preferenecs");

        extractorPrefsPanel.setToolTipText("Extractor Settings");
        tigerPathLabel.setText("J2SE 1.5 (TIGER) Home");
        extractorPrefsPanel.add(tigerPathLabel);

        tigerHomeDirPath.setColumns(30);
        tigerHomeDirPath.setEditable(false);
        tigerHomeDirPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tigerHomeDirPathActionPerformed(evt);
            }
        });

        extractorPrefsPanel.add(tigerHomeDirPath);

        chooseTigerHome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/acre/visualizer/ui/icons/buttons/ChooseButton.gif")));
        chooseTigerHome.setToolTipText("Choose Java 1.5 Home Directory Path");
        chooseTigerHome.setBorderPainted(false);
        chooseTigerHome.setMargin(new java.awt.Insets(0, 0, 0, 0));
        chooseTigerHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseTigerHomeActionPerformed(evt);
            }
        });

        extractorPrefsPanel.add(chooseTigerHome);

        prefsPanel.addTab("Extractors", extractorPrefsPanel);

        add(prefsPanel, java.awt.BorderLayout.CENTER);

        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/acre/visualizer/ui/icons/buttons/SaveButton.gif")));
        saveButton.setMnemonic('S');
        saveButton.setToolTipText("Save Configuration");
        saveButton.setBorderPainted(false);
        saveButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(saveButton);

        cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/acre/visualizer/ui/icons/buttons/CancelButton.gif")));
        cancelButton.setMnemonic('C');
        cancelButton.setToolTipText("Cancel Configuration Edits");
        cancelButton.setBorderPainted(false);
        cancelButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(cancelButton);

        add(buttonPanel, java.awt.BorderLayout.SOUTH);

    }//GEN-END:initComponents

    private void defaultSystemCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultSystemCBActionPerformed
        chooseDefaultSystem();
    }//GEN-LAST:event_defaultSystemCBActionPerformed

    private void defaultVersionCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultVersionCBActionPerformed
        chooseDefaultVersion();
    }//GEN-LAST:event_defaultVersionCBActionPerformed

    private void chooseHomeDirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseHomeDirButtonActionPerformed
        showChooseHomeDirPathChooser();
    }//GEN-LAST:event_chooseHomeDirButtonActionPerformed

    private void chooseTigerHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseTigerHomeActionPerformed
        showChooseTigerHomeDir();
    }//GEN-LAST:event_chooseTigerHomeActionPerformed

    private void tigerHomeDirPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tigerHomeDirPathActionPerformed
        // do nothing
    }//GEN-LAST:event_tigerHomeDirPathActionPerformed

    private void viewLogFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewLogFileButtonActionPerformed
        showLogFile();
    }//GEN-LAST:event_viewLogFileButtonActionPerformed

    private void debugLevelCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_debugLevelCBActionPerformed
        Object debugLevel = debugLevelCB.getSelectedItem();
        if (debugLevel != null) {
            configData.setDebugLevel(debugLevel.toString());
        }
    }//GEN-LAST:event_debugLevelCBActionPerformed

    private void debugOnCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_debugOnCheckBoxActionPerformed
        if (this.debugOnCheckBox.isSelected()) {
            configData.setDebugOn(true);
            debugOnCheckBox.setText("On");
        } else {
            configData.setDebugOn(false);
            debugOnCheckBox.setText("Off");            
        }
    }//GEN-LAST:event_debugOnCheckBoxActionPerformed

    private void testRDBconnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testRDBconnectButtonActionPerformed
        testRDBConnection();
    }//GEN-LAST:event_testRDBconnectButtonActionPerformed

    private void passwordTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordTFActionPerformed
        configData.setRdbmsUserPassword(passwordTF.getText());
    }//GEN-LAST:event_passwordTFActionPerformed

    private void userIdTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userIdTFActionPerformed
        configData.setRdbmsUserId(userIdTF.getText());
    }//GEN-LAST:event_userIdTFActionPerformed

    private void dbURLTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dbURLTFActionPerformed
        configData.setRdbmsJDBCDriver(dbURLTF.getText());
    }//GEN-LAST:event_dbURLTFActionPerformed

    private void dbJDBCDriverTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dbJDBCDriverTFActionPerformed
        configData.setRdbmsURL(dbURLTF.getText());
    }//GEN-LAST:event_dbJDBCDriverTFActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        resetConfigData();
        hideMe();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        saveConfigData();
    }//GEN-LAST:event_saveButtonActionPerformed

    private void chooseDirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseDirButtonActionPerformed
        showRootChooser();
    }//GEN-LAST:event_chooseDirButtonActionPerformed

    private void salsaRepositoryDirTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salsaRepositoryDirTFActionPerformed
        if (salsaRepositoryDirTF.getText()!=null)
            configData.setAcreRepositoryDirectory(
                    salsaRepositoryDirTF.getText()
            );
    }//GEN-LAST:event_salsaRepositoryDirTFActionPerformed
    
    public void setSelectedComponent(Component c) {
        prefsPanel.setSelectedComponent(c);
    }

    public Component getSelectedComponent() {
        return prefsPanel.getSelectedComponent();
    }

    public Component selectExtractorPrefsPanel() {
        Component c = getSelectedComponent();
          setSelectedComponent(extractorPrefsPanel);
        return c;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton chooseDirButton;
    private javax.swing.JButton chooseHomeDirButton;
    private javax.swing.JButton chooseTigerHome;
    private javax.swing.JLabel dbDriverName;
    private javax.swing.JPanel dbFieldsPanel;
    private javax.swing.JTextField dbJDBCDriverTF;
    private javax.swing.JPanel dbPrefsPanel;
    private javax.swing.ButtonGroup dbTypeBGroup;
    private javax.swing.JLabel dbURLLabel;
    private javax.swing.JTextField dbURLTF;
    private javax.swing.JComboBox debugLevelCB;
    private javax.swing.JLabel debugLevelLabel;
    private javax.swing.JCheckBox debugOnCheckBox;
    private javax.swing.JLabel debugOnLabel;
    private javax.swing.JPanel debugPrefsPanel;
    private javax.swing.JPanel debugrbpanel;
    private javax.swing.JComboBox defaultSystemCB;
    private javax.swing.JLabel defaultSystemLabel;
    private javax.swing.JComboBox defaultVersionCB;
    private javax.swing.JLabel defaultVersionLabel;
    private javax.swing.JPanel extractorPrefsPanel;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel logFileLabel;
    private javax.swing.JTextField logFileNameTF;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JTextField passwordTF;
    private javax.swing.JTabbedPane prefsPanel;
    private javax.swing.JTextField salsaHomeDirTF;
    private javax.swing.JPanel salsaRepPanel;
    private javax.swing.JLabel salsaRepositoryDirLabel;
    private javax.swing.JTextField salsaRepositoryDirTF;
    private javax.swing.JLabel salsaRootDirLabel;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton testRDBconnectButton;
    private javax.swing.JTextField tigerHomeDirPath;
    private javax.swing.JLabel tigerPathLabel;
    private javax.swing.JLabel userIdLabel;
    private javax.swing.JTextField userIdTF;
    private javax.swing.JButton viewLogFileButton;
    // End of variables declaration//GEN-END:variables
    
    private void postInitBGroup() {
        
    }   

    private JDialog myDialog;
    private JFileChooser salsaRootChooser;
    private JFileChooser tdbFileChooser;
    private JFileChooser javaEditorFileChooser;
    private JFileChooser tigerHomeDirChooser;
    private JFileChooser dotExecFileChooser;
    private JFileChooser salsaHomeChooser;

    private ConfigService configService;
    private ConfigData configData;
    private JFrame parentFrame;
    private JDialog logFileDialog;
    private LogFileViewer logFileViewer;
    private AcreColorChooser colorChoooser;
    private Color pdmColor;
    private Color roleColor;
    private Color artifactColor;

    private AcreDbDAO acreDbDAO = new AcreDbDAO();
    private String defaultSystem = null;
    private String defaultVersion = null;

    private static String VISUALIZER_3D_ENABLED="3D Visualizer Enabled";
    private static String VISUALIZER_3D_DISABLED="3D Visualizer Disabled";
    private static String COLLAB_3D_ENABLED="3D Collaboration Enabled";
    private static String COLLAB_3D_DISABLED="3D Collaboration Disabled";


    private void initRootChooser() {
        if (salsaRootChooser == null) {
            salsaRootChooser = new JFileChooser(".");
            salsaRootChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            salsaRootChooser.setMultiSelectionEnabled(false);
            salsaRootChooser.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    chooseSalsaConfigRoot(e);
                }
            });
        }
    }

    private void initHomeChooser() {
        if (salsaHomeChooser == null) {
            salsaHomeChooser = new JFileChooser(".");
            salsaHomeChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            salsaHomeChooser.setMultiSelectionEnabled(false);
            salsaHomeChooser.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    chooseSalsaHomeDir(e);
                }
            });
        }
    }


    private void initTigerHomeDirChooser() {
    if (tigerHomeDirChooser== null) {
            tigerHomeDirChooser = new JFileChooser(".");
            tigerHomeDirChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            tigerHomeDirChooser.setMultiSelectionEnabled(false);
            tigerHomeDirChooser.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    chooseTigerHomeDir(e);
                }
            });
        }
    }

    private void chooseTigerHomeDir(ActionEvent e) {
        if ((JFileChooser.APPROVE_SELECTION.equals(e.getActionCommand()))
                && (tigerHomeDirChooser.getSelectedFile() != null)) {

            String path = tigerHomeDirChooser.getSelectedFile().getAbsolutePath();
            String convertedPath = path;

            if (path.indexOf('\\') != -1)
                convertedPath = path.replace('\\', '/');

            this.tigerHomeDirPath.setText(convertedPath);

        }
    }

    private void initTDBFileChooser() {
        if (tdbFileChooser == null) {
            String startDir = ".";

            if (salsaRepositoryDirTF.getText()!=null)
                startDir = salsaRepositoryDirTF.getText();

            tdbFileChooser= new JFileChooser(startDir);
            tdbFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            tdbFileChooser.setMultiSelectionEnabled(false);
            tdbFileChooser.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    chooseTDBFile(e);
                }
            });
        }
        if ((salsaRepositoryDirTF.getText() != null)
            && (salsaRepositoryDirTF.getText().trim().length() !=0)) {

            tdbFileChooser.setCurrentDirectory(new File(salsaRepositoryDirTF.getText()));
        }
    }

    private void showChooseHomeDirPathChooser() {
        initHomeChooser();
        salsaHomeChooser.showDialog(this, "Choose " + AcreUIConstants.APP_NAME + " Home Directory");
    }
    private void showRootChooser() {
        initRootChooser();
        salsaRootChooser.showDialog(this, "Choose " + AcreUIConstants.APP_NAME + " Repository");
    }

    private void showTDBChooser() {
        initTDBFileChooser();
        tdbFileChooser.showDialog(this, "Choose " + AcreUIConstants.APP_NAME + " TDB File");
    }

    private void initChooseDotExecPathChooser() {
        if (dotExecFileChooser == null) {
            String startDir = ".";

            if (salsaRepositoryDirTF.getText()!=null)
                startDir = salsaRepositoryDirTF.getText();

            dotExecFileChooser = new JFileChooser(startDir);
            dotExecFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            dotExecFileChooser.setMultiSelectionEnabled(false);
            dotExecFileChooser.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    chooseDOTExecutable(e);
                }
            });
        }
//        if ((dotExecPath.getText() != null)
//            && (dotExecPath.getText().trim().length() !=0)) {
//
//            dotExecFileChooser.setCurrentDirectory(new File(dotExecPath.getText()));
//        }
    }
    private void initJavaFileEditorChooser() {
        if (javaEditorFileChooser == null) {
            String startDir = ".";

            if (salsaRepositoryDirTF.getText()!=null)
                startDir = salsaRepositoryDirTF.getText();

            javaEditorFileChooser = new JFileChooser(startDir);
            javaEditorFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            javaEditorFileChooser.setMultiSelectionEnabled(false);
            javaEditorFileChooser.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    chooseJavaEditor(e);
                }
            });
        }
//        if ((javaEditorPathTF.getText() != null)
//            && (javaEditorPathTF.getText().trim().length() !=0)) {
//
//            javaEditorFileChooser.setCurrentDirectory(new File(javaEditorPathTF.getText()));
//        }
    }

    private void chooseDOTExecutable(ActionEvent e) {
        if ((JFileChooser.APPROVE_SELECTION.equals(e.getActionCommand()))
                && (dotExecFileChooser.getSelectedFile() != null)) {

            String path = dotExecFileChooser.getSelectedFile().getAbsolutePath();
            String convertedPath = path;

            if (path.indexOf('\\') != -1)
                convertedPath = path.replace('\\', '/');

//            this.dotExecPath.setText(convertedPath);

        }
    }

    private void chooseJavaEditor(ActionEvent e) {
        if ((JFileChooser.APPROVE_SELECTION.equals(e.getActionCommand()))
                && (javaEditorFileChooser.getSelectedFile() != null)) {

            String path = javaEditorFileChooser.getSelectedFile().getAbsolutePath();
            String convertedPath = path;

            if (path.indexOf('\\') != -1)
                convertedPath = path.replace('\\', '/');

//            this.javaEditorPathTF.setText(convertedPath);

        }
//        else if (JFileChooser.CANCEL_SELECTION.equals(e.getActionCommand())) {
//            JOptionPane.showMessageDialog(
//                this,
//                "Salsa TDB File was not selected.\nPlease choose a correct TDB File before continuing.",
//                "Salsa TDB File",
//                JOptionPane.ERROR_MESSAGE);
//        }
    }

    private void chooseSalsaHomeDir(ActionEvent e) {
        if ((JFileChooser.APPROVE_SELECTION.equals(e.getActionCommand()))
                && (salsaHomeChooser.getSelectedFile() != null)) {

            String path = salsaHomeChooser.getSelectedFile().getAbsolutePath();
            String convertedPath = path;

            if (path.indexOf('\\') != -1)
                convertedPath = path.replace('\\', '/');

            this.salsaHomeDirTF.setText(convertedPath);

        } else if (JFileChooser.CANCEL_SELECTION.equals(e.getActionCommand())) {
            JOptionPane.showMessageDialog(
                this,
                "Salsa Home Directory was not selected.\nPlease choose a correct directory before continuing.",
                "Salsa Home Directory",
                JOptionPane.ERROR_MESSAGE);
        }
    }


    private void chooseSalsaConfigRoot(ActionEvent e) {
        if ((JFileChooser.APPROVE_SELECTION.equals(e.getActionCommand()))
                && (salsaRootChooser.getSelectedFile() != null)) {

//            System.out.println("Set Salsa ROOT = " + salsaRootChooser.getSelectedFile());

            String path = salsaRootChooser.getSelectedFile().getAbsolutePath();
            String convertedPath = path;

            if (path.indexOf('\\') != -1)
                convertedPath = path.replace('\\', '/');

            this.salsaRepositoryDirTF.setText(convertedPath);

        } else if (JFileChooser.CANCEL_SELECTION.equals(e.getActionCommand())) {
            JOptionPane.showMessageDialog(
                this,
                "Salsa Root Repository was not selected.\nPlease choose a correct directory before continuing.",
                "Salsa Repository",
                JOptionPane.ERROR_MESSAGE);
        }
    }

    private void chooseTDBFile(ActionEvent e) {
        if ((JFileChooser.APPROVE_SELECTION.equals(e.getActionCommand()))
                && (tdbFileChooser.getSelectedFile() != null)) {

//            System.out.println("Set TDB File = " + tdbFileChooser.getSelectedFile());

            String path = tdbFileChooser.getSelectedFile().getAbsolutePath();
            String convertedPath = path;

            if (path.indexOf('\\') != -1)
                convertedPath = path.replace('\\', '/');

            //this.salsaTADBFilePathTF.setText(convertedPath);

        } else if (JFileChooser.CANCEL_SELECTION.equals(e.getActionCommand())) {
            JOptionPane.showMessageDialog(
                this,
                "Salsa TDB File was not selected.\nPlease choose a correct TDB File before continuing.",
                "Salsa TDB File",
                JOptionPane.ERROR_MESSAGE);
        }
    }

    public ConfigService getConfigService() {
        return configService;
    }

    public void setConfigService(ConfigService configService) {
        this.configService = configService;
        resetConfigData();
    }

    public void copyDataFromScreen() {
        if (salsaHomeDirTF.getText() != null)
            configData.setAcreHomeDirectory(salsaHomeDirTF.getText());

        if (salsaRepositoryDirTF.getText() != null)
            configData.setAcreRepositoryDirectory(salsaRepositoryDirTF.getText());

//        if (useRDBRadioButton.isSelected()) {
            configData.setDBTypeToRDBMS();
//        } else {
//            configData.setDBTypeToTDB();
//        }

        if (dbJDBCDriverTF.getText() != null)
            configData.setRdbmsJDBCDriver(dbJDBCDriverTF.getText());

        if (dbURLTF.getText() != null)
            configData.setRdbmsURL(dbURLTF.getText());

        if (userIdTF.getText() != null)
            configData.setRdbmsUserId(userIdTF.getText());

        if (passwordTF.getText() != null)
            configData.setRdbmsUserPassword(passwordTF.getText());

//        if (salsaTADBFilePathTF.getText() != null)
//            configData.setTdbFilePath(salsaTADBFilePathTF.getText());

//        if (visualizer3DCB.isSelected()) {
//            configData.setVisualizer3DOn(true);
//        } else {
//            configData.setVisualizer3DOn(false);
//        }
//
//        if (collabCB.isSelected()) {
//            configData.setCollaboration3DOn(true);
//        } else {
//            configData.setCollaboration3DOn(false);
//        }


        if (debugOnCheckBox.isSelected()) {
            configData.setDebugOn(true);
        } else {
            configData.setDebugOn(false);
        }

        if (debugLevelCB.getSelectedItem() != null) {
            configData.setDebugLevel(debugLevelCB.getSelectedItem().toString());
        }

//        if (javaEditorPathTF.getText() != null) {
//            configData.setJavaEditorPath(javaEditorPathTF.getText());
//        }

        if (pdmColor != null) {
            configData.setPDMColor(pdmColor);
        }
        if (roleColor != null) {
            configData.setRoleColor(roleColor);
        }

        if (artifactColor != null) {
            configData.setArtifactColor(artifactColor);
        }

        if (tigerHomeDirPath.getText() != null) {
            configData.setTigerHomePath(tigerHomeDirPath.getText());
        }

//        if (dotExecPath.getText() != null) {
//            configData.setGrappaDOTExecutablePath(dotExecPath.getText());
//        }

        if (defaultSystemCB.getSelectedIndex() != -1) {
            String system = (String) defaultSystemCB.getSelectedItem();
            configData.setAcreDefaultSystem(system);
        }

        if (defaultVersionCB.getSelectedIndex() != -1) {
            String version = (String) defaultVersionCB.getSelectedItem();
            configData.setAcreDefaultVersion(version);
        }

//        if (debugLevelErrorRB.isSelected())
//            configData.setDebugLevelError();
//        else if (debugLevelWarningRB.isSelected())
//            configData.setDebugLevelWarning();
//        else if (debugLevelInfoRB.isSelected())
//            configData.setDebugLevelInfo();

    }

    public void resetConfigData() {
        configData = new ConfigData(configService.getConfigData());

        if (configData.getAcreHomeDirectory() != null)
            salsaHomeDirTF.setText(configData.getAcreHomeDirectory());

        if (configData.getAcreRepositoryDirectory() != null)
            salsaRepositoryDirTF.setText(configData.getAcreRepositoryDirectory());

//        if (configData.isDBTypeRDBMS()) {
//            useRDBRadioButton.setSelected(true);
//        } else {
//            useTDBRadioButton.setSelected(true);
//        }

//        if (configData.isVisualizer3DOn()) {
//            visualizer3DCB.setSelected(true);
//            visualizer3DCB.setText(VISUALIZER_3D_ENABLED);
//        } else {
//            visualizer3DCB.setSelected(false);
//            visualizer3DCB.setText(VISUALIZER_3D_DISABLED);
//        }
//
//        if (configData.isCollaboration3DOn()) {
//            collabCB.setSelected(true);
//            collabCB.setText(COLLAB_3D_ENABLED);
//        } else {
//            collabCB.setSelected(false);
//            collabCB.setText(COLLAB_3D_DISABLED);
//        }


        if (configData.isDebugOn()) {
            debugOnCheckBox.setSelected(true);
            debugOnCheckBox.setText("On");
        } else {
            debugOnCheckBox.setSelected(false);
            debugOnCheckBox.setText("Off");
        }

        if (configData.getDebugLevel() != null)
            this.debugLevelCB.setSelectedItem(configData.getDebugLevel());

        if (configData.getRdbmsURL() != null)
            this.dbURLTF.setText(configData.getRdbmsURL());

        if (configData.getRdbmsJDBCDriver() != null)
            this.dbJDBCDriverTF.setText(configData.getRdbmsJDBCDriver());

        if (configData.getRdbmsUserId() != null)
            this.userIdTF.setText(configData.getRdbmsUserId());

        if (configData.getRdbmsUserPassword() != null)
            this.passwordTF.setText(configData.getRdbmsUserPassword());

//        if (configData.getTdbFilePath() != null)
//            this.salsaTADBFilePathTF.setText(configData.getTdbFilePath());

        if (configData.getLogFilePath() != null)
            this.logFileNameTF.setText(configData.getLogFilePath());

        if (configData.getPdmColor() != null) {
            this.pdmColor = configData.getPdmColor();
//            setPanelColor(pdmColorPanel, pdmColor);
            //setButtonColor(choosePDMColorButton, pdmColor);
        }

        if (configData.getRoleColor() != null) {
            this.roleColor= configData.getRoleColor();
            //setButtonColor(chooseRoleColorButton, roleColor);
//            setPanelColor(roleColorPanel, roleColor);
        }

        if (configData.getArtifactColor() != null) {
            this.artifactColor = configData.getArtifactColor();
            //setButtonColor(chooseArtifactColorButton, artifactColor);
//            setPanelColor(artifactColorPanel, artifactColor);
        }

        if (configData.getJavaEditorPath() != null) {
//            this.javaEditorPathTF.setText(configData.getJavaEditorPath());
        }

        if (configData.getTigerHomePath() != null) {
            this.tigerHomeDirPath.setText(configData.getTigerHomePath());
        }

        if (configData.getGrappaDOTExecutablePath() != null) {
//            this.dotExecPath.setText(configData.getGrappaDOTExecutablePath());
        }

        defaultSystem = configData.getAcreDefaultSystem();
        defaultVersion = configData.getAcreDefaultVersion();
        defaultSystemCB.setSelectedItem(defaultSystem);
        defaultVersionCB.setSelectedItem(defaultVersion);

    }

    private void saveConfigData() {
        try {
            copyDataFromScreen();
            configService.getConfigData().setData(configData);
            configService.savePreferences();
            JOptionPane.showMessageDialog(this,
                    "Saved Configuration Information.",
                    "Save Config",
                    JOptionPane.INFORMATION_MESSAGE
                    );
            this.hideMe();
        } catch (AcreConfigException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this,
                    "Failed to save Config Data:\n" + e.getMessage(),
                    "Save Config",
                    JOptionPane.ERROR_MESSAGE
                    );
        }
    }


    public void testRDBConnection () {
        String url = dbURLTF.getText();
        String driver = dbJDBCDriverTF.getText();
        String userid = userIdTF.getText();
        String password = passwordTF.getText();

        try {
            PQLConnection conn = PQLConnectionFactory.createPQLConnectionToRDB(driver, url, userid, password);           
            conn.isClosed();
            conn.close();

        } catch (Throwable e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this,
                    "Failed to connect to RDBMS:\n" +
                    e.getMessage(),
                    "Test Connect",
                    JOptionPane.ERROR_MESSAGE
                    );
            return;
        }
        JOptionPane.showMessageDialog(this,
                "Connection OK for " + url,
                "Test RDBMS Connection",
                JOptionPane.INFORMATION_MESSAGE);
    }

    public JFrame getParentFrame() {
        return parentFrame;
    }

    public void setParentFrame(JFrame parentFrame) {
        this.parentFrame = parentFrame;
    }

    public void setDialog(JDialog configDialog) {
        this.myDialog = configDialog;
    }

    public JDialog getDialog() {
        return myDialog;
    }

    public void showMe() {
        if (myDialog != null) {
            myDialog.setVisible(true);
        }
    }

    public void hideMe() {
        if (myDialog != null) {
            myDialog.setVisible(false);
        }
    }
    
    private void initDebugLevelCB() {
        Object [] values = ConfigService.getInstance().getDebugLevelValues();
        DefaultComboBoxModel model = new DefaultComboBoxModel(values);
        debugLevelCB.setModel(model);
    }

    private void showLogFile() {
        if (Main.getMDIFrame() != null) {
            Main.getMDIFrame().showLogViewer();
            return;
        }
        if (logFileDialog == null) {
            logFileDialog = new JDialog(getParentFrame(), false);
            logFileViewer = new LogFileViewer();
            logFileViewer.setDialog(logFileDialog);
            logFileDialog.setContentPane(logFileViewer);
            logFileViewer.loadLog();
            logFileDialog.pack();
            logFileDialog.setLocationRelativeTo(getParentFrame());

        }
        logFileDialog.setVisible(true);
    }

    private void showChooseDotExecPath() {
        initChooseDotExecPathChooser();
        dotExecFileChooser.showDialog(this, "Choose Grappa DOT Executable Path");
    }

    private void showChooseTigerHomeDir() {
        initTigerHomeDirChooser();
        tigerHomeDirChooser.showDialog(this, "Choose J2SE Java Home Dir");
    }

    private void showChooseJavaEditor() {
        initJavaFileEditorChooser();
        javaEditorFileChooser.showDialog(this, "Choose Java Source Code Editor");
    }

    private void setButtonColor(JButton b, Color c) {
        if (b != null) {
            b.setForeground(c);
            b.setBackground(c);
        }
    }
    private void choosePDMColor() {
        getColorChooser().setColor(pdmColor);
        getColorChooser().setTitle("Choose PDM Color");
        getColorChooser().showMe();
        if (getColorChooser().isColorChanged()) {
            pdmColor = getColorChooser().getColor();
            //setButtonColor(choosePDMColorButton, pdmColor);
//            setPanelColor(pdmColorPanel, pdmColor);
        }
    }

    private void chooseRoleColor() {
        getColorChooser().setColor(roleColor);
        getColorChooser().setTitle("Choose Role Color");
        getColorChooser().showMe();

        if (getColorChooser().isColorChanged()) {
            roleColor = getColorChooser().getColor();
            //setButtonColor(chooseRoleColorButton, roleColor);
//            setPanelColor(roleColorPanel, roleColor);
        }
    }

    private void chooseArtifactColor() {
        getColorChooser().setColor(artifactColor);
        getColorChooser().setTitle("Choose Artifact Color");
        getColorChooser().showMe();
        if (getColorChooser().isColorChanged()) {
            artifactColor = getColorChooser().getColor();
            //setButtonColor(chooseArtifactColorButton, artifactColor);
//            setPanelColor(artifactColorPanel, artifactColor);
        }
    }

    private void setPanelColor(JPanel panel, Color color) {
        panel.setForeground(color);
        panel.setBackground(color);
    }

    private AcreColorChooser getColorChooser() {
        if (colorChoooser == null) {
            colorChoooser = new AcreColorChooser(this, "Choose Color");
        }
        return colorChoooser;
    }

//    public JLabel getPdmColorLabel() {
//        return pdmColorLabel;
//    }
//
//    public void setPdmColorLabel(JLabel pdmColorLabel) {
//        this.pdmColorLabel = pdmColorLabel;
//    }

    public Color getPDMColor() {
        return pdmColor;
    }

    public Color getRoleColor() {
        return roleColor;
    }

    public Color getArtifactColor() {
        return artifactColor;
    }

//    private void chooseEnable3DCollaboration() {
//        if (collabCB.isSelected()) {
//            collabCB.setText(COLLAB_3D_ENABLED);
//        } else {
//            collabCB.setText(COLLAB_3D_DISABLED);
//        }
//    }
//
//    private void chooseEnable3DVisualizer() {
//        if (visualizer3DCB.isSelected()) {
//            visualizer3DCB.setText(VISUALIZER_3D_ENABLED);
//        } else {
//            visualizer3DCB.setText(VISUALIZER_3D_DISABLED);
//        }
//    }

    private AcreDbDAO getSalsaDbDAO() {
        if (acreDbDAO == null)
            acreDbDAO = new AcreDbDAO();
        return acreDbDAO;
    }
    private void populateDefaultSystemCB() {
        String [] systems = null;
        try {
            systems = getSalsaDbDAO().findAllSystems();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            defaultSystemCB.removeAllItems();
            if (systems != null) {
                for (int i=0; i < systems.length; i++) {
                    defaultSystemCB.addItem(systems[i]);
                }
            }

            defaultSystemCB.setSelectedIndex(-1);
            if (defaultSystem != null) {
                defaultSystemCB.setSelectedItem(defaultSystem);
            }
        }

    }

    private void populateDefaultVersionCB() {

        String selectedSystem = (String) defaultSystemCB.getSelectedItem();

        if (selectedSystem == null)
            return;

        String [] versions = getSalsaDbDAO().findVersionsForSystem(selectedSystem);
        defaultVersionCB.removeAllItems();

        for (int i=0; i < versions.length; i++) {
            defaultVersionCB.addItem(versions[i]);
        }

        defaultVersionCB.setSelectedIndex(-1);

        if (defaultVersion != null) {
            defaultVersionCB.setSelectedItem(defaultVersion);
        }
    }

    private void chooseDefaultSystem() {
        populateDefaultVersionCB();
    }

    private void chooseDefaultVersion() {
    }

}
