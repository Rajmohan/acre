/**
 *   Copyright 2004-2005 Sun Microsystems, Inc.
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */
package org.acre.visualizer.ui.dashboard;

import com.toedter.calendar.JCalendar;
import com.toedter.calendar.JDateChooser;
import org.acre.analytics.*;
import org.acre.common.AcreException;
import org.acre.config.ConfigService;
import org.acre.server.AcreDelegate;
import org.acre.server.UserContextObject;
//import org.jfree.chart.ChartPanel;
//import org.jfree.chart.JFreeChart;
//import org.jfree.data.category.CategoryDataset;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.tree.TreePath;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Logger;

/**
 *
 * @author  Deepak Alur
 */
public class DashboardPanel extends javax.swing.JPanel {
    
    /** Creates new form DashboardPanel */
    public DashboardPanel() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        treeSplitPane = new javax.swing.JSplitPane();
        detailPanel = new javax.swing.JPanel();
        treePanel = new javax.swing.JPanel();
        treeScrollPane = new javax.swing.JScrollPane();
        queryPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        fromDatePanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        toDatePanel = new javax.swing.JPanel();
        analyzeButton = new javax.swing.JButton();
        graphButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        treeSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        treeSplitPane.setBottomComponent(detailPanel);

        treePanel.setLayout(new java.awt.BorderLayout());

        treePanel.add(treeScrollPane, java.awt.BorderLayout.CENTER);

        treeSplitPane.setTopComponent(treePanel);

        add(treeSplitPane, java.awt.BorderLayout.CENTER);

        queryPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel1.setText("From Date:");
        queryPanel.add(jLabel1);

        initFromDatePanel();
        queryPanel.add(fromDatePanel);

        jLabel2.setText("To Date:");
        queryPanel.add(jLabel2);

        initToDatePanel();
        queryPanel.add(toDatePanel);

        analyzeButton.setText("Analyze");
        analyzeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeButtonActionPerformed(evt);
            }
        });

        queryPanel.add(analyzeButton);

        graphButton.setText("Show Chart");
        graphButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                graphButtonActionPerformed(evt);
            }
        });

        queryPanel.add(graphButton);

        add(queryPanel, java.awt.BorderLayout.NORTH);

    }//GEN-END:initComponents

    private void graphButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_graphButtonActionPerformed
        showChart();
    }//GEN-LAST:event_graphButtonActionPerformed

    private void analyzeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeButtonActionPerformed
        try {
            analyze();
        } catch (AcreException e) {
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
        }
    }//GEN-LAST:event_analyzeButtonActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton analyzeButton;
    private javax.swing.JPanel detailPanel;
    private javax.swing.JPanel fromDatePanel;
    private javax.swing.JButton graphButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel queryPanel;
    private javax.swing.JPanel toDatePanel;
    private javax.swing.JPanel treePanel;
    private javax.swing.JScrollPane treeScrollPane;
    private javax.swing.JSplitPane treeSplitPane;
    // End of variables declaration//GEN-END:variables

    private AcreTreeTable treeTable;

    private JPanel detailPanelContent;
    private JDateChooser fromDatePicker;
    private JDateChooser toDatePicker;
    private SnapshotQuery query = SnapshotsUtil.LATEST_SNAPSHOT_QUERY;
    private Logger logger;

    // Need to put in Login screen
    private UserContextObject user;
    private AcreDelegate delegate;

    /** Creates new form DashboardPanel */
    public DashboardPanel(UserContextObject user, AcreDelegate delegate) {
        this.user = user;
        this.delegate = delegate;
        initComponents();
    }

    public void initDashboard() {
        treeTable = new AcreTreeTable(new DashboardMetricsTableModel((Snapshot) null));
        treeScrollPane.setViewportView(treeTable);
        treeSplitPane.setDividerLocation(0.5d);
        logger = ConfigService.getInstance().getLogger(this);
    }

    public void setDetailPanelContent(JPanel detailPanelContent) {
        this.detailPanelContent = detailPanelContent;
        this.detailPanel.removeAll();
        this.detailPanel.add(detailPanelContent);
        detailPanel.repaint();
        detailPanel.validate();
    }

    public JPanel getDetailPanelContent() {
        return detailPanelContent;
    }

    public void loadMetrics() {
        loadMetrics(null);
    }

    public static void main(String args[]) {
        JFrame f = new JFrame("Dashboard");
        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        UserContextObject user = new UserContextObject( "user", "pass");
        AcreDelegate delegate = new AcreDelegate( user );
        DashboardPanel db = new DashboardPanel( user, delegate );


        PatternMetrics pm1 = createSample("One");
        PatternMetrics pm2 = createSample("Two");
        PatternMetrics pm3 = createSample("Three");
        ArrayList r = new ArrayList();
        r.add(pm3);
        r.add(pm1);
        pm2.setRoles(r);

        Snapshot ss = new Snapshot("Test", "V1", Calendar.getInstance().getTime());
        ss.addPatternMetrics(pm2);
        Snapshots s = new Snapshots();
        s.addSnapshot(ss);
        db.displayMetricsData(s);

        //db.loadMetrics();
        f.getContentPane().add(db);
        f.pack();
        f.setVisible(true);

    }

    private static PatternMetrics createSample(String name) {
        PatternMetrics root = new PatternMetrics("Root-" + name);
        ArrayList c = new ArrayList();
        c.add(new PatternMetrics(name+"-C1"));
        c.add(new PatternMetrics(name+"-C2"));
        c.add(new PatternMetrics(name+"-C3"));

        PatternMetrics nested = new PatternMetrics("Nested");
        PatternMetrics n1 = new PatternMetrics("n1");
        ArrayList n1rs = new ArrayList();
        n1rs.add(new PatternMetrics("n1-r1"));
        n1rs.add(new PatternMetrics("n1-r2"));
        n1.setRoles(n1rs);

        c.add(n1);
        root.setRoles(c);
        return root;
    }

    public SnapshotQuery getQuery() {
        return query;
    }

    private void initFromDatePanel() {
        fromDatePicker = new JDateChooser(new JCalendar(true));
        fromDatePanel.add(fromDatePicker);
    }

    private void initToDatePanel() {
        toDatePicker = new JDateChooser(new JCalendar(true));
        toDatePanel.add(toDatePicker);

    }

    private void analyze() throws AcreException {
        Date to = toDatePicker.getDate();
        Date from = fromDatePicker.getDate();
        query.setEndDate(to);
        query.setStartDate(from);
        String name = from.toString() + "-" + to.toString();
        query.setName(name);
        loadMetrics(query);
    }

    private void loadMetrics(SnapshotQuery query) {

        Snapshots ss = null;
        SnapshotQuery q = query;
        if (q == null) {
            q = SnapshotsUtil.LATEST_SNAPSHOT_QUERY;
        }
        try {
            ss = delegate.getQuerySnapshots(q);
        } catch (AcreException e) {
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
        }
        if (ss != null) {
            displayMetricsData(ss);
        }
    }

    private void displayMetricsData(Snapshots ss) {
        DashboardMetricsTableModel model = new DashboardMetricsTableModel(ss);
        treeTable = new AcreTreeTable(model);
        treeScrollPane.setViewportView(treeTable);
    }

    private void showChart() {

        ArrayList selectedNodes = new ArrayList();

        TreePath [] sel = treeTable.getTree().getSelectionPaths();
        for (int i=0; i < sel.length; i++) {
            Object node = sel[i].getLastPathComponent();
            System.out.println("Got selected = " + sel[i] + " node = " + node);
            selectedNodes.add(node);
        }

        processSelectedNodes(selectedNodes.toArray());
    }

    private void processSelectedNodes(Object[] nodes) {
        if (nodes == null)
            return;

        String [] patternNames = new String[nodes.length];
        boolean patternsFound = false;
        for (int i = 0; i < nodes.length; i++) {
            Object node = nodes[i];
            if (node instanceof PatternMetricsTreeNode) {
                PatternMetricsTreeNode pmnode = (PatternMetricsTreeNode) node;
                String patternName = pmnode.getPatternMetrics().getPatternName();
                patternNames[i] = patternName;
                patternsFound = true;
            }
        }

        if (! patternsFound) {
            return;
        }

        // patterns found, display chart for selected patterns
//        CategoryDataset ds = null;
//        try {
//            ds = AcreChartUtil.createDataset(patternNames, getQuery());
//            JFreeChart chart = AcreChartUtil.createChart("Pattern Analytics", "Patterns", "#Hits", ds);
//            ChartPanel cp = new ChartPanel(chart);
//            setDetailPanelContent(cp);
//        } catch (Throwable t) {
//            logger.throwing(this.getClass().getName(), "processSelectedNodes", t);
//        }

    }
}
