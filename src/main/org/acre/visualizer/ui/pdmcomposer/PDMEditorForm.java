/**
 *   Copyright 2004-2005 Sun Microsystems, Inc.
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */

package org.acre.visualizer.ui.pdmcomposer;

import org.acre.pdm.PDMType;
import org.acre.pdm.RelationshipType;
import org.acre.pdm.RoleType;
import org.acre.common.AcreErrors;
import org.acre.common.AcreRuntimeException;
import org.acre.dao.DAOFactory;
import org.acre.dao.PDMValidator;
import org.acre.dao.PatternQueryRepository;
import org.acre.dao.PatternRepository;
import org.acre.visualizer.ui.Main;
import org.acre.visualizer.ui.AcreUIUtils;

import javax.swing.ComboBoxModel;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import java.awt.Dimension;
import java.util.List;

/**
 *
 * @author  Administrator
 */
public class PDMEditorForm extends javax.swing.JPanel {

    /** Creates new form TestSampleForm */
    public PDMEditorForm() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        pdmFieldsPanel = new javax.swing.JPanel();
        pdmFieldsInsidePanel = new javax.swing.JPanel();
        nameLabel = new javax.swing.JLabel();
        pdmNameTF = new javax.swing.JTextField();
        descriptionLabel = new javax.swing.JLabel();
        pdmDescriptionTF = new javax.swing.JTextField();
        scriptedPDMPathLabel = new javax.swing.JLabel();
        scriptedPDMPathTF = new javax.swing.JTextField();
        attributesLabel = new javax.swing.JLabel();
        pdmAttributesTF = new javax.swing.JTextField();
        categoryLabel = new javax.swing.JLabel();
        categoryCB = new javax.swing.JComboBox();
        typeLabel = new javax.swing.JLabel();
        pdmTypeCB = new javax.swing.JComboBox();
        tierLabel = new javax.swing.JLabel();
        pdmTierCB = new javax.swing.JComboBox();
        factModelTypeCB = new javax.swing.JComboBox();
        factModelTypeLabel = new javax.swing.JLabel();
        rolesRelsPanel = new javax.swing.JPanel();
        rolesInsidePanel = new javax.swing.JPanel();
        roleTableScrollPane = new javax.swing.JScrollPane();
        roleTable = new javax.swing.JTable();
        roleButtonPanel = new javax.swing.JPanel();
        addRoleButton = new javax.swing.JButton();
        deleteRoleButton = new javax.swing.JButton();
        editRoleButton = new javax.swing.JButton();
        moveRoleUpButton = new javax.swing.JButton();
        moveRoleDownButton = new javax.swing.JButton();
        relationshipsInsidePanel = new javax.swing.JPanel();
        relationshipScrollPane = new javax.swing.JScrollPane();
        relationshipTable = new javax.swing.JTable();
        relationshipButtonPanel = new javax.swing.JPanel();
        addRelationshipButton = new javax.swing.JButton();
        deleteRelationshipButton = new javax.swing.JButton();
        editRelationshipButton = new javax.swing.JButton();
        moveRelUpButton = new javax.swing.JButton();
        moveRelDownButton = new javax.swing.JButton();
        mainActionButtonPanel = new javax.swing.JPanel();
        saveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        setPreferredSize(new java.awt.Dimension(800, 550));
        pdmFieldsPanel.setLayout(new java.awt.BorderLayout());

        pdmFieldsPanel.setPreferredSize(new java.awt.Dimension(400, 125));
        pdmFieldsInsidePanel.setLayout(new java.awt.GridBagLayout());

        nameLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        nameLabel.setText("Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        pdmFieldsInsidePanel.add(nameLabel, gridBagConstraints);

        pdmNameTF.setColumns(20);
        pdmNameTF.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        pdmNameTF.setToolTipText("Unique name for the PDM within the Repository");
        pdmNameTF.setNextFocusableComponent(pdmDescriptionTF);
        pdmNameTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pdmNameTFActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        pdmFieldsInsidePanel.add(pdmNameTF, gridBagConstraints);

        descriptionLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        descriptionLabel.setText("Description");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        pdmFieldsInsidePanel.add(descriptionLabel, gridBagConstraints);

        pdmDescriptionTF.setColumns(20);
        pdmDescriptionTF.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        pdmDescriptionTF.setToolTipText("Description for this PDM");
        pdmDescriptionTF.setNextFocusableComponent(scriptedPDMPathTF);
        pdmDescriptionTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pdmDescriptionTFActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        pdmFieldsInsidePanel.add(pdmDescriptionTF, gridBagConstraints);

        scriptedPDMPathLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        scriptedPDMPathLabel.setText("Scripted PDM Path");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        pdmFieldsInsidePanel.add(scriptedPDMPathLabel, gridBagConstraints);

        scriptedPDMPathTF.setColumns(20);
        scriptedPDMPathTF.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        scriptedPDMPathTF.setToolTipText("This is the relative path to the scripted PDM under the Repository. This is used only if the PDM Type is not BasicPDM and a scripted PDM path is required.");
        scriptedPDMPathTF.setNextFocusableComponent(pdmAttributesTF);
        scriptedPDMPathTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scriptedPDMPathTFActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        pdmFieldsInsidePanel.add(scriptedPDMPathTF, gridBagConstraints);

        attributesLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        attributesLabel.setText("Attributes");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        pdmFieldsInsidePanel.add(attributesLabel, gridBagConstraints);

        pdmAttributesTF.setColumns(20);
        pdmAttributesTF.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        pdmAttributesTF.setToolTipText("Optional attributes (future use)");
        pdmAttributesTF.setNextFocusableComponent(categoryCB);
        pdmAttributesTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pdmAttributesTFActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        pdmFieldsInsidePanel.add(pdmAttributesTF, gridBagConstraints);

        categoryLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        categoryLabel.setText("Category");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 10);
        pdmFieldsInsidePanel.add(categoryLabel, gridBagConstraints);

        initCategoryCB();
        categoryCB.setToolTipText("Category for this PDM");
        categoryCB.setNextFocusableComponent(pdmTypeCB);
        categoryCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryCBActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        pdmFieldsInsidePanel.add(categoryCB, gridBagConstraints);

        typeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        typeLabel.setText("Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 10);
        pdmFieldsInsidePanel.add(typeLabel, gridBagConstraints);

        initPDMTypeCB();
        pdmTypeCB.setToolTipText("Type of PDM");
        pdmTypeCB.setNextFocusableComponent(pdmTierCB);
        pdmTypeCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pdmTypeCBActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        pdmFieldsInsidePanel.add(pdmTypeCB, gridBagConstraints);

        tierLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        tierLabel.setText("Tier");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 10);
        pdmFieldsInsidePanel.add(tierLabel, gridBagConstraints);

        initPdmTierCB();
        pdmTierCB.setToolTipText("Tier related to this PDM");
        pdmTierCB.setNextFocusableComponent(factModelTypeCB);
        pdmTierCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pdmTierCBActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        pdmFieldsInsidePanel.add(pdmTierCB, gridBagConstraints);

        initFactModelTypeCB();
        factModelTypeCB.setNextFocusableComponent(addRoleButton);
        factModelTypeCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                factModelTypeCBActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        pdmFieldsInsidePanel.add(factModelTypeCB, gridBagConstraints);

        factModelTypeLabel.setText("Fact Model Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 10);
        pdmFieldsInsidePanel.add(factModelTypeLabel, gridBagConstraints);

        pdmFieldsPanel.add(pdmFieldsInsidePanel, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 100.0;
        add(pdmFieldsPanel, gridBagConstraints);

        rolesRelsPanel.setLayout(new javax.swing.BoxLayout(rolesRelsPanel, javax.swing.BoxLayout.Y_AXIS));

        rolesRelsPanel.setMinimumSize(new java.awt.Dimension(602, 83));
        rolesRelsPanel.setPreferredSize(new java.awt.Dimension(400, 250));
        rolesInsidePanel.setLayout(new java.awt.BorderLayout());

        rolesInsidePanel.setBorder(new javax.swing.border.TitledBorder("Roles"));
        rolesInsidePanel.setPreferredSize(new java.awt.Dimension(300, 250));
        initRoleTableScrollPane();
        roleTableScrollPane.setAutoscrolls(true);
        roleTableScrollPane.setPreferredSize(new java.awt.Dimension(300, 215));
        initRoleTable(null);
        roleTable.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        roleTable.setToolTipText("List of Roles for this PDM");
        roleTable.setVerifyInputWhenFocusTarget(false);
        roleTableScrollPane.setViewportView(roleTable);

        rolesInsidePanel.add(roleTableScrollPane, java.awt.BorderLayout.CENTER);

        roleButtonPanel.setPreferredSize(new java.awt.Dimension(300, 35));
        addRoleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/acre/visualizer/ui/icons/buttons/AddButton.gif")));
        addRoleButton.setToolTipText("Add New Role");
        addRoleButton.setBorderPainted(false);
        addRoleButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        addRoleButton.setNextFocusableComponent(addRelationshipButton);
        addRoleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRoleButtonActionPerformed(evt);
            }
        });

        roleButtonPanel.add(addRoleButton);

        deleteRoleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/acre/visualizer/ui/icons/buttons/DeleteButton.gif")));
        deleteRoleButton.setToolTipText("Delete Selected Role");
        deleteRoleButton.setBorderPainted(false);
        deleteRoleButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        deleteRoleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteRoleButtonActionPerformed(evt);
            }
        });

        roleButtonPanel.add(deleteRoleButton);

        editRoleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/acre/visualizer/ui/icons/buttons/EditButton.gif")));
        editRoleButton.setToolTipText("Edit Selected Role");
        editRoleButton.setBorderPainted(false);
        editRoleButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        editRoleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editRoleButtonActionPerformed(evt);
            }
        });

        roleButtonPanel.add(editRoleButton);

        moveRoleUpButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/acre/visualizer/ui/icons/buttons/MoveUp.gif")));
        moveRoleUpButton.setToolTipText("Move Up Selected Role");
        moveRoleUpButton.setBorderPainted(false);
        moveRoleUpButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        moveRoleUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveRoleUpButtonActionPerformed(evt);
            }
        });

        roleButtonPanel.add(moveRoleUpButton);

        moveRoleDownButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/acre/visualizer/ui/icons/buttons/MoveDown.gif")));
        moveRoleDownButton.setToolTipText("Move Down Selected Role");
        moveRoleDownButton.setBorderPainted(false);
        moveRoleDownButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        moveRoleDownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveRoleDownButtonActionPerformed(evt);
            }
        });

        roleButtonPanel.add(moveRoleDownButton);

        rolesInsidePanel.add(roleButtonPanel, java.awt.BorderLayout.SOUTH);

        rolesRelsPanel.add(rolesInsidePanel);

        relationshipsInsidePanel.setLayout(new java.awt.BorderLayout());

        relationshipsInsidePanel.setBorder(new javax.swing.border.TitledBorder("Relationships"));
        relationshipsInsidePanel.setPreferredSize(new java.awt.Dimension(300, 250));
        initRelationshipScrollPane();
        relationshipScrollPane.setAutoscrolls(true);
        relationshipScrollPane.setFocusable(false);
        relationshipScrollPane.setPreferredSize(new java.awt.Dimension(300, 215));
        initRelationshipTable(null);
        relationshipTable.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        relationshipTable.setFocusable(false);
        relationshipScrollPane.setViewportView(relationshipTable);

        relationshipsInsidePanel.add(relationshipScrollPane, java.awt.BorderLayout.CENTER);

        relationshipButtonPanel.setPreferredSize(new java.awt.Dimension(300, 35));
        addRelationshipButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/acre/visualizer/ui/icons/buttons/AddButton.gif")));
        addRelationshipButton.setToolTipText("Add New Relationship");
        addRelationshipButton.setBorderPainted(false);
        addRelationshipButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        addRelationshipButton.setNextFocusableComponent(saveButton);
        addRelationshipButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRelationshipButtonActionPerformed(evt);
            }
        });

        relationshipButtonPanel.add(addRelationshipButton);

        deleteRelationshipButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/acre/visualizer/ui/icons/buttons/DeleteButton.gif")));
        deleteRelationshipButton.setToolTipText("Delete Selected Relationship");
        deleteRelationshipButton.setBorderPainted(false);
        deleteRelationshipButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        deleteRelationshipButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteRelationshipButtonActionPerformed(evt);
            }
        });

        relationshipButtonPanel.add(deleteRelationshipButton);

        editRelationshipButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/acre/visualizer/ui/icons/buttons/EditButton.gif")));
        editRelationshipButton.setToolTipText("Edit Selected Relationship");
        editRelationshipButton.setBorderPainted(false);
        editRelationshipButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        editRelationshipButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editRelationshipButtonActionPerformed(evt);
            }
        });

        relationshipButtonPanel.add(editRelationshipButton);

        moveRelUpButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/acre/visualizer/ui/icons/buttons/MoveUp.gif")));
        moveRelUpButton.setToolTipText("Move Up Selected Relationship");
        moveRelUpButton.setBorderPainted(false);
        moveRelUpButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        moveRelUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveRelUpButtonActionPerformed(evt);
            }
        });

        relationshipButtonPanel.add(moveRelUpButton);

        moveRelDownButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/acre/visualizer/ui/icons/buttons/MoveDown.gif")));
        moveRelDownButton.setToolTipText("Move Down Selected Relationship");
        moveRelDownButton.setBorderPainted(false);
        moveRelDownButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        moveRelDownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveRelDownButtonActionPerformed(evt);
            }
        });

        relationshipButtonPanel.add(moveRelDownButton);

        relationshipsInsidePanel.add(relationshipButtonPanel, java.awt.BorderLayout.SOUTH);

        rolesRelsPanel.add(relationshipsInsidePanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 100.0;
        add(rolesRelsPanel, gridBagConstraints);

        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/acre/visualizer/ui/icons/buttons/SaveButton.gif")));
        saveButton.setMnemonic('S');
        saveButton.setToolTipText("Save this PDM");
        saveButton.setBorderPainted(false);
        saveButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        saveButton.setNextFocusableComponent(cancelButton);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        mainActionButtonPanel.add(saveButton);

        cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/acre/visualizer/ui/icons/buttons/CancelButton.gif")));
        cancelButton.setMnemonic('C');
        cancelButton.setToolTipText("Refresh values");
        cancelButton.setBorderPainted(false);
        cancelButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        cancelButton.setNextFocusableComponent(pdmNameTF);
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        mainActionButtonPanel.add(cancelButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.weightx = 75.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 0);
        add(mainActionButtonPanel, gridBagConstraints);

    }//GEN-END:initComponents

    private void factModelTypeCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_factModelTypeCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_factModelTypeCBActionPerformed

    private void moveRelDownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveRelDownButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_moveRelDownButtonActionPerformed

    private void editRelationshipButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editRelationshipButtonActionPerformed
        showEditRelationship();

    }//GEN-LAST:event_editRelationshipButtonActionPerformed

    private void moveRelUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveRelUpButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_moveRelUpButtonActionPerformed

    private void moveRoleDownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveRoleDownButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_moveRoleDownButtonActionPerformed

    private void moveRoleUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveRoleUpButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_moveRoleUpButtonActionPerformed

    private void editRoleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editRoleButtonActionPerformed
        showEditRole();
    }//GEN-LAST:event_editRoleButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        cancel();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // save the PDM
        save();
    }//GEN-LAST:event_saveButtonActionPerformed

    private void pdmNameTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pdmNameTFActionPerformed
        // TODO add your handling code here:
        setUpdated(true);
    }//GEN-LAST:event_pdmNameTFActionPerformed

    private void categoryCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryCBActionPerformed
        // TODO add your handling code here:
        setUpdated(true);
    }//GEN-LAST:event_categoryCBActionPerformed

    private void pdmTypeCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pdmTypeCBActionPerformed
        // TODO add your handling code here:
        setUpdated(true);
    }//GEN-LAST:event_pdmTypeCBActionPerformed

    private void pdmTierCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pdmTierCBActionPerformed
        // TODO add your handling code here:
        setUpdated(true);
    }//GEN-LAST:event_pdmTierCBActionPerformed

    private void pdmAttributesTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pdmAttributesTFActionPerformed
        // TODO add your handling code here:
        setUpdated(true);
    }//GEN-LAST:event_pdmAttributesTFActionPerformed

    private void scriptedPDMPathTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scriptedPDMPathTFActionPerformed
        // TODO add your handling code here:
        setUpdated(true);
    }//GEN-LAST:event_scriptedPDMPathTFActionPerformed

    private void addRoleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRoleButtonActionPerformed
        addRole();

    }//GEN-LAST:event_addRoleButtonActionPerformed

    private void addRelationshipButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRelationshipButtonActionPerformed
        addRelationship();

    }//GEN-LAST:event_addRelationshipButtonActionPerformed

    private void deleteRelationshipButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteRelationshipButtonActionPerformed

        deleteRelationship();

    }//GEN-LAST:event_deleteRelationshipButtonActionPerformed

    private void deleteRoleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteRoleButtonActionPerformed

        deleteRole();

    }//GEN-LAST:event_deleteRoleButtonActionPerformed

    private void pdmDescriptionTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pdmDescriptionTFActionPerformed
        setUpdated(true);
    }//GEN-LAST:event_pdmDescriptionTFActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addRelationshipButton;
    private javax.swing.JButton addRoleButton;
    private javax.swing.JLabel attributesLabel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox categoryCB;
    private javax.swing.JLabel categoryLabel;
    private javax.swing.JButton deleteRelationshipButton;
    private javax.swing.JButton deleteRoleButton;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JButton editRelationshipButton;
    private javax.swing.JButton editRoleButton;
    private javax.swing.JComboBox factModelTypeCB;
    private javax.swing.JLabel factModelTypeLabel;
    private javax.swing.JPanel mainActionButtonPanel;
    private javax.swing.JButton moveRelDownButton;
    private javax.swing.JButton moveRelUpButton;
    private javax.swing.JButton moveRoleDownButton;
    private javax.swing.JButton moveRoleUpButton;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField pdmAttributesTF;
    private javax.swing.JTextField pdmDescriptionTF;
    private javax.swing.JPanel pdmFieldsInsidePanel;
    private javax.swing.JPanel pdmFieldsPanel;
    private javax.swing.JTextField pdmNameTF;
    private javax.swing.JComboBox pdmTierCB;
    private javax.swing.JComboBox pdmTypeCB;
    private javax.swing.JPanel relationshipButtonPanel;
    private javax.swing.JScrollPane relationshipScrollPane;
    private javax.swing.JTable relationshipTable;
    private javax.swing.JPanel relationshipsInsidePanel;
    private javax.swing.JPanel roleButtonPanel;
    private javax.swing.JTable roleTable;
    private javax.swing.JScrollPane roleTableScrollPane;
    private javax.swing.JPanel rolesInsidePanel;
    private javax.swing.JPanel rolesRelsPanel;
    private javax.swing.JButton saveButton;
    private javax.swing.JLabel scriptedPDMPathLabel;
    private javax.swing.JTextField scriptedPDMPathTF;
    private javax.swing.JLabel tierLabel;
    private javax.swing.JLabel typeLabel;
    // End of variables declaration//GEN-END:variables

    private PDMType currentPDM=null;
    private PDMType originalPDM=null;
    private PDMRoleForm roleForm=null;
    private JDialog roleDialog=null;
    private JDialog relDialog=null;
    private PDMRelationshipForm relForm=null;
    private JFrame parentFrame=null;

    private PDMRoleTableModel roleTableModel;
    private PDMRelationshipTableModel relationshipTableModel;
    private boolean updated = false;
    private static final int NEXT_PDM = 0;
    private static final int PREVIOUS_PDM = 1;
    private JDialog myDialog;
    private boolean isNewPDM = false;
    private boolean operationCanceled = false;

    public boolean isUpdated() {
        return updated;
    }

    public void setUpdated(boolean updated) {
        this.updated = updated;
    }

    public void setParentFrame(JFrame frame) {
        parentFrame = frame;
    }
    
    public JFrame getParentFrame() {
        return parentFrame;
    }

    private void initCategoryCB() {
        Object [] values = PDMValidator.getInstance().getPdmCategories().toArray();
        javax.swing.DefaultComboBoxModel model = new javax.swing.DefaultComboBoxModel(values);
        categoryCB.setModel(model);
    }

    private void initPDMTypeCB() {
        Object [] values = PDMValidator.getInstance().getPdmTypes().toArray();
        javax.swing.DefaultComboBoxModel model = new javax.swing.DefaultComboBoxModel(values);
        pdmTypeCB.setModel(model);
    }

    private void initPdmTierCB() {
        Object [] values = PDMValidator.getInstance().getPdmTiers().toArray();
        javax.swing.DefaultComboBoxModel model = new javax.swing.DefaultComboBoxModel(values);
        pdmTierCB.setModel(model);
    }

    public void setPDM(PDMType pdm, boolean isNewPDM) {

        originalPDM = pdm;
        currentPDM = DAOFactory.getPatternRepository().clonePatternModel(pdm);

        if (pdm == null) {
            throw new AcreRuntimeException("Cannot set null PDM into PDM Editor");
        }

        this.isNewPDM = isNewPDM;

//        logger.info("Setting PDM =" + PDMXMLUtil.toString(pdm));

        this.pdmNameTF.setText(currentPDM.getName());
        this.pdmDescriptionTF.setText(currentPDM.getDescription());
        this.pdmTierCB.setSelectedIndex(getItemIndex(currentPDM.getTier(), pdmTierCB.getModel()));
        this.categoryCB.setSelectedIndex(getItemIndex(currentPDM.getCategory(), categoryCB.getModel()));
        this.pdmTypeCB.setSelectedIndex(getItemIndex(currentPDM.getType(), pdmTypeCB.getModel()));
        this.pdmAttributesTF.setText(currentPDM.getAttributes());
        this.scriptedPDMPathTF.setText(currentPDM.getScriptedPDMPath());
        this.factModelTypeCB.setSelectedIndex(getItemIndex(currentPDM.getFactModelType(), factModelTypeCB.getModel()));        

        initRoleTable(currentPDM);
        
        initRelationshipTable(currentPDM);

        setUpdated(false);

    }

    private void initRoleTable(PDMType pdm) {
        roleTable.setPreferredScrollableViewportSize(new Dimension(300, 100));
        if (pdm==null) return;
        roleTableModel = new PDMRoleTableModel(pdm);
        roleTable.setModel(roleTableModel);
        AcreUIUtils.initColumnSizes(roleTable);
    }

    private void initRelationshipTable(PDMType pdm) {
        relationshipTable.setPreferredScrollableViewportSize(new Dimension(300, 100));
        if (pdm==null) return;
        relationshipTableModel = new PDMRelationshipTableModel(pdm);
        relationshipTable.setModel(relationshipTableModel);
    }

    public int getItemIndex(String item, ComboBoxModel model) {
        int numElements = model.getSize();
        for (int i = 0; i < numElements; i++) {
            if (model.getElementAt(i).equals(item))
                return i;
        }
        return -1;
    }

    public PDMType getPDM() {
        return currentPDM;
    }


    public static void main(String args[]) {
        PDMEditorForm form = new PDMEditorForm();

        PatternRepository facade = DAOFactory.getPatternRepository();
        PatternQueryRepository patternQueryRepository = DAOFactory.getPatternQueryRepository();

        PDMType pdm = facade.getGlobalPatternModel("BusinessDelegate");

        System.out.println("PDM=" + pdm.getName());

        form.setPDM(pdm, false);

        JFrame frame = new JFrame("PDMMainForm");
        form.setParentFrame(frame);        
        
        frame.getContentPane().add(form);
        frame.pack();
        frame.setVisible(true);
    }

    protected void showEditRelationship() {
            initRelationshipFormDialog();

            List rels = currentPDM.getRelationships().getRelationship();

            if ((rels == null) || (rels.size() == 0)) {
                showInfo("Edit PDM Relationship", "No relationships exist for this PDM to Edit");
                return;
            }

            int selectedRelNum = this.relationshipTable.getSelectedRow();

            if (selectedRelNum == -1) {
                showInfo("Edit PDM Relationship", "No relationship selected for this PDM to edit.");
                return;
            }

            RelationshipType selectedRel = (RelationshipType) rels.get(selectedRelNum);
            relForm.setRelationship(currentPDM, selectedRel, false);
            relForm.setDialog(relDialog);

            relForm.showMe();

            if (!relForm.isOperationCanceled()) {
                if (relForm.isUpdated()) {
                    setUpdated(true);
                }
            }

            this.initRelationshipTable(currentPDM);

//            System.out.println("Edit Relationship completed for role = " + selectedRel);
    }

    private void showInfo(String title, String msg) {

        JOptionPane.showMessageDialog(parentFrame, msg, title, JOptionPane.INFORMATION_MESSAGE);
    }


    protected void showEditRole() {

            initRoleFormDialog();


            List roles = currentPDM.getRoles().getRole();

            if ((roles == null) || (roles.size() == 0)) {
                showInfo("Edit PDM Role", "No roles exist for this PDM");
                return;
            }

            int selectedRoleNum = this.roleTable.getSelectedRow();

            if (selectedRoleNum == -1) {
                showInfo("Edit PDM Role", "No roles selected for this PDM to edit.");
                return;
            }

            RoleType selectedRole = (RoleType) roles.get(selectedRoleNum);
            roleForm.setRole(currentPDM, selectedRole, false);
            roleForm.setDialog(roleDialog);
            roleForm.showMe();

            if (!roleForm.isOperationCanceled()) {
                if (roleForm.isUpdated()) {
                    setUpdated(true);
                }
            }

            // refresh table
            this.initRoleTable(currentPDM);

//            System.out.println("Edit Role completed for role = " + selectedRole);
    }

    private void cancel() {

        if (isCancelOK()) {
            operationCanceled = true;
            setUpdated(false);
            hideMe();
        } else {
            return;
        }

    }

    protected void save() {
        // save the PDM
        if (pdmNameTF.getText() !=null)
            currentPDM.setName(pdmNameTF.getText());
        if (pdmAttributesTF.getText() != null)
            currentPDM.setAttributes(pdmAttributesTF.getText());
        if (categoryCB.getSelectedItem() != null)
            currentPDM.setCategory(categoryCB.getSelectedItem().toString());
        if (pdmDescriptionTF.getText() != null)
            currentPDM.setDescription(pdmDescriptionTF.getText());
        if (scriptedPDMPathTF.getText() != null)
            currentPDM.setScriptedPDMPath(scriptedPDMPathTF.getText());
        if (pdmTierCB.getSelectedItem() != null)
            currentPDM.setTier(pdmTierCB.getSelectedItem().toString());
        if (pdmTypeCB.getSelectedItem() != null)
            currentPDM.setType(pdmTypeCB.getSelectedItem().toString());
        if (factModelTypeCB.getSelectedItem() != null)
            currentPDM.setFactModelType(factModelTypeCB.getSelectedItem().toString());
        PatternRepository patternRepository = DAOFactory.getPatternRepository();

        try {

            AcreErrors errors;
            errors = PDMValidator.getInstance().validatePDM(currentPDM);
            if (! errors.isEmpty()) {
                Main.showMainError(errors.toString(), "Save PDM - Validation Errors");
                return;
            }

            if (isNewPDM) {
                patternRepository.insertGlobalPatternModel(currentPDM);
            } else {
                patternRepository.updatePatternModel(originalPDM, currentPDM);
            }

            patternRepository.save();
            isNewPDM = false;
//            setUpdated(false);
            hideMe();
            operationCanceled = false;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this.parentFrame,  e.getMessage(), "Save PDM Error",
                    JOptionPane.ERROR_MESSAGE);
        }

    }

    private void initRoleTableScrollPane() {
        
    }
    
    private void initRelationshipScrollPane() {
        // todo
    }

    private void showNextPDM() {
        // todo
    }

    private void showPreviousPDM() {
       // todo
    }

    private void initFactModelTypeCB() {
        Object [] values = PDMValidator.getInstance().getPdmFactModelTypes().toArray();
        javax.swing.DefaultComboBoxModel model = new javax.swing.DefaultComboBoxModel(values);
        factModelTypeCB.setModel(model);
    }

    private void preinitPrevNextButtonPanel() {

    }

    private void postinitPrevNextButtonPanel() {

    }

    private boolean checkActionAllowed(String actionTitle) {

        boolean actionOK=false;

        if (this.isUpdated()) {
            Object options[] = {"Yes", "No"};
            int n = JOptionPane.showOptionDialog(parentFrame,
                    "PDM is modified, but not saved.\nDo you want to save this PDM before proceeding?",
                    actionTitle,
                    JOptionPane.YES_NO_CANCEL_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    options,
                    options[0]);
            switch (n) {
                case JOptionPane.YES_OPTION:
                    save();
                    actionOK = true;
                    break;
                case JOptionPane.NO_OPTION:
                    actionOK = true;
                    break;
                case JOptionPane.CANCEL_OPTION:
                    actionOK = false;
                    break;
                default:
                    break;
            }
        }

        return actionOK;
    }

    public void setDialog(JDialog pdmEditorDialog) {
        myDialog = pdmEditorDialog;
        myDialog.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
    }

    public JDialog getDialog() {
        return myDialog;
    }

    public void showMe() {
        if (myDialog != null)
            myDialog.setVisible(true);
    }

    public void hideMe() {
        if (myDialog != null)
            myDialog.setVisible(false);
    }

    public void clear() {
        pdmNameTF.setText("");
        pdmDescriptionTF.setText("");
        pdmAttributesTF.setText("");
        pdmTierCB.setSelectedIndex(-1);
        pdmTypeCB.setSelectedIndex(-1);
        scriptedPDMPathTF.setText("");
        factModelTypeCB.setSelectedIndex(-1);
        categoryCB.setSelectedIndex(-1);
        if (roleForm != null)
            roleForm.clear();
        if (relForm != null)
            relForm.clear();
    }

    public boolean isOperationCanceled() {
        return operationCanceled;
    }

    protected void addRole() {
        setUpdated(true);

        initRoleFormDialog();

        roleForm.clear();

        RoleType newRole = DAOFactory.getPatternRepository().createNewRole();
        int nextRoleNum = roleTable.getRowCount();
        if (currentPDM.getRoles()  != null) {
            nextRoleNum = currentPDM.getRoles().getRole().size();
        }

        newRole.setSequence(new java.math.BigInteger(Integer.toString(nextRoleNum)));

        roleForm.setRole(currentPDM, newRole, true);

        roleForm.showMe();

        if (roleForm.operationCanceled())
            return;

        // refresh table
        initRoleTable(currentPDM);

        // select new role in table
        selectInRoleTable(newRole);
    }

    protected void selectInRelationshipTable(RelationshipType newRel) {
        int row = relationshipTableModel.getRowNumberFor(newRel);

        relationshipTable.changeSelection(row,
                this.relationshipTableModel.getColumnCount(), false, false);

    }


    protected void selectInRoleTable(RoleType newRole) {
        int row = roleTableModel.getRowNumberFor(newRole);

        roleTable.changeSelection(row, this.roleTableModel.getColumnCount(), false, false);

    }


    private void initRelationshipFormDialog() {
        if (relForm == null) {
            relForm = new PDMRelationshipForm();
            relForm.setPDM(currentPDM);
//            relForm.setPDMNames(PatternRepository.getInstance().getGlobalPatternModelNames());
        }

        if (relDialog == null) {
            if (getParentFrame() != null)
                relDialog = new JDialog(getParentFrame(), true);
            else
                relDialog = new JDialog();

            relDialog.setContentPane(relForm);
            relDialog.setTitle("PDM Relationship");
            relDialog.setVisible(false);
            relForm.setDialog(relDialog);
            relDialog.pack();

            if (getParentFrame() != null)
                relDialog.setLocationRelativeTo(getParentFrame());

//            System.out.println("Created Relationship Dialog");
        }
    }

    private void initRoleFormDialog() {
        if (roleForm == null) {
            roleForm = new PDMRoleForm();
            //roleForm.setQueryNames(PatternQueryRepository.getInstance().getGlobalQueryNamesList());
        }

        if (roleDialog == null) {
            if (getParentFrame() != null)
                roleDialog = new JDialog(getParentFrame(), true);
            else
                roleDialog = new JDialog();

            roleDialog.setContentPane(roleForm);
            roleForm.setDialog(roleDialog);
            roleForm.setParentFrame(getParentFrame());
            roleDialog.setTitle("PDM Role");
            roleDialog.setVisible(false);

            roleDialog.pack();

            if (getParentFrame() != null)
                roleDialog.setLocationRelativeTo(getParentFrame());

//            System.out.println("Created Role Dialog");
        }
    }

    protected void addRelationship() {
        setUpdated(true);

        initRelationshipFormDialog();

        relForm.clear();

        RelationshipType newRel = DAOFactory.getPatternRepository().createNewRelationship();

        relForm.setRelationship(currentPDM, newRel, true);

        relForm.showMe();

        if (relForm.isOperationCanceled())
            return;

        // refresh table
        initRelationshipTable(currentPDM);

        // select new role in table
        selectInRelationshipTable(newRel);
    }



    protected void deleteRelationship() {
        setUpdated(true);
        int selectedRow = relationshipTable.getSelectedRow();
        if (selectedRow == -1) {
            Main.showMainError("No Relationship selected to delete", "Delete Relationship");
            return;
        }

        try {
            String selectedRelationship = relationshipTableModel.getSelectedRelationshipName(
                                            relationshipTable.getSelectedRow());

            PDMValidator.deleteRelationshipFromPDM(currentPDM, selectedRelationship);

            relationshipTableModel.removeRow(selectedRow);
            relationshipTable.changeSelection(relationshipTable.getRowCount()-1,
                    relationshipTableModel.getColumnCount(), false, false);
        } catch (Throwable e) {
            Main.showMainError("Failed to delete Relationship:\n" +
                    e.getMessage(),
                    "Delete Relationship");
        }
    }

    protected void deleteRole() {
        setUpdated(true);
        int selectedRow = roleTable.getSelectedRow();
        if (selectedRow == -1) {
            Main.showMainError("No Role selected to delete", "Delete Role");
            return;
        }

        try {
            String selectedRoleName = roleTableModel.getSelectedRoleName(
                                            roleTable.getSelectedRow()
                                            );
            if (selectedRoleName != null)
                PDMValidator.deleteRoleFromPDM(currentPDM, selectedRoleName);

            roleTableModel.removeRow(selectedRow);
            roleTable.changeSelection(roleTable.getRowCount()-1,
                    roleTableModel.getColumnCount(), false, false);
        } catch (Throwable t) {
            Main.showMainError("Failed to delete Role: \n" + t.getMessage(),
                    "Delete Role");
        }
    }

    private boolean isCancelOK() {
        if (isUpdated()) {
            boolean confirm = Main.showMainConfirm(this,
                "This PDM has been modified.\n" +
                    "Discard changes and cancel edit?",
                "PDM Editor");
            return confirm;
        }
        return true;
    }


    public PDMRoleForm getRoleForm() {
        return roleForm;
    }

    public void setRoleForm(PDMRoleForm roleForm) {
        this.roleForm = roleForm;
    }

    public JDialog getRoleDialog() {
        return roleDialog;
    }

    public void setRoleDialog(JDialog roleDialog) {
        this.roleDialog = roleDialog;
    }

    public JDialog getRelDialog() {
        return relDialog;
    }

    public void setRelDialog(JDialog relDialog) {
        this.relDialog = relDialog;
    }

    public PDMRelationshipForm getRelForm() {
        return relForm;
    }

    public void setRelForm(PDMRelationshipForm relForm) {
        this.relForm = relForm;
    }


}
