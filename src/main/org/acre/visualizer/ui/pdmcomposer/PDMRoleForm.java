/**
 *   Copyright 2004-2005 Sun Microsystems, Inc.
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */

package org.acre.visualizer.ui.pdmcomposer;

import org.acre.pdm.ArgumentType;
import org.acre.pdm.PDMType;
import org.acre.pdm.RoleType;
import org.acre.pdmqueries.QueryType;
import org.acre.pdmqueries.ReturnVariableType;
import org.acre.common.AcreErrors;
import org.acre.common.AcreStringUtil;
import org.acre.dao.DAOFactory;
import org.acre.dao.PDMValidator;
import org.acre.dao.PDMXMLConstants;
import org.acre.dao.PatternQueryRepository;
import org.acre.lang.pql.pdbc.PQLException;
import org.acre.lang.pql.pdbc.PQLPreparedStatementImpl;
import org.acre.visualizer.ui.Main;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JDialog;
import javax.swing.JFrame;
import java.awt.CardLayout;
import java.util.List;

/**
 *
 * @author  Administrator
 */
public class PDMRoleForm extends javax.swing.JPanel {

    /** Creates new form TestSampleForm */
    public PDMRoleForm() {
        patternQueryRepository = DAOFactory.getPatternQueryRepository();
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        nameLabel = new javax.swing.JLabel();
        nameTF = new javax.swing.JTextField();
        typeLabel = new javax.swing.JLabel();
        roleTypeCB = new javax.swing.JComboBox();
        sequenceLabel = new javax.swing.JLabel();
        sequenceTF = new javax.swing.JTextField();
        argumentsPanel = new javax.swing.JPanel();
        argumentsScrollPane = new javax.swing.JScrollPane();
        argumentsTable = new javax.swing.JTable();
        argumentsButtonPanel = new javax.swing.JPanel();
        addArgButton = new javax.swing.JButton();
        deleteArgButton = new javax.swing.JButton();
        moveArgUpButton = new javax.swing.JButton();
        moveArgDownButton = new javax.swing.JButton();
        buttonPanel = new javax.swing.JPanel();
        saveRoleButton = new javax.swing.JButton();
        cancelRoleEditButton = new javax.swing.JButton();
        queryTypeFieldsPanel = new javax.swing.JPanel();
        typeIsQueryPanel = new javax.swing.JPanel();
        queryNameLabel = new javax.swing.JLabel();
        queryNameCB = new javax.swing.JComboBox();
        returnVariableNameLabel = new javax.swing.JLabel();
        returnVariableCB = new javax.swing.JComboBox();
        returnVariableTFLabel = new javax.swing.JLabel();
        returnVariableTF = new javax.swing.JTextField();
        typeIsPDMPanel = new javax.swing.JPanel();
        typeReferenceNameLabel = new javax.swing.JLabel();
        pdmTypeReferenceCB = new javax.swing.JComboBox();
        chooseRoleLabel = new javax.swing.JLabel();
        pdmRoleTypeReferenceCB = new javax.swing.JComboBox();
        typeRefLabel = new javax.swing.JLabel();
        typeReferenceNameTF = new javax.swing.JTextField();
        editPDMButton = new javax.swing.JButton();
        createPDMButton = new javax.swing.JButton();
        clearChoosePDMButton = new javax.swing.JButton();
        typeIsAbstractPanel = new javax.swing.JPanel();
        absMsgLabel = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        setMinimumSize(new java.awt.Dimension(800, 300));
        setPreferredSize(new java.awt.Dimension(800, 350));
        nameLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        nameLabel.setText("Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 3, 0);
        add(nameLabel, gridBagConstraints);

        nameTF.setColumns(20);
        nameTF.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        nameTF.setToolTipText("Unique name for the PDM within the Repository");
        nameTF.setNextFocusableComponent(roleTypeCB);
        nameTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameTFActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 3, 0);
        add(nameTF, gridBagConstraints);

        typeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        typeLabel.setText("Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 3, 0);
        add(typeLabel, gridBagConstraints);

        initRoleTypeCB();
        roleTypeCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PDM", "Query", "Abstract" }));
        roleTypeCB.setToolTipText("Type of Role");
        roleTypeCB.setNextFocusableComponent(typeReferenceNameTF);
        roleTypeCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roleTypeCBActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 3, 0);
        add(roleTypeCB, gridBagConstraints);

        sequenceLabel.setText("Sequence");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 3, 0);
        add(sequenceLabel, gridBagConstraints);

        sequenceTF.setColumns(3);
        sequenceTF.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 3, 0);
        add(sequenceTF, gridBagConstraints);

        argumentsPanel.setLayout(new java.awt.BorderLayout());

        argumentsPanel.setBorder(new javax.swing.border.TitledBorder("Role Arguments"));
        argumentsPanel.setFocusable(false);
        argumentsPanel.setMinimumSize(new java.awt.Dimension(300, 200));
        argumentsPanel.setOpaque(false);
        argumentsPanel.setPreferredSize(new java.awt.Dimension(300, 200));
        argumentsScrollPane.setBorder(new javax.swing.border.EtchedBorder());
        argumentsScrollPane.setToolTipText("Optional Arguments for the Role");
        argumentsScrollPane.setFocusable(false);
        argumentsScrollPane.setPreferredSize(new java.awt.Dimension(200, 150));
        loadArgumentsTable(null);
        argumentsTable.setAutoCreateColumnsFromModel(false);
        argumentsTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        argumentsScrollPane.setViewportView(argumentsTable);

        argumentsPanel.add(argumentsScrollPane, java.awt.BorderLayout.CENTER);

        argumentsButtonPanel.setPreferredSize(new java.awt.Dimension(200, 35));
        addArgButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/acre/visualizer/ui/icons/buttons/AddButton.gif")));
        addArgButton.setMnemonic('A');
        addArgButton.setToolTipText("Add a new Argument to this Role");
        addArgButton.setBorderPainted(false);
        addArgButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        addArgButton.setNextFocusableComponent(saveRoleButton);
        addArgButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addArgButtonActionPerformed(evt);
            }
        });

        argumentsButtonPanel.add(addArgButton);

        deleteArgButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/acre/visualizer/ui/icons/buttons/DeleteButton.gif")));
        deleteArgButton.setMnemonic('D');
        deleteArgButton.setToolTipText("Delete selected Argument from this role");
        deleteArgButton.setBorderPainted(false);
        deleteArgButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        deleteArgButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteArgButtonActionPerformed(evt);
            }
        });

        argumentsButtonPanel.add(deleteArgButton);

        moveArgUpButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/acre/visualizer/ui/icons/buttons/MoveUp.gif")));
        moveArgUpButton.setToolTipText("Move Argument up the list");
        moveArgUpButton.setBorderPainted(false);
        moveArgUpButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        moveArgUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveArgUpButtonActionPerformed(evt);
            }
        });

        argumentsButtonPanel.add(moveArgUpButton);

        moveArgDownButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/acre/visualizer/ui/icons/buttons/MoveDown.gif")));
        moveArgDownButton.setToolTipText("Move Argument down the list");
        moveArgDownButton.setBorderPainted(false);
        moveArgDownButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        moveArgDownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveArgDownButtonActionPerformed(evt);
            }
        });

        argumentsButtonPanel.add(moveArgDownButton);

        argumentsPanel.add(argumentsButtonPanel, java.awt.BorderLayout.SOUTH);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 4.0;
        gridBagConstraints.weighty = 8.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 0);
        add(argumentsPanel, gridBagConstraints);

        buttonPanel.setPreferredSize(new java.awt.Dimension(500, 35));
        saveRoleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/acre/visualizer/ui/icons/buttons/SaveButton.gif")));
        saveRoleButton.setMnemonic('S');
        saveRoleButton.setToolTipText("Save this Role");
        saveRoleButton.setBorderPainted(false);
        saveRoleButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        saveRoleButton.setNextFocusableComponent(cancelRoleEditButton);
        saveRoleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveRoleButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(saveRoleButton);

        cancelRoleEditButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/acre/visualizer/ui/icons/buttons/CancelButton.gif")));
        cancelRoleEditButton.setMnemonic('C');
        cancelRoleEditButton.setToolTipText("Cancel this window");
        cancelRoleEditButton.setBorderPainted(false);
        cancelRoleEditButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        cancelRoleEditButton.setNextFocusableComponent(nameTF);
        cancelRoleEditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelRoleEditButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(cancelRoleEditButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        add(buttonPanel, gridBagConstraints);

        queryTypeFieldsPanel.setLayout(new java.awt.CardLayout());

        queryTypeFieldsPanel.setBorder(new javax.swing.border.TitledBorder("Role Type Mapping"));
        typeIsQueryPanel.setLayout(new java.awt.GridBagLayout());

        queryNameLabel.setText("Query Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 3, 0);
        typeIsQueryPanel.add(queryNameLabel, gridBagConstraints);

        initQueryNameCB();
        queryNameCB.setToolTipText("If Role Type is Query, associate with a Query Name");
        queryNameCB.setAutoscrolls(true);
        queryNameCB.setNextFocusableComponent(returnVariableCB);
        queryNameCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queryNameCBActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 3, 0);
        typeIsQueryPanel.add(queryNameCB, gridBagConstraints);

        returnVariableNameLabel.setText("Query Return Variables");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 3, 0);
        typeIsQueryPanel.add(returnVariableNameLabel, gridBagConstraints);

        initReturnVariableCB();
        returnVariableCB.setToolTipText("If Role Type is Query, choose Return Variable Name or Enter New Variable in Field");
        returnVariableCB.setNextFocusableComponent(returnVariableTF);
        returnVariableCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnVariableCBActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 3, 0);
        typeIsQueryPanel.add(returnVariableCB, gridBagConstraints);

        returnVariableTFLabel.setText("Return Variable Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 3);
        typeIsQueryPanel.add(returnVariableTFLabel, gridBagConstraints);

        returnVariableTF.setColumns(15);
        returnVariableTF.setToolTipText("If Role Type is Query, choose Return Variable Name or Enter New Variable in Field");
        returnVariableTF.setNextFocusableComponent(saveRoleButton);
        returnVariableTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnVariableTFActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 3, 0);
        typeIsQueryPanel.add(returnVariableTF, gridBagConstraints);

        queryTypeFieldsPanel.add(typeIsQueryPanel, "Query");

        typeIsPDMPanel.setLayout(new java.awt.GridBagLayout());

        typeReferenceNameLabel.setText("Choose PDM");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 3, 0);
        typeIsPDMPanel.add(typeReferenceNameLabel, gridBagConstraints);

        initChoosePDMCB();
        pdmTypeReferenceCB.setNextFocusableComponent(pdmRoleTypeReferenceCB);
        pdmTypeReferenceCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pdmTypeReferenceCBActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        typeIsPDMPanel.add(pdmTypeReferenceCB, gridBagConstraints);

        chooseRoleLabel.setText("Choose PDM Role");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 0);
        typeIsPDMPanel.add(chooseRoleLabel, gridBagConstraints);

        initChoosePDMRoleCB();
        pdmRoleTypeReferenceCB.setNextFocusableComponent(typeReferenceNameTF);
        pdmRoleTypeReferenceCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pdmRoleTypeReferenceCBActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
        typeIsPDMPanel.add(pdmRoleTypeReferenceCB, gridBagConstraints);

        typeRefLabel.setText("Type Reference:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 0);
        typeIsPDMPanel.add(typeRefLabel, gridBagConstraints);

        typeReferenceNameTF.setColumns(20);
        typeReferenceNameTF.setToolTipText("If Type is PDM, enter valid PDM or PDM.Role or PDM.Relationship.Role value");
        typeReferenceNameTF.setNextFocusableComponent(saveRoleButton);
        typeReferenceNameTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeReferenceNameTFActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 3, 0);
        typeIsPDMPanel.add(typeReferenceNameTF, gridBagConstraints);

        editPDMButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/acre/visualizer/ui/icons/buttons/EditButton.gif")));
        editPDMButton.setMnemonic('E');
        editPDMButton.setToolTipText("Edit Selected PDM");
        editPDMButton.setBorderPainted(false);
        editPDMButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        editPDMButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editPDMButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        typeIsPDMPanel.add(editPDMButton, gridBagConstraints);

        createPDMButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/acre/visualizer/ui/icons/buttons/NewButton.gif")));
        createPDMButton.setMnemonic('N');
        createPDMButton.setToolTipText("Create a New PDM");
        createPDMButton.setBorderPainted(false);
        createPDMButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        createPDMButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createPDMButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        typeIsPDMPanel.add(createPDMButton, gridBagConstraints);

        clearChoosePDMButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/acre/visualizer/ui/icons/buttons/ClearButton.gif")));
        clearChoosePDMButton.setMnemonic('l');
        clearChoosePDMButton.setToolTipText("Clear PDM Selection");
        clearChoosePDMButton.setBorderPainted(false);
        clearChoosePDMButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        clearChoosePDMButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearChoosePDMButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        typeIsPDMPanel.add(clearChoosePDMButton, gridBagConstraints);

        queryTypeFieldsPanel.add(typeIsPDMPanel, "PDM");

        absMsgLabel.setText("No Mappings for Abstract Role Type");
        typeIsAbstractPanel.add(absMsgLabel);

        queryTypeFieldsPanel.add(typeIsAbstractPanel, "Abstract");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.gridheight = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(queryTypeFieldsPanel, gridBagConstraints);

    }//GEN-END:initComponents

    private void clearChoosePDMButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearChoosePDMButtonActionPerformed
        clearChoosePDM();
    }//GEN-LAST:event_clearChoosePDMButtonActionPerformed

    private void createPDMButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createPDMButtonActionPerformed
        createPDMAction();
    }//GEN-LAST:event_createPDMButtonActionPerformed

    private void editPDMButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editPDMButtonActionPerformed
        editPDMAction();
    }//GEN-LAST:event_editPDMButtonActionPerformed

    private void pdmRoleTypeReferenceCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pdmRoleTypeReferenceCBActionPerformed
        pdmRoleSelected();
    }//GEN-LAST:event_pdmRoleTypeReferenceCBActionPerformed

    private void pdmTypeReferenceCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pdmTypeReferenceCBActionPerformed
        pdmSelected();
    }//GEN-LAST:event_pdmTypeReferenceCBActionPerformed

    private void returnVariableCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnVariableCBActionPerformed
        setReturnVariable();
    }//GEN-LAST:event_returnVariableCBActionPerformed

    private void returnVariableTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnVariableTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_returnVariableTFActionPerformed

    private void cancelRoleEditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelRoleEditButtonActionPerformed
        cancel();

    }//GEN-LAST:event_cancelRoleEditButtonActionPerformed

    private void saveRoleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveRoleButtonActionPerformed
        save();
    }//GEN-LAST:event_saveRoleButtonActionPerformed

    private void moveArgDownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveArgDownButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_moveArgDownButtonActionPerformed

    private void moveArgUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveArgUpButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_moveArgUpButtonActionPerformed

    private void deleteArgButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteArgButtonActionPerformed
        deleteRoleArgument();
        
    }//GEN-LAST:event_deleteArgButtonActionPerformed

    private void addArgButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addArgButtonActionPerformed
        addRoleArgument();
    }//GEN-LAST:event_addArgButtonActionPerformed

    private void queryNameCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queryNameCBActionPerformed
        initReturnVariableCB();
    }//GEN-LAST:event_queryNameCBActionPerformed

    private void typeReferenceNameTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeReferenceNameTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_typeReferenceNameTFActionPerformed

    private void roleTypeCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roleTypeCBActionPerformed
        showRoleTypeFields();
    }//GEN-LAST:event_roleTypeCBActionPerformed

    private void nameTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameTFActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel absMsgLabel;
    private javax.swing.JButton addArgButton;
    private javax.swing.JPanel argumentsButtonPanel;
    private javax.swing.JPanel argumentsPanel;
    private javax.swing.JScrollPane argumentsScrollPane;
    private javax.swing.JTable argumentsTable;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelRoleEditButton;
    private javax.swing.JLabel chooseRoleLabel;
    private javax.swing.JButton clearChoosePDMButton;
    private javax.swing.JButton createPDMButton;
    private javax.swing.JButton deleteArgButton;
    private javax.swing.JButton editPDMButton;
    private javax.swing.JButton moveArgDownButton;
    private javax.swing.JButton moveArgUpButton;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameTF;
    private javax.swing.JComboBox pdmRoleTypeReferenceCB;
    private javax.swing.JComboBox pdmTypeReferenceCB;
    private javax.swing.JComboBox queryNameCB;
    private javax.swing.JLabel queryNameLabel;
    private javax.swing.JPanel queryTypeFieldsPanel;
    private javax.swing.JComboBox returnVariableCB;
    private javax.swing.JLabel returnVariableNameLabel;
    private javax.swing.JTextField returnVariableTF;
    private javax.swing.JLabel returnVariableTFLabel;
    private javax.swing.JComboBox roleTypeCB;
    private javax.swing.JButton saveRoleButton;
    private javax.swing.JLabel sequenceLabel;
    private javax.swing.JTextField sequenceTF;
    private javax.swing.JPanel typeIsAbstractPanel;
    private javax.swing.JPanel typeIsPDMPanel;
    private javax.swing.JPanel typeIsQueryPanel;
    private javax.swing.JLabel typeLabel;
    private javax.swing.JLabel typeRefLabel;
    private javax.swing.JLabel typeReferenceNameLabel;
    private javax.swing.JTextField typeReferenceNameTF;
    // End of variables declaration//GEN-END:variables

    private PDMType currentPDM;
    private boolean updated=false;
    private boolean operationCanceled=false;
    private JDialog myDialog;
    private RoleType role;
    private boolean isNew = false;
    private PDMRoleArgumentForm roleArgumentForm;
    private PDMRoleArgumentTableModel argumentTableModel;
    private JDialog roleArgumentDialog;
    private JFrame parentFrame;

    private PatternQueryRepository patternQueryRepository;

//    public void setQueryNames(List queryNames) {
//        if (queryNames == null)
//            return;
//
//        this.queryNames = queryNames.toArray();
//        initQueryNameCB();
//    }

    public void setDialog(JDialog dialog) {
        myDialog = dialog;
        myDialog.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
    }
    
    public JDialog getDialog() {
        return myDialog;
    }
    
    public void showMe() {
        if (myDialog != null)
            myDialog.setVisible(true);
    }
    
    public void hideMe() {
        if (myDialog != null)
            myDialog.setVisible(false);
    }
    
    private void initRoleTypeCB() {
        Object [] values = PDMValidator.getInstance().getPdmRoleTypes().toArray();
        javax.swing.DefaultComboBoxModel model = new javax.swing.DefaultComboBoxModel(values);
        roleTypeCB.setModel(model);
    }

    public void initQueryNameCB() {
        Object [] queryNames ;

        queryNames = patternQueryRepository.getGlobalQueryNamesList().toArray();
        
        if (queryNames != null) {
            javax.swing.DefaultComboBoxModel model = new javax.swing.DefaultComboBoxModel(queryNames);
            queryNameCB.setModel(model);
            queryNameCB.setSelectedIndex(-1);
        }
    }

    public void setRole(PDMType currentPDM, RoleType role, boolean isNew) {

        this.role = role;
        this.currentPDM = currentPDM;
        this.isNew = isNew;

        initRoleTypeCB();

        this.nameTF.setText(role.getName());
        this.sequenceTF.setText(role.getSequence().toString());
        this.roleTypeCB.setSelectedItem(role.getType());

        // setRole Type Refernence fields
        setRoleTypeReferenceFields(role);

        // add arguments to the table
        loadArgumentsTable(role);
    }

    private void setRoleTypeReferenceFields(RoleType role) {

        initChoosePDMCB();
        initChoosePDMRoleCB();
        initQueryNameCB();

        if (PDMXMLConstants.ROLE_TYPE_PDM.equals(role.getType())) {
                if (role.getTypeReferenceName() != null ) {
                    String pdmName = AcreStringUtil.getRoleNameBeginning(role.getTypeReferenceName());
                    String roleName = AcreStringUtil.getRoleNameEnding(role.getTypeReferenceName());
                    pdmTypeReferenceCB.setSelectedItem(pdmName);
                    pdmRoleTypeReferenceCB.setSelectedItem(roleName);
                    typeReferenceNameTF.setText(role.getTypeReferenceName());
                } else {
                    String pdmName = AcreStringUtil.getRoleNameBeginning(role.getName());
                    pdmTypeReferenceCB.setSelectedItem(pdmName);
                    pdmRoleTypeReferenceCB.setSelectedIndex(-1);
                }
        }
        if (PDMXMLConstants.ROLE_TYPE_QUERY.equals(role.getType())) {
                String queryName = role.getQueryName();
                queryNameCB.setSelectedItem(queryName);
                if (role.getReturnVariableName() != null) {
                    returnVariableCB.setSelectedItem(role.getReturnVariableName());
                    initReturnVariableCB();
                    returnVariableTF.setText(role.getReturnVariableName());                    
                }
        }

        showRoleTypeFields();

    }

    private void loadArgumentsTable(RoleType currentRole) {
        argumentTableModel = new PDMRoleArgumentTableModel(currentRole);
        this.argumentsTable.setModel(argumentTableModel);
    }

    public boolean isUpdated() {
        return updated;
    }

    public void setUpdated(boolean flag) {
        this.updated = flag;
    }
    
    public void postInitArgPanel() {
        
    }

    private void initReturnVariableCB() {

        String queryName = getQueryName();

        if (queryName == null)
            return;

        QueryType q = patternQueryRepository.getGlobalQuery(queryName);
        if (q == null) {
//            showMainError("Role has query set to '" + queryName
//            + "', but that query is not defined in repository",
//                    "Edit PDM Role");
            return;
        }

        List vars = q.getReturnVariable();
        DefaultComboBoxModel model = (DefaultComboBoxModel) returnVariableCB.getModel();
        model.removeAllElements();

        if ((vars== null) || (vars.size() ==0)) {
            // no return variables are defined in the XML file, derive it from the PQL script
            String query = patternQueryRepository.getGlobalQueryFile(q.getName());
            try {
                PQLPreparedStatementImpl s = new PQLPreparedStatementImpl(null, query);
                String [] retVars = s.getReturnVariableNames();
                for (int i=0; i < retVars.length; i++) {
                    model.addElement(retVars[i]);
                }
            } catch (PQLException e) {
                Main.showMainError(
                        "Failed to retrieve return variables: " +
                        e.getPQLErrorMessages()
                        , "Query Return Variable Error");
            }
//            String retVar = AcreStringUtil.getReturnVariable(query);
//            model.addElement(retVar);
//            returnVariableCB.setSelectedItem(retVar);

        }  else {
            for (int i=0; i < vars.size(); i++) {
                ReturnVariableType varType = (ReturnVariableType) vars.get(i);
                model.addElement(varType.getName());
            }
        }

        if (getReturnVariableName() != null) {
            returnVariableCB.setSelectedItem(getReturnVariableName());
        }
        returnVariableCB.revalidate();
    }



    private void setReturnVariable() {
        if (returnVariableCB.getSelectedItem() != null) {
            returnVariableTF.setText(returnVariableCB.getSelectedItem().toString());
        }
    }

    public void clear() {
        setSequence("");
        clearType();
        setTypeReferenceName("");
        clearReturnVariable();
        setReturnVariableName("");
    }

    public String getSequence() {
        return sequenceTF.getText();
    }

    private void setSequence(String seq) {
        this.sequenceTF.setText(seq);
    }

    public boolean operationCanceled() {
        return operationCanceled;
    }

    public String getType() {
        if (roleTypeCB.getSelectedItem() != null)
            return roleTypeCB.getSelectedItem().toString();
        else return "";
    }

    public void clearType() {
        this.roleTypeCB.setSelectedIndex(-1);
    }

    private void setType(String type) {
        this.roleTypeCB.setSelectedItem(type);
    }

    public String getTypeReferenceName() {
        return typeReferenceNameTF.getText();
    }

    private void setTypeReferenceName(String refName) {
        typeReferenceNameTF.setText(refName);
    }

    public String getRoleName() {
        return nameTF.getText();
    }
    
    public String getQueryName() {
        if (queryNameCB.getSelectedItem() != null)
            return queryNameCB.getSelectedItem().toString();
        else return "";
    }

    private void setQueryName(String queryName) {
        nameTF.setText(queryName);
    }

    public String getReturnVariableName() {
        // TF overrides CB
        if (! AcreStringUtil.isEmpty(returnVariableTF.getText())) {
            return returnVariableTF.getText();
        } else  if (returnVariableCB.getSelectedItem() != null) {
            return returnVariableCB.getSelectedItem().toString();
        }
        return returnVariableTF.getText();
    }

    private void setReturnVariableName(String variableName) {
        returnVariableTF.setText(variableName);
    }

    public void clearReturnVariable() {
        returnVariableCB.setSelectedIndex(-1);
    }

    private void cancel() {
        operationCanceled = true;
        hideMe();
    }

    public void save() {
        role.setName(getRoleName());
        role.setQueryName(getQueryName());
        role.setSequence(new java.math.BigInteger(getSequence()));
        role.setType(getType());
        role.setTypeReferenceName(getTypeReferenceName());
        role.setReturnVariableName(getReturnVariableName());

        try {
            AcreErrors errors = PDMValidator.getInstance().validateRole(currentPDM, role, isNew);
            if (!errors.isEmpty()) {
                Main.showMainError(errors.toString(), "Role Validation Error");
                return;
            }

            if (isNew) {
                if (currentPDM.getRoles() == null)
                    currentPDM.setRoles(DAOFactory.getPatternRepository().createRoles());

                currentPDM.getRoles().getRole().add(role);
            }

        } catch (Throwable t) {
            Main.showMainError(t.getMessage(), "Role Validation Error");
            return;
        }

        setUpdated(true);
        this.operationCanceled = false;
        this.hideMe();
    }

    public boolean isOperationCanceled() {
        return operationCanceled;
    }

    public static void main(String args[]) {
        PDMRoleForm form = new PDMRoleForm();
        JFrame frame;
        frame = new JFrame("PDM Role");
        frame.getContentPane().add(form);
        frame.pack();
        frame.setVisible(true);
    }

    private void initRoleArgumentForm() {
        if (roleArgumentForm == null) {
            roleArgumentForm = new PDMRoleArgumentForm();

            if (getParentFrame() != null) {
                roleArgumentDialog = new JDialog(getParentFrame(), true);
            } else {
                roleArgumentDialog = new JDialog();
            }
            roleArgumentDialog.setTitle("PDM Role Argument");
            roleArgumentDialog.setContentPane(roleArgumentForm);
            roleArgumentForm.setDialog(roleArgumentDialog);
            roleArgumentDialog.pack();
            if (getParentFrame() != null) {
                roleArgumentDialog.setLocationRelativeTo(getParentFrame());
            }
        }
    }

    public JFrame getParentFrame() {
        return parentFrame;
    }

    public void setParentFrame(JFrame frame) {
        parentFrame = frame;
    }

    private void addRoleArgument() {

        initRoleArgumentForm();

        roleArgumentForm.clear();
        roleArgumentForm.setSequence(Integer.toString(argumentsTable.getRowCount()));
        roleArgumentForm.showMe();

        if (roleArgumentForm.isOperationCanceled()) {
            return;
        }

        ArgumentType newarg = DAOFactory.getPatternRepository().createRoleArgument(
            roleArgumentForm.getSequence(),
                roleArgumentForm.getArgumentName(),
                roleArgumentForm.getType(),
                roleArgumentForm.getArgumentValue());
        role.getArgument().add(newarg);

        loadArgumentsTable(role);
    }

    private void deleteRoleArgument() {
        int selectedRow = argumentsTable.getSelectedRow();
        if (selectedRow == -1) {
            Main.showMainError("Role Argument not selected to delete.\nPlease select and retry.",
                    "Delete PDM Role Argument");
        }
        String selectedArgumentName = this.argumentTableModel.getSelectedArgumentName(selectedRow);

        PDMValidator.deleteArgumentFromRole(role, selectedArgumentName);

        argumentTableModel.removeRow(selectedRow);
            argumentsTable.changeSelection(argumentsTable.getRowCount()-1,
                    argumentsTable.getColumnCount(), false, false);

    }


    private PDMEditorForm getPDMEditor() {

        JDialog pdmEditorDialog;
        if (getParentFrame() != null)
            pdmEditorDialog = new JDialog(getParentFrame(), true);
        else
            pdmEditorDialog = new JDialog();

        pdmEditorDialog.setModal(true);

        PDMEditorForm pdmEditorForm = new PDMEditorForm();
        pdmEditorForm.setParentFrame(getParentFrame());

        pdmEditorDialog.setContentPane(pdmEditorForm);
        pdmEditorDialog.pack();
        pdmEditorDialog.setLocationRelativeTo(getParentFrame());
        pdmEditorForm.setDialog(pdmEditorDialog);
        return pdmEditorForm;
    }

    private void createPDMAction() {
        PDMType pdm = DAOFactory.getPatternRepository().createNewPatternModel();
        PDMEditorForm editor = getPDMEditor();
        editor.setPDM(pdm, true);

        editor.showMe();
        pdm = editor.getPDM();
        initChoosePDMCB();
        pdmTypeReferenceCB.setSelectedItem(pdm.getName());
        setTypeRefTF();

//        if (MainMDIFrame.getMDIFrame() != null) {
//            if (MainMDIFrame.getMDIFrame().getSalsaPDMComposer() != null) {
//                MainMDIFrame.getMDIFrame().getSalsaPDMComposer().addObject(null);
//            } else {
//                JOptionPane.showMessageDialog(this, "Salsa PDM Composer not available",
//                    "PDM Editor Error", JOptionPane.INFORMATION_MESSAGE);
//            }
//        } else {
//            JOptionPane.showMessageDialog(this, "Main UI Not Started",
//                    "PDM Editor Error", JOptionPane.INFORMATION_MESSAGE);
//        }
    }

    private void editPDMAction() {

        String selectedPDM = (String) pdmTypeReferenceCB.getSelectedItem();
        PDMType pdm = DAOFactory.getPatternRepository().getGlobalPatternModel(selectedPDM);
        PDMEditorForm editor = getPDMEditor();
        editor.setPDM(pdm, false);
        editor.showMe();


//        if (MainMDIFrame.getMDIFrame() != null) {
//            if (MainMDIFrame.getMDIFrame().getSalsaPDMComposer() != null) {
//                MainMDIFrame.getMDIFrame().getSalsaPDMComposer().editObject(pdm);
//            } else {
//                JOptionPane.showMessageDialog(this, "Salsa PDM Composer not available",
//                    "PDM Editor Error", JOptionPane.INFORMATION_MESSAGE);
//            }
//        } else {
//            JOptionPane.showMessageDialog(this, "Main UI Not Started",
//                    "PDM Editor Error", JOptionPane.INFORMATION_MESSAGE);
//        }
    }

    private void pdmRoleSelected() {
        setTypeRefTF();
    }

    private void setTypeRefTF() {
        String pdmName = null;
        String roleName = null;
        if (pdmTypeReferenceCB.getSelectedItem() != null)
            pdmName = (String) pdmTypeReferenceCB.getSelectedItem();

        if (pdmRoleTypeReferenceCB.getSelectedItem() != null)
            roleName = (String) pdmRoleTypeReferenceCB.getSelectedItem();

        if ((pdmName != null) && (roleName != null)) {
            typeReferenceNameTF.setText(pdmName + "." + roleName);
        }
        else if (pdmName != null) {
            typeReferenceNameTF.setText(pdmName);
        } else {
            typeReferenceNameTF.setText("");
        }

    }

    private void pdmSelected() {
        initChoosePDMRoleCB();
        setTypeRefTF();
    }

    private void initChoosePDMCB() {
        Object [] pdmNames ;
        pdmNames = DAOFactory.getPatternRepository().getGlobalPatternModelNames().toArray();

        if (pdmNames != null) {
            javax.swing.DefaultComboBoxModel model = new javax.swing.DefaultComboBoxModel(pdmNames);
            pdmTypeReferenceCB.setModel(model);
        }
        pdmRoleTypeReferenceCB.removeAllItems();
        pdmRoleTypeReferenceCB.setSelectedIndex(-1);

        pdmTypeReferenceCB.setSelectedIndex(-1);

        editPDMButton.setEnabled(false);
    }

    private void initChoosePDMRoleCB() {
        Object [] roleNames;

        if (pdmTypeReferenceCB.getSelectedItem() != null) {
            String pdmName;
            pdmName = (String) pdmTypeReferenceCB.getSelectedItem();
            roleNames = DAOFactory.getPatternRepository().getGlobalPatternRoleNames(pdmName).toArray();
            if (roleNames != null) {
                javax.swing.DefaultComboBoxModel model = new javax.swing.DefaultComboBoxModel(roleNames);
                pdmRoleTypeReferenceCB.setModel(model);
            }
            editPDMButton.setEnabled(true);
        }
        pdmRoleTypeReferenceCB.setSelectedIndex(-1);
    }

    private void clearChoosePDM() {
        initChoosePDMCB();
        initChoosePDMRoleCB();
        typeReferenceNameTF.setText("");        
    }


    private void showRoleTypeFields() {

        CardLayout cl = (CardLayout) queryTypeFieldsPanel.getLayout();
        if (PDMXMLConstants.ROLE_TYPE_PDM.equals(getType())) {
            cl.show(queryTypeFieldsPanel, "PDM");
        } else if (PDMXMLConstants.ROLE_TYPE_QUERY.equals(getType())) {
            cl.show(queryTypeFieldsPanel, "Query");
        } else {
            cl.show(queryTypeFieldsPanel, "Abstract");
        }

    }
}
