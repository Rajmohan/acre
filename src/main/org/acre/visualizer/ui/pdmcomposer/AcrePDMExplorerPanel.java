/**
 *   Copyright 2004-2005 Sun Microsystems, Inc.
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */

package org.acre.visualizer.ui.pdmcomposer;

//import att.grappa.GrappaPanel;
import org.acre.pdm.PDMType;
import org.acre.pdm.RelationshipType;
import org.acre.pdm.RoleType;
import org.acre.common.AcreRuntimeException;
import org.acre.config.ConfigData;
import org.acre.config.ConfigService;
import org.acre.dao.DAOFactory;
import org.acre.dao.PatternRepository;
import org.acre.visualizer.graph.AcreGraphSelectionListener;
import org.acre.visualizer.graph.edges.AcreEdge;
import org.acre.visualizer.graph.pdmmodel.edges.RoleToRoleEdge;
import org.acre.visualizer.graph.pdmmodel.vertex.PDMVertex;
import org.acre.visualizer.graph.pdmmodel.vertex.RoleVertex;
import org.acre.visualizer.graph.vertex.AcreVertex;
import org.acre.pdmengine.model.PatternResult;
//import org.acre.visualizer.grappa.GrappaUtilities;
//import org.acre.visualizer.grappa.PDMExecutor;
//import org.acre.visualizer.grappa.GrappaAdapter;
import org.acre.visualizer.ui.Main;
import org.acre.visualizer.ui.components.Editor;
import org.acre.visualizer.ui.components.tabpane.CloseableTabPane;
//import org.acre.visualizer.v3d.PDMW3DWriter;
//import vmodel.pdm.j3d.Scene;

import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.awt.BorderLayout;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.logging.Logger;

/**
 *
 * @author  Administrator
 */
public class AcrePDMExplorerPanel extends javax.swing.JPanel
        implements Editor, AcreGraphSelectionListener, ChangeListener, ActionListener {
    private Logger logger;
    private PDMViewer globalPDMViewer;
    private Cursor fMainCursor;
    private static final Cursor waitCursor = new Cursor(Cursor.WAIT_CURSOR);
    private PDMEditorToolBar editorToolBar;
    public static final int DEFAULT_GRAPH_VIEW_WIDTH = 1000;
    public static final int DEFAULT_GRAPH_VIEW_HEIGHT = 1000;
    public static int SHOW_MODE_APPEND = 1;
    public static int SHOW_MODE_SINGLE = 2;

    private int showMode=SHOW_MODE_SINGLE;
    private PDMEditorForm pdmEditorForm;
    private
    JDialog pdmEditorDialog;
    private JFrame parentFrame;
    private JTabbedPane treeTabPane;
    private JSplitPane pdmTreeSplitPane;

    private PatternRepository patternRepository;

    /** Creates new form AcrePDMExplorerPanel */
    public AcrePDMExplorerPanel() {
        initComponents();
        initialize();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        toolBarPanel = new javax.swing.JPanel();
        ewSplitPane = new javax.swing.JSplitPane();
        leftPanel = new javax.swing.JPanel();
        nwSplitPane = new javax.swing.JSplitPane();
        pdmListPanel = new javax.swing.JPanel();
        pdmTreePanel = new javax.swing.JPanel();
        rightPanel = new javax.swing.JPanel();
        pdmViewTabPane = new CloseableTabPane(); // javax.swing.JTabbedPane();

        setLayout(new java.awt.BorderLayout());

        toolBarPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        toolBarPopulate();
        add(toolBarPanel, java.awt.BorderLayout.NORTH);

        ewSplitPane.setDividerSize(7);
        ewSplitPane.setOneTouchExpandable(true);
        leftPanel.setLayout(new java.awt.BorderLayout());

        nwSplitPane.setDividerLocation(350);
        nwSplitPane.setDividerSize(7);
        nwSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        nwSplitPane.setOneTouchExpandable(true);
        populatePDMListPanel();
        nwSplitPane.setLeftComponent(pdmListPanel);

        populatePDMTreePanel();
        nwSplitPane.setRightComponent(pdmTreePanel);

        leftPanel.add(nwSplitPane, java.awt.BorderLayout.CENTER);

        ewSplitPane.setLeftComponent(leftPanel);

        rightPanel.setLayout(new java.awt.BorderLayout());

        rightPanel.add(pdmViewTabPane, java.awt.BorderLayout.CENTER);

        ewSplitPane.setRightComponent(rightPanel);

        add(ewSplitPane, java.awt.BorderLayout.CENTER);

    }//GEN-END:initComponents

    private void populatePDMTreePanel() {
        // todo - method body
    }

    private void populatePDMListPanel() {
        // todo - method body
    }

    private void toolBarPopulate() {
        PDMEditorToolBar toolBar = new PDMEditorToolBar();
        setToolBar(toolBar);
        toolBar.setPDMPanel(this);
    }

    public void setToolBar(PDMEditorToolBar toolBar) {
        this.editorToolBar = toolBar;
        toolBarPanel.removeAll();
        toolBarPanel.add(toolBar);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSplitPane ewSplitPane;
    private javax.swing.JPanel leftPanel;
    private javax.swing.JSplitPane nwSplitPane;
    private javax.swing.JPanel pdmListPanel;
    private javax.swing.JPanel pdmTreePanel;
    private CloseableTabPane pdmViewTabPane;
    private javax.swing.JPanel rightPanel;
    private javax.swing.JPanel toolBarPanel;
    // End of variables declaration//GEN-END:variables

    private Hashtable grappaCache = new Hashtable();
//    private Hashtable<String, PDMW3DWriter> sceneCache = new Hashtable();
    private Hashtable pdmVisualizerCache = new Hashtable();

    HashMap availableModels = new HashMap();

    public static void main (String args[]) {
        AcrePDMExplorerPanel p = new AcrePDMExplorerPanel();
        PatternRepository facade = DAOFactory.getPatternRepository();
        List pdms = facade.getGlobalPatternModels();                             // Yury Kamen: hack
        p.initialize();
        p.setGlobalPDMViewer(pdms);
        JFrame f;
        f = new JFrame("AcrePDMExplorerPanel");
        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        f.getContentPane().add(p);
        f.pack();
        f.setVisible(true);
    }


    public void initialize() {
        ToolTipManager.sharedInstance().registerComponent(this);
        setToolTipText("Pattern Explorer");

        logger = ConfigService.getInstance().getLogger(this);

        globalPDMViewer = new PDMViewer();
        globalPDMViewer.setEditor(this);

        JScrollPane listScroll = new JScrollPane();
        listScroll.getViewport().setView(globalPDMViewer.getList());
        JTabbedPane listTabPane = new JTabbedPane();
        listTabPane.addTab("Patterns", listScroll);
        pdmListPanel.setLayout(new BorderLayout());
        this.pdmListPanel.add(listTabPane, BorderLayout.CENTER);

        JScrollPane treeScroll = new JScrollPane();
        treeScroll.getViewport().setView(globalPDMViewer.getTree());
        treeTabPane = new JTabbedPane();
        treeTabPane.addTab("Pattern Hierarchy", treeScroll);
        pdmTreePanel.setLayout(new BorderLayout());
        pdmTreePanel.add(treeTabPane, BorderLayout.CENTER);

        pdmViewTabPane.addChangeListener(this);

        patternRepository = DAOFactory.getPatternRepository();
    }

    public void setGlobalPDMViewer(List queries) {
        this.globalPDMViewer.getList().setListData(new ArrayList(queries));
    }

    public void setWaiting(boolean waiting) {

        if (waiting) {
            if (fMainCursor == null) {
                fMainCursor = this.getCursor();
            }
            this.setCursor(waitCursor);
        } else {
            this.setCursor(fMainCursor);
        }
    }

//    private Scene getSceneForView(String pdmName) throws Exception {
//        PDMW3DWriter pdm3d = (PDMW3DWriter) sceneCache.get(pdmName);
//        Scene scene = pdm3d.getScene();
//        return scene;
//    }
//
//    private GrappaPanel getGrappaPanelForView(String pdmName) throws Exception {
//        GrappaPanel grappaPanel = (GrappaPanel) grappaCache.get(pdmName);
//        return grappaPanel;
//    }
//
//    public GrappaPanel getGrappaPanel(final String pdmName) throws Exception {
//        GrappaPanel grappaPanel = (GrappaPanel) grappaCache.get(pdmName);
//        if(null != grappaPanel) {
//            return grappaPanel;
//        }
//        return null;
//    }
//
//    public void remove3DPanel(final String pdmName) throws Exception {
//        PDMW3DWriter pdm3d = (PDMW3DWriter) sceneCache.get(pdmName);
//        if (pdm3d != null)
//            sceneCache.remove(pdmName);
//    }
//
//    public void removeGrappaPanel(final String pdmName) throws Exception {
//        GrappaPanel grappaPanel = (GrappaPanel) grappaCache.get(pdmName);
//        if (grappaPanel != null)
//            grappaCache.remove(pdmName);
//    }


    private void executePDM(String execPDMName) {
        ExecutePDMThread thread = new ExecutePDMThread(execPDMName);
        thread.start();
    }

    public void viewObject(Object editObject) {
        try {

            if (editObject == null) {
                return;
            }

            if (editObject instanceof PDMType) {
                PDMType pdm = (PDMType) editObject;
                editorToolBar.selectPDM();

                PDMViewPanel viewPanel= getPDMViewPanel(pdm.getName());
                if (viewPanel == null) {
                    viewPanel = new PDMViewPanel(pdm.getName(), pdmTreePanel, globalPDMViewer);
                    visualizePDM(viewPanel, pdm);

                    pdmViewTabPane.addTab(pdm.getName(), viewPanel);
                    pdmViewTabPane.setSelectedComponent(viewPanel);
                    pdmViewTabPane.setToolTipTextAt(pdmViewTabPane.getSelectedIndex(),
                            "<HTML>" +
                            pdm.getName() + "<BR>" + pdm.getDescription() + "</HTML>");
//                    Scene scene = getSceneForView(pdm.getName());
//                    if (scene != null) {
//                        viewPanel.setResult3DView(pdm.getName(), scene);
//                    }
//
//                    GrappaPanel grappaPanel = getGrappaPanelForView(pdm.getName());
//                    if (grappaPanel != null) {
//                        viewPanel.setResult2DView(pdm.getName(), grappaPanel);
//                    }
                } else {
                    // viewPanel already exists. set the visiable tab to this PDM
                    // todo viewPanel.set refresh tree content
                    showPDMViewTab(pdm.getName());
                }


//
//                Scene scene = getSceneForView(pdm.getName());
//                if (scene != null) {
//                    viewPanel.setResult3DView(pdm.getName(), scene);
//                }
//
//                GrappaPanel grappaPanel = getGrappaPanelForView(pdm.getName());
//                if (grappaPanel != null) {
//                    viewPanel.setResult2DView(pdm.getName(), grappaPanel);
//                }
            }
        } catch (Throwable e) {
            logger.throwing("AcrePDMPanel", "viewObject", e);
        }
    }

    private void showPDMViewTab(String pdmName) {
        for (int i=0; i < pdmViewTabPane.getTabCount(); i++) {
            PDMViewPanel pdmViewPanel = (PDMViewPanel)
                    pdmViewTabPane.getComponentAt(i);
            if ((pdmViewPanel.getPdmName() != null) &&
                (pdmViewPanel.getPdmName().equalsIgnoreCase(pdmName))) {
                pdmViewTabPane.setSelectedComponent(pdmViewPanel);
                pdmViewTabPane.setSelectedIndex(i);
            }
        }
    }

    private PDMViewPanel getPDMViewPanel(String pdmName) {
        for (int i=0; i < pdmViewTabPane.getTabCount(); i++) {
            PDMViewPanel pdmViewPanel = (PDMViewPanel)
                    pdmViewTabPane.getComponentAt(i);
            if ((pdmViewPanel.getPdmName() != null) &&
                (pdmViewPanel.getPdmName().equalsIgnoreCase(pdmName))) {
                return pdmViewPanel;
            }
        }
        return null;
    }

    private void visualizePDM(PDMViewPanel viewPanel, PDMType pdm) {

        final PDMType visualPDM = pdm;
        final AcrePDMExplorerPanel uiEditor = this;
        final PDMViewPanel viewPanelForPDM = viewPanel;

            SwingUtilities.invokeLater(new Thread() {
                public void run() {
//                    setWaiting(true);
                    AcrePDMVisualizer visualizer =
                            (AcrePDMVisualizer) pdmVisualizerCache.get(visualPDM.getName());

                    if (visualizer == null) {
                        //System.out.println("Creating new PDM Visualizer for " + visualPDM.getName());
                        visualizer = new AcrePDMVisualizer();
                        visualizer.setUIEditor(uiEditor);
                        visualizer.getDiagram().addSelectionListener(uiEditor);
                        if (showMode == SHOW_MODE_SINGLE) {
                           visualizer.showSinglePDM(visualPDM);
                        } else if (showMode == SHOW_MODE_APPEND) {
                            visualizer.insertPDM(visualPDM);
                        }
                    } else {
                        //System.out.println("Got Visualizer for " + visualPDM.getName());
                    }

                    viewPanelForPDM.setPDMDiagram(visualizer);
//                    int prevLoc = nsSplitPane.getDividerLocation();
//                    nsSplitPane.setTopComponent(visualizer);
//                    nsSplitPane.setDividerLocation(prevLoc);

                    if (pdmVisualizerCache.get(visualPDM.getName()) == null) {
                        //System.out.println("Adding PDM Visualizer to cache " + visualPDM.getName());
                        pdmVisualizerCache.put(visualPDM.getName(), visualizer);
                    }
//                    setWaiting(false);
                }
            });
    }


    public void deleteObject(Object key) {
        if (key == null) {
            Main.showMainError("Pattern not selected from the list.\nPlease selecte a Pattern and retry.", "Delete Pattern");
            return;
        }

        if (key instanceof PDMType) {

            boolean confirm = Main.showMainConfirm(this,
                    "Do you really want to delete Pattern '" + ((PDMType) key).getName()
                    + "' ?\n", "Delete Pattern");

            if (confirm) {
                try {
                    if (patternRepository.deleteGlobalPatternModel((PDMType) key)) {
                        Main.showMainInfo("Deleted Pattern '" + ((PDMType) key).getName()
                                + "'", "Delete Pattern");
                        //clear editor
                        clear();

                        // refresh list
                        refreshGlobalPDMList();
                    }
                } catch (Throwable t) {
                    Main.showMainError(t.getMessage(), "Delete Pattern Failed");
                }
            }

        } else {
            Main.showMainError("Attempt to delete unknown object type" +
                    key, "Delete Pattern");
        }
    }

    public void addObject(Object info) {
        // info is not used for now...
        try {
            PDMType newPdm = patternRepository.createNewPatternModel();
            showPDMEditor(newPdm, true);
        } catch (AcreRuntimeException t) {
            logger.throwing("AcrePDMPanel", "addObject", t);
            Main.showMainError(t.getErrorMessages(), "Error - Add New Query");
        } catch (Throwable t) {
            logger.throwing("AcrePDMPanel", "addObject", t);
            Main.showMainError(t.getMessage(), "Error - Add New Query");
        }

    }

    private void initPdmEditorDialog() {
        if (pdmEditorForm == null) {
            pdmEditorForm = new PDMEditorForm();
            pdmEditorForm.setParentFrame(getParentFrame());
            pdmEditorDialog = new JDialog(getParentFrame(), true);
            pdmEditorDialog.setContentPane(pdmEditorForm);
            pdmEditorDialog.pack();
            pdmEditorDialog.setLocationRelativeTo(getParentFrame());
            pdmEditorForm.setDialog(pdmEditorDialog);
        }
    }

    private void showPDMEditor(PDMType newPDM, boolean isNewPDM) {

        initPdmEditorDialog();

        if (isNewPDM)
            pdmEditorDialog.setTitle("Pattern Editor - Add New Pattern");
        else
            pdmEditorDialog.setTitle("Pattern Editor - Edit Pattern");

        this.pdmEditorForm.setPDM(newPDM, isNewPDM);

        pdmEditorForm.showMe();

        checkRefresh(newPDM);


    }

    private void checkRefresh(PDMType newPDM) {
        if (newPDM == null)
            return;

        if ((pdmEditorForm != null) &&
            (! pdmEditorForm.isOperationCanceled())) {
            refreshPDMView(newPDM);
        }

        // refresh the list of PDMs
        refreshGlobalPDMList();

        // re-select the edited query in the list
        this.globalPDMViewer.getList().setSelectedValue(newPDM.getName());
    }

    private void refreshPDMView(PDMType pdm) {
        // recreate the visualization for the selecetd pdm

        pdmVisualizerCache.remove(pdm.getName());
        PDMViewPanel viewPanel= getPDMViewPanel(pdm.getName());
        if (viewPanel == null) {
            viewPanel = new PDMViewPanel(pdm.getName(), pdmTreePanel, globalPDMViewer);
        }

        visualizePDM(viewPanel, pdm);                
        viewObject(pdm);

    }

    private AcrePDMVisualizer getPDMViewFromCache(PDMType pdm) {
        return (AcrePDMVisualizer) pdmVisualizerCache.get(pdm.getName());
    }

    public JFrame getParentFrame() {
        return parentFrame;
    }

    public void setParentFrame(JFrame parentFrame) {
        this.parentFrame = parentFrame;
    }

    public void executeObject(Object key) {
        if (key == null) {
            Main.showMainError("Pattern not selected from the list.\nPlease selecte a Pattern and retry.", "Execute Pattern");
            return;
        }
        if (key instanceof PDMType) {
            PDMType pdm = (PDMType) key;
            executePDM(pdm.getName());
            invalidate();
        }
    }

    public void editObject(Object value) {
        if (value == null) {
            Main.showMainError("Pattern not selected from the list.\nPlease selecte a Pattern and retry.", "Edit Pattern");
            return;
        }
        if (value instanceof PDMType) {
            PDMType valuePDM = (PDMType) value;
            //PDMType editPDM = patternRepository.getGlobalPatternModel(valuePDM.getName());
            showPDMEditor(valuePDM, false);
        } else {
            Main.showMainError("Attempt to edit unknown object type" +
                    value, "Edit Pattern");
        }

    }

    public void clear() {
        pdmViewTabPane.removeAll();

        if (globalPDMViewer != null) {
            globalPDMViewer.getList().clearSelection();
            //globalQueriesList.getList().setSelectedIndex(-1);
        }
        if (pdmEditorForm != null) {
            pdmEditorForm.clear();
        }

    }

    public void refreshList() {
        refreshGlobalPDMList();
    }

    public Editor getQueryEditor() {
        if (Main.getMDIFrame() != null) {
            Main.getMDIFrame().showPQLEditor();
            return Main.getMDIFrame().getQueryEditor();
        }
        return null;
    }

    private void refreshGlobalPDMList() {
        PDMType p = globalPDMViewer.getSelectedPDM();

        // force reload of all PDMs from the repository
        // this will pick up any new PDMs created/deposited by the user
        // manually outside of SALSA UI
//        patternRepository.load();

        List refreshQueries = patternRepository.getGlobalPatternModels();
        setGlobalPDMViewer(refreshQueries);
        if (p != null) {
            globalPDMViewer.getList().setSelectedValue(p.getName());
        } else {
            globalPDMViewer.getList().setSelectedIndex(-1);
        }
    }

    // this is called from the toolbar
    public void addPDMNewRole() {
        PDMType selectedPDM = globalPDMViewer.getSelectedPDM();
        if (selectedPDM != null)
            addPDMNewRole(selectedPDM);
    }

    public void editSelectedRole() {
        PDMType selectedPDM = globalPDMViewer.getSelectedPDM();
        if (selectedPDM == null)
            return;
        AcrePDMVisualizer selectedVis = getPDMViewFromCache(selectedPDM);
        RoleVertex role = selectedVis.getSelectedRole();
        if (role != null) {
            editRole(role.getPDM(), role.getRole());
        }
    }

    public void deleteSelectedRole() {
        PDMType selectedPDM = globalPDMViewer.getSelectedPDM();
        if (selectedPDM == null)
            return;
        AcrePDMVisualizer selectedVis = getPDMViewFromCache(selectedPDM);
        RoleVertex role = selectedVis.getSelectedRole();
        if (role != null) {
            deleteRole(role.getPDM(), role.getRole());
        }
    }

    public void addPDMNewRelationship() {
        PDMType selectedPDM = globalPDMViewer.getSelectedPDM();
        if (selectedPDM != null)
            addPDMNewRelationship(selectedPDM);
    }

    public void editSelectedRelationship() {
        PDMType selectedPDM = globalPDMViewer.getSelectedPDM();
        if (selectedPDM == null)
            return;
        AcrePDMVisualizer selectedVis = getPDMViewFromCache(selectedPDM);
        RoleToRoleEdge e = selectedVis.getSelectedRelationship();
        if (e != null) {
            editRelationship(e.getPDM(), e.getRelationship());
        }
    }

    public void deleteSelectedRelationship() {
        PDMType selectedPDM = globalPDMViewer.getSelectedPDM();
        if (selectedPDM == null)
            return;
        AcrePDMVisualizer selectedVis = getPDMViewFromCache(selectedPDM);
        RoleToRoleEdge e = selectedVis.getSelectedRelationship();
        if (e != null) {
            deleteRelationship(e.getPDM(), e.getRelationship());
        }
    }

    // this is called from graph popup
    public void addPDMNewRole(PDMType pdm) {
        initPdmEditorDialog();

        pdmEditorDialog.setTitle("Pattern Editor - Add Role");

        this.pdmEditorForm.setPDM(pdm, false);
        this.pdmEditorForm.addRole();
        if (!pdmEditorForm.getRoleForm().isOperationCanceled()) {
            this.pdmEditorForm.save();
            checkRefresh(pdm);
        }

    }

    // this is called from the graph popup
    public void editRole(PDMType pdm, RoleType role) {
        initPdmEditorDialog();

        pdmEditorDialog.setTitle("Pattern Editor - Edit Role");

        this.pdmEditorForm.setPDM(pdm, false);
        this.pdmEditorForm.selectInRoleTable(role);
        this.pdmEditorForm.showEditRole();
//        this.pdmEditorForm.getRoleForm().save();
        if (! pdmEditorForm.getRoleForm().isOperationCanceled()) {
            this.pdmEditorForm.save();
            checkRefresh(pdm);
        }
    }

    public void editRelationship(PDMType pdm, RelationshipType rel) {
            initPdmEditorDialog();

            pdmEditorDialog.setTitle("Pattern Editor - Edit Relationship");

            this.pdmEditorForm.setPDM(pdm, false);
            this.pdmEditorForm.selectInRelationshipTable(rel);
            this.pdmEditorForm.showEditRelationship();
//            this.pdmEditorForm.getRelForm().save();
            if (! pdmEditorForm.getRelForm().isOperationCanceled()) {
                this.pdmEditorForm.save();
                checkRefresh(pdm);
            }
        }


    // this is called from the popup
    public void addPDMNewRelationship(PDMType pdm) {
        initPdmEditorDialog();

        pdmEditorDialog.setTitle("Pattern Editor - Add Relationship");

        this.pdmEditorForm.setPDM(pdm, false);
        this.pdmEditorForm.addRelationship();
        if (! pdmEditorForm.getRelForm().isOperationCanceled()) {
            this.pdmEditorForm.save();
            checkRefresh(pdm);
        }

    }

    public void deleteRelationship(PDMType pdm, RelationshipType rel) {
        initPdmEditorDialog();

        pdmEditorDialog.setTitle("Pattern Editor - Delete Relationship");

        this.pdmEditorForm.setPDM(pdm, false);
        this.pdmEditorForm.selectInRelationshipTable(rel);
        this.pdmEditorForm.deleteRelationship();
//        if (! pdmEditorForm.getRelForm().isOperationCanceled()) {
//
//        }

        this.pdmEditorForm.save();
        checkRefresh(pdm);
    }

    public void deleteRole(PDMType pdm, RoleType role) {
        initPdmEditorDialog();

        pdmEditorDialog.setTitle("Pattern Editor - Delete Role");

        this.pdmEditorForm.setPDM(pdm, false);
        this.pdmEditorForm.selectInRoleTable(role);
        this.pdmEditorForm.deleteRole();

        // todo - if a role is deleted, check and see if there are relationships that use this role
        // todo - impact of role deletion
//        if (! pdmEditorForm.getRoleForm().isOperationCanceled()) {
//
//        }

        this.pdmEditorForm.save();
        checkRefresh(pdm);
    }

    public void executeSelectedPDM() {
        executeObject(this.globalPDMViewer.getSelectedPDM());
    }

    public void deleteSelectedPDM() {
        deleteObject(this.globalPDMViewer.getSelectedPDM());
    }

    public void editSelectedPDM() {
        editObject(this.globalPDMViewer.getSelectedPDM());
    }

    public void checkRefreshSelectedPDM() {
        checkRefresh(this.globalPDMViewer.getSelectedPDM());
    }

    public void addNewPDM() {
        addObject(null);
    }

    public void vertexSelected(AcreVertex v) {
        if (v instanceof PDMVertex) {
            editorToolBar.selectPDM();
        } else if (v instanceof RoleVertex) {
            editorToolBar.selectRole();
        }
    }

    public void edgeSelected(AcreEdge e) {
        if (e instanceof RoleToRoleEdge) {
            editorToolBar.selectRoleToRoleEdge();
        }
    }

    public void multipleSelected(Object[] graphObjects) {
        editorToolBar.setButtonsEnabled(false);
    }

    public void noneSelected() {
        editorToolBar.selectPDM();
    }

    public void stateChanged(ChangeEvent e) {
        if (e.getSource() == pdmViewTabPane) {
            PDMViewPanel pan=(PDMViewPanel) pdmViewTabPane.getSelectedComponent();
            if (pan != null) {
                globalPDMViewer.setSelectedPDM(pan.getPdmName());
//                PDMW3DWriter pdm3d = (PDMW3DWriter) sceneCache.get(pan.getPdmName());
//
//                if (pdm3d != null) {
//                    Scene scene = pdm3d.getScene();
//                    pdmTreePanel.removeAll();
//                    pdmTreePanel.add(scene.getModelBrowser().getLeftHandSplitPane(),
//                            BorderLayout.CENTER);
////                    pdmTreeSplitPane.setRightComponent(
////                        scene.getModelBrowser().getLeftHandSplitPane());
//                } else {
////                    pdmTreeSplitPane.setRightComponent(null);
//                    pdmTreePanel.removeAll();
//                    JScrollPane treeScroll = new JScrollPane();
//                    treeScroll.getViewport().setView(globalPDMViewer.getTree());
//                    treeTabPane = new JTabbedPane();
//                    treeTabPane.addTab("Pattern Hierarchy", treeScroll);
//                    pdmTreePanel.setLayout(new BorderLayout());
//                    pdmTreePanel.add(treeTabPane, BorderLayout.CENTER);
//                }
            }
        }
        pdmTreePanel.invalidate();
        invalidate();

    }

    public void actionPerformed(ActionEvent e) {
        // todo - implemented method body
    }


    private class ExecutePDMThread extends Thread {
        String pdmName;

        public ExecutePDMThread(String pdmName) {
            super();
            this.pdmName = pdmName;
        }

        public void run() {
            if (true) return;

//            setWaiting(true);
//            MainMDIFrame.showBusyProgress("Executing '" + pdmName + "'");
//            PDMExecutor pdmExecutor = null;
//            PatternResult patternResult=null;
//            GrappaPanel grappaPanel = null;
//            PDMW3DWriter scene3D=null;
//            try {
//                pdmExecutor = new PDMExecutor();
//                pdmExecutor.setUp();
//                ConfigData configData = ConfigService.getInstance().getConfigData();
//                if ((configData.getAcreDefaultSystem() != null) &&
//                    (configData.getAcreDefaultVersion() != null)) {
//                    patternResult = pdmExecutor.execute(pdmName,
//                            configData.getAcreDefaultSystem(),
//                            configData.getAcreDefaultVersion());
//                } else {
//                    patternResult = pdmExecutor.execute(pdmName);
//                }
//
//                // remove Grappa Panel
//                removeGrappaPanel(pdmName);
//
//                // create a new Grappa Panel and replace it in the cache
//                grappaPanel = GrappaUtilities.createGrappaPanel(patternResult);
//                grappaPanel.setScaleToFit(true);
//                grappaPanel.setScaleToSize(new Dimension(DEFAULT_GRAPH_VIEW_WIDTH, DEFAULT_GRAPH_VIEW_HEIGHT));
//                grappaPanel.addGrappaListener(new GrappaAdapter());   // Required to enable tooltips etc.
//
//                if (grappaPanel != null) {
//                    // add new grappa panel to cache
//                    grappaCache.put(pdmName, grappaPanel);
//                }
//
//                scene3D = null;
//                if (configData.isVisualizer3DOn()) {
//                    // create new 3D results and replace it in the cache
//                    remove3DPanel(pdmName);
//                    scene3D = PDMW3DWriter.create3DPanel(patternResult);
//                    if (scene3D != null) {
//                        // add new 3d view to cache
//                        sceneCache.put(pdmName, scene3D);
//                    }
//                }
//
//                PDMViewPanel viewPanel = getPDMViewPanel(pdmName);
//                if (viewPanel != null) {
//                    if (grappaPanel != null)
//                        viewPanel.setResult2DView(pdmName, grappaPanel);
//
//                    try {
//                        if (scene3D != null)
//                            viewPanel.setResult3DView(pdmName, scene3D.getScene());
//                    } catch (Throwable t) {
//                        logger.severe("Failed to create 3D results for Pattern " + pdmName);
//                        logger.throwing(this.getClass().getName(), "executePDM", t);
//                    }
//                }
//                viewPanel.invalidate();
//
//            } catch (Throwable t) {
//                logger.throwing(this.getClass().getName(), "executePDM", t);
//                MainMDIFrame.showMainError(t.getMessage(), "Execute Pattern Error");
//            } finally {
//                MainMDIFrame.hideBusyProgress();
//                setWaiting(false);
//                if (pdmExecutor != null) {
//                    try {
//                        pdmExecutor.tearDown();
//                    } catch (Throwable e) {
//                        logger.throwing(this.getClass().getName(), "executePDM", e);
//                    }
//                }
//            }
        }
    }

    public PDMEditorForm getPdmEditorForm() {
        return pdmEditorForm;
    }

    public void setPdmEditorForm(PDMEditorForm pdmEditorForm) {
        this.pdmEditorForm = pdmEditorForm;
    }
}
