/**
 *   Copyright 2004-2005 Sun Microsystems, Inc.
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */

package org.acre.visualizer.ui.pdmcomposer;

import org.acre.common.AcreStringUtil;
import org.acre.dao.PDMValidator;
import org.acre.visualizer.ui.Main;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JDialog;

/**
 *
 * @author  Administrator
 */
public class PDMRoleArgumentForm extends javax.swing.JPanel {
    
    /** Creates new form PDMRoleArgumentForm */
    public PDMRoleArgumentForm() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        sequenceLabel = new javax.swing.JLabel();
        sequenceTF = new javax.swing.JTextField();
        typeLabel = new javax.swing.JLabel();
        typeCB = new javax.swing.JComboBox();
        nameLabel = new javax.swing.JLabel();
        nameTF = new javax.swing.JTextField();
        valueLabel = new javax.swing.JLabel();
        valueTF = new javax.swing.JTextField();
        buttonPanel = new javax.swing.JPanel();
        saveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        setPreferredSize(new java.awt.Dimension(300, 175));
        sequenceLabel.setText("Sequence");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 5);
        add(sequenceLabel, gridBagConstraints);

        sequenceTF.setColumns(3);
        sequenceTF.setEditable(false);
        sequenceTF.setToolTipText("Sequence number for this argument");
        sequenceTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sequenceTFActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 3, 0);
        add(sequenceTF, gridBagConstraints);

        typeLabel.setText("Argument Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 5);
        add(typeLabel, gridBagConstraints);

        initTypeCB();
        typeCB.setToolTipText("Type of Argument");
        typeCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeCBActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 3, 0);
        add(typeCB, gridBagConstraints);

        nameLabel.setText("Argument Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 5);
        add(nameLabel, gridBagConstraints);

        nameTF.setColumns(15);
        nameTF.setToolTipText("Name for the Argument");
        nameTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameTFActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 3, 0);
        add(nameTF, gridBagConstraints);

        valueLabel.setText("Argument Value");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 5);
        add(valueLabel, gridBagConstraints);

        valueTF.setColumns(15);
        valueTF.setToolTipText("Value for this argument");
        valueTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                valueTFActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 3, 0);
        add(valueTF, gridBagConstraints);

        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/acre/visualizer/ui/icons/buttons/SaveButton.gif")));
        saveButton.setMnemonic('S');
        saveButton.setToolTipText("Save this argument");
        saveButton.setBorderPainted(false);
        saveButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(saveButton);

        cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/acre/visualizer/ui/icons/buttons/CancelButton.gif")));
        cancelButton.setMnemonic('C');
        cancelButton.setToolTipText("Cancel this window");
        cancelButton.setBorderPainted(false);
        cancelButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(cancelButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        add(buttonPanel, gridBagConstraints);

    }//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        cancel();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        save();
    }//GEN-LAST:event_saveButtonActionPerformed

    private void valueTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_valueTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_valueTFActionPerformed

    private void nameTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameTFActionPerformed

    private void sequenceTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sequenceTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sequenceTFActionPerformed

    private void typeCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_typeCBActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameTF;
    private javax.swing.JButton saveButton;
    private javax.swing.JLabel sequenceLabel;
    private javax.swing.JTextField sequenceTF;
    private javax.swing.JComboBox typeCB;
    private javax.swing.JLabel typeLabel;
    private javax.swing.JLabel valueLabel;
    private javax.swing.JTextField valueTF;
    // End of variables declaration//GEN-END:variables

    boolean operationCanceled = false;
    JDialog dialog;

    private void initTypeCB() {
        Object [] values = PDMValidator.getInstance().getRoleArgumentTypes().toArray();
        DefaultComboBoxModel model = new DefaultComboBoxModel(values);
        this.typeCB.setModel(model);
    }

    private void cancel() {
        operationCanceled = true;
        hideMe();
    }

    private void save() {
        if (AcreStringUtil.isEmpty(getArgumentName())) {
            Main.showMainError("Argument Name cannot be null", "Save Role Argument");
            return;
        }

        if (AcreStringUtil.isEmpty(getArgumentValue())) {
            Main.showMainError("Argument Value cannot be null", "Save Role Argument");
            return;
        }

        if (AcreStringUtil.isEmpty(getType())) {
            Main.showMainError("Argument Type must be selected", "Save Role Argument");
            return;
        }

        operationCanceled = false;

        hideMe();
    }

    public void showMe() {
        if (dialog != null)
            dialog.show();
    }

    private void hideMe() {
        if (dialog != null)
            dialog.hide();
    }

    public JDialog getDialog() {
        return dialog;
    }

    public void setDialog(JDialog dialog) {
        this.dialog = dialog;
        this.dialog.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
    }

    public boolean isOperationCanceled() {
        return operationCanceled;
    }

    public String getSequence() {
        return sequenceTF.getText();
    }

    public String getType() {
        if (typeCB.getSelectedItem() != null)
            return typeCB.getSelectedItem().toString();
        else return "";
    }

    public String getArgumentName() {
        return nameTF.getText();
    }

    public String getArgumentValue() {
        return valueTF.getText();
    }

    public void clear() {
        nameTF.setText("");
        valueTF.setText("");
    }

    public void setSequence(String s) {
        sequenceTF.setText(s);
    }
}
