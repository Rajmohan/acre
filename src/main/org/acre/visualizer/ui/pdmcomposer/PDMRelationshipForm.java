/**
 *   Copyright 2004-2005 Sun Microsystems, Inc.
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */

package org.acre.visualizer.ui.pdmcomposer;

import org.acre.pdm.PDMType;
import org.acre.pdm.RelationshipType;
import org.acre.common.AcreErrors;
import org.acre.common.AcreStringUtil;
import org.acre.dao.DAOFactory;
import org.acre.dao.PDMValidator;
import org.acre.dao.PDMXMLConstants;
import org.acre.visualizer.ui.Main;

import javax.swing.JDialog;
import javax.swing.JFrame;

/**
 *
 * @author  Administrator
 */
public class PDMRelationshipForm extends javax.swing.JPanel {

    /** Creates new form TestSampleForm */
    public PDMRelationshipForm() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        nameLabel = new javax.swing.JLabel();
        nameTF = new javax.swing.JTextField();
        typeLabel = new javax.swing.JLabel();
        relationshipTypeCB = new javax.swing.JComboBox();
        fromRoleLabel = new javax.swing.JLabel();
        fromPDMCB = new javax.swing.JComboBox();
        fromPDMRoleLabel = new javax.swing.JLabel();
        fromPDMRoleCB = new javax.swing.JComboBox();
        fromPDMRoleLabel2 = new javax.swing.JLabel();
        fromRoleTF = new javax.swing.JTextField();
        toRoleLabel = new javax.swing.JLabel();
        toPDMCB = new javax.swing.JComboBox();
        toPDMRoleLabel = new javax.swing.JLabel();
        toPDMRoleCB = new javax.swing.JComboBox();
        toPDMRoleLabel2 = new javax.swing.JLabel();
        toRoleTF = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        buttonPanel = new javax.swing.JPanel();
        saveRelationshipButton = new javax.swing.JButton();
        cancelRelationshipEditButton = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        setPreferredSize(new java.awt.Dimension(800, 400));
        nameLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        nameLabel.setText("Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
        add(nameLabel, gridBagConstraints);

        nameTF.setColumns(20);
        nameTF.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        nameTF.setToolTipText("Unique Name in this PDM for this Relationship");
        nameTF.setNextFocusableComponent(relationshipTypeCB);
        nameTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameTFActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 10, 0, 0);
        add(nameTF, gridBagConstraints);

        typeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        typeLabel.setText("Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
        add(typeLabel, gridBagConstraints);

        relationshipTypeCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Instantiates", "Uses", "Calls", "Implements", "Extends" }));
        relationshipTypeCB.setToolTipText("Type of Relationship");
        relationshipTypeCB.setNextFocusableComponent(fromPDMCB);
        relationshipTypeCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                relationshipTypeCBActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 10, 0, 0);
        add(relationshipTypeCB, gridBagConstraints);

        fromRoleLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        fromRoleLabel.setText("From Pattern");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        add(fromRoleLabel, gridBagConstraints);

        initFromPDMCB();
        fromPDMCB.setToolTipText("From PDM / Role");
        fromPDMCB.setNextFocusableComponent(toPDMRoleCB);
        fromPDMCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromPDMCBActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 0);
        add(fromPDMCB, gridBagConstraints);

        fromPDMRoleLabel.setText("From Role");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
        add(fromPDMRoleLabel, gridBagConstraints);

        initFromPDMRoleCB();
        fromPDMRoleCB.setNextFocusableComponent(fromRoleTF);
        fromPDMRoleCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromPDMRoleCBActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 10, 0, 0);
        add(fromPDMRoleCB, gridBagConstraints);

        fromPDMRoleLabel2.setText("From <Pattern>.Role");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
        add(fromPDMRoleLabel2, gridBagConstraints);

        fromRoleTF.setColumns(20);
        fromRoleTF.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        fromRoleTF.setToolTipText("Name of PDM or PDM.Role or PDM.Relationship.Role");
        fromRoleTF.setNextFocusableComponent(toPDMCB);
        fromRoleTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromRoleTFActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 10, 0, 0);
        add(fromRoleTF, gridBagConstraints);

        toRoleLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        toRoleLabel.setText("To Pattern");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        add(toRoleLabel, gridBagConstraints);

        initToPDMCB();
        toPDMCB.setToolTipText("To PDM / Role");
        toPDMCB.setNextFocusableComponent(toPDMRoleCB);
        toPDMCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toPDMCBActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 0);
        add(toPDMCB, gridBagConstraints);

        toPDMRoleLabel.setText("To Role");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
        add(toPDMRoleLabel, gridBagConstraints);

        initToPDMRoleCB();
        toPDMRoleCB.setNextFocusableComponent(toRoleTF);
        toPDMRoleCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toPDMRoleCBActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 10, 0, 0);
        add(toPDMRoleCB, gridBagConstraints);

        toPDMRoleLabel2.setText("To Pattern.Role");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
        add(toPDMRoleLabel2, gridBagConstraints);

        toRoleTF.setColumns(20);
        toRoleTF.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        toRoleTF.setToolTipText("Name of PDM or PDM.Role or PDM.Relationship.Role");
        toRoleTF.setNextFocusableComponent(saveRelationshipButton);
        toRoleTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toRoleTFActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 10, 0, 0);
        add(toRoleTF, gridBagConstraints);

        jSeparator1.setBorder(new javax.swing.border.EtchedBorder());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(8, 6, 5, 6);
        add(jSeparator1, gridBagConstraints);

        jSeparator2.setBorder(new javax.swing.border.EtchedBorder());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(8, 6, 5, 6);
        add(jSeparator2, gridBagConstraints);

        saveRelationshipButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/acre/visualizer/ui/icons/buttons/SaveButton.gif")));
        saveRelationshipButton.setMnemonic('S');
        saveRelationshipButton.setToolTipText("Save this Relationship");
        saveRelationshipButton.setBorderPainted(false);
        saveRelationshipButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        saveRelationshipButton.setNextFocusableComponent(cancelRelationshipEditButton);
        saveRelationshipButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveRelationshipButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(saveRelationshipButton);

        cancelRelationshipEditButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/acre/visualizer/ui/icons/buttons/CancelButton.gif")));
        cancelRelationshipEditButton.setMnemonic('C');
        cancelRelationshipEditButton.setToolTipText("Cancel this window");
        cancelRelationshipEditButton.setBorderPainted(false);
        cancelRelationshipEditButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        cancelRelationshipEditButton.setNextFocusableComponent(nameTF);
        cancelRelationshipEditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelRelationshipEditButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(cancelRelationshipEditButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        add(buttonPanel, gridBagConstraints);

    }//GEN-END:initComponents

    private void toPDMRoleCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toPDMRoleCBActionPerformed
        setToTextField();
    }//GEN-LAST:event_toPDMRoleCBActionPerformed

    private void fromPDMRoleCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromPDMRoleCBActionPerformed
        setFromTextField();
    }//GEN-LAST:event_fromPDMRoleCBActionPerformed

    private void nameTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameTFActionPerformed

    private void relationshipTypeCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_relationshipTypeCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_relationshipTypeCBActionPerformed

    private void fromRoleTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromRoleTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fromRoleTFActionPerformed

    private void fromPDMCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromPDMCBActionPerformed
        setFromPDM();
    }//GEN-LAST:event_fromPDMCBActionPerformed

    private void toRoleTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toRoleTFActionPerformed
        //todo  
    }//GEN-LAST:event_toRoleTFActionPerformed

    private void toPDMCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toPDMCBActionPerformed
        setToPDM();
    }//GEN-LAST:event_toPDMCBActionPerformed

    private void saveRelationshipButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveRelationshipButtonActionPerformed
        save();
    }//GEN-LAST:event_saveRelationshipButtonActionPerformed

    private void cancelRelationshipEditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelRelationshipEditButtonActionPerformed
        cancel();
    }//GEN-LAST:event_cancelRelationshipEditButtonActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelRelationshipEditButton;
    private javax.swing.JComboBox fromPDMCB;
    private javax.swing.JComboBox fromPDMRoleCB;
    private javax.swing.JLabel fromPDMRoleLabel;
    private javax.swing.JLabel fromPDMRoleLabel2;
    private javax.swing.JLabel fromRoleLabel;
    private javax.swing.JTextField fromRoleTF;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameTF;
    private javax.swing.JComboBox relationshipTypeCB;
    private javax.swing.JButton saveRelationshipButton;
    private javax.swing.JComboBox toPDMCB;
    private javax.swing.JComboBox toPDMRoleCB;
    private javax.swing.JLabel toPDMRoleLabel;
    private javax.swing.JLabel toPDMRoleLabel2;
    private javax.swing.JLabel toRoleLabel;
    private javax.swing.JTextField toRoleTF;
    private javax.swing.JLabel typeLabel;
    // End of variables declaration//GEN-END:variables

    private RelationshipType rel;
    private JDialog myDialog;
    boolean isNew = false;
    private PDMType currentPDM;
    private boolean updated=false;
    public boolean operationCanceled = false;
    //Object [] globalPDMNames;

    public void setDialog(JDialog dialog) {
        myDialog = dialog;
        myDialog.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
    }
    
    public JDialog getDialog() {
        return myDialog;
    }
    
    public void showMe() {
        if (myDialog != null)
            myDialog.setVisible(true);
    }
    
    public void hideMe() {
        if (myDialog != null)
            myDialog.setVisible(false);
    }
    
    public void setRelationship(PDMType pdm, RelationshipType rel, boolean isNew) {
        this.rel = rel;
        this.isNew = isNew;
        this.currentPDM = pdm;

        initFromPDMCB();
        initToPDMCB();
        initFromPDMRoleCB();
        initToPDMRoleCB();

        setRelationshipFields(rel);
    }

    private void setRelationshipFields(RelationshipType rel) {
        setRelationshipName(rel.getName());
        setType(rel.getType());
        setFromRole(rel.getFromRole());
        setToRole(rel.getToRole());

    }

    public void setPDM(PDMType currentPDM) {
        this.currentPDM = currentPDM;
        initToPDMCB();
        initFromPDMCB();
    }

    public PDMType getPDM () {
        return currentPDM;
    }

    public boolean isUpdated() {
        return updated;
    }

    public void setUpdated(boolean flag) {
        updated = flag;
    }

    public boolean isOperationCanceled() {
        return operationCanceled;
    }

    public void clear() {
        this.setName("");
        this.clearType();
        this.setFromRole("");
        this.setToRole("");
    }

    private void clearType() {
        this.relationshipTypeCB.setSelectedIndex(-1);
    }

    public void setType(String type) {
        if (type == null) {
            relationshipTypeCB.setSelectedIndex(-1);
            return;
        }
        relationshipTypeCB.setSelectedItem(type);
    }

    public String getType() {
        if (relationshipTypeCB.getSelectedItem() != null) {
            return relationshipTypeCB.getSelectedItem().toString();
        } else {
            return "";
        }
    }

    private void setFromRole (String from) {
        if (from != null) {
            fromRoleTF.setText(from);

            String pdmName = AcreStringUtil.getRoleNameBeginning(from);
            fromPDMCB.setSelectedItem(pdmName);

            String roleName = AcreStringUtil.getRoleNameEnding(from);
            if (roleName != null) {
                fromPDMRoleCB.setSelectedItem(roleName);
            }
        }

    }

    public String getFromRole() {
        return fromRoleTF.getText();
    }

    private void setToRole(String to) {
        if (to != null) {
            toRoleTF.setText(to);

            String pdmName = AcreStringUtil.getRoleNameBeginning(to);
            toPDMCB.setSelectedItem(pdmName);

            String roleName = AcreStringUtil.getRoleNameEnding(to);
            if (roleName != null) {
                toPDMRoleCB.setSelectedItem(roleName);
            }
        }

    }

    public String getToRole() {
        return toRoleTF.getText();
    }

    public String getRelationshipName() {
        return nameTF.getText();
    }

    private void setRelationshipName(String name) {
        if (name != null)
            nameTF.setText(name);
    }

    private void cancel() {
        hideMe();
        setUpdated(false);
        operationCanceled = true;
    }

    protected void save() {
        rel.setName(getRelationshipName());
        rel.setType(getType());
        rel.setFromRole(getFromRole());
        rel.setToRole(getToRole());

        try {

            AcreErrors errors = PDMValidator.getInstance().validateRelationship(rel);

            if (!errors.isEmpty()) {
                Main.showMainError(errors.toString(), "Relationship Validation Error");
                return;
            }

            if (isNew) {
                if (currentPDM.getRelationships() == null)
                    currentPDM.setRelationships(DAOFactory.getPatternRepository().createRelationships());

                currentPDM.getRelationships().getRelationship().add(rel);
            }

        } catch (Throwable t) {
            Main.showMainError(t.getMessage(), "Relationship Validation Error");
            return;
        }

        setUpdated(true);
        this.operationCanceled = false;
        this.hideMe();
    }

    public static void main(String args[]) {
        PDMRelationshipForm form = new PDMRelationshipForm();
        JFrame frame;
        frame = new JFrame("PDM Relationship");
        frame.getContentPane().add(form);
        frame.pack();
        frame.setVisible(true);
    }

    private void initFromPDMCB() {
        Object [] globalPDMNames = DAOFactory.getPatternRepository().getGlobalPatternModelNames().toArray();
        if (globalPDMNames != null) {
            javax.swing.DefaultComboBoxModel model = new javax.swing.DefaultComboBoxModel(globalPDMNames);
            fromPDMCB.setModel(model);
            fromPDMCB.setSelectedIndex(-1);
        }
        if (currentPDM != null) {
            fromPDMCB.setSelectedItem(currentPDM.getName());
        }
    }

    private void initFromPDMRoleCB() {
        if (fromPDMCB.getSelectedItem() != null) {
            String pdmName = (String) fromPDMCB.getSelectedItem();
            Object [] roles = DAOFactory.getPatternRepository().getGlobalPatternRoleNames(pdmName).toArray();
            if (roles != null) {
                javax.swing.DefaultComboBoxModel model = new javax.swing.DefaultComboBoxModel(roles);
                fromPDMRoleCB.setModel(model);
                fromPDMRoleCB.setSelectedIndex(-1);
            }
        }
    }

    private void initToPDMCB() {
        Object [] globalPDMNames = DAOFactory.getPatternRepository().getGlobalPatternModelNames().toArray();

        if (globalPDMNames != null) {
            javax.swing.DefaultComboBoxModel model = new javax.swing.DefaultComboBoxModel(globalPDMNames);
            toPDMCB.setModel(model);
            toPDMCB.setSelectedIndex(-1);
        }
        if (currentPDM != null) {
            toPDMCB.setSelectedItem(currentPDM.getName());
        }
    }

    private void initToPDMRoleCB() {
        if (toPDMCB.getSelectedItem() != null) {
            String pdmName = (String) toPDMCB.getSelectedItem();
            Object [] roles = DAOFactory.getPatternRepository().getGlobalPatternRoleNames(pdmName).toArray();
            if (roles != null) {
                javax.swing.DefaultComboBoxModel model = new javax.swing.DefaultComboBoxModel(roles);
                toPDMRoleCB.setModel(model);
                toPDMRoleCB.setSelectedIndex(-1);
            }
        }
    }

//    public void setPDMNames(List globalPDMNames) {
////        if (globalPDMNames == null)
////            return;
////
////        this.globalPDMNames = globalPDMNames.toArray();
//        initFromPDMCB();
//        initToPDMCB();
//    }

    private void setFromPDM() {
        if (fromPDMCB.getSelectedItem() != null) {
            initFromPDMRoleCB();
            setFromTextField();
        }
    }

    private void setFromTextField() {
        if (fromPDMCB.getSelectedItem() != null) {
            if (fromPDMRoleCB.getSelectedItem() != null)  {
                fromRoleTF.setText(fromPDMCB.getSelectedItem().toString() +
                        PDMXMLConstants.NAME_SEPARATOR +
                        fromPDMRoleCB.getSelectedItem().toString());
            } else {
                fromRoleTF.setText(fromPDMCB.getSelectedItem().toString());
            }
        }
    }

    private void setToTextField() {
        if (toPDMCB.getSelectedItem() != null) {
            if (toPDMRoleCB.getSelectedItem() != null)  {
                toRoleTF.setText(toPDMCB.getSelectedItem().toString() +
                        PDMXMLConstants.NAME_SEPARATOR +
                        toPDMRoleCB.getSelectedItem().toString());
            } else {
                toRoleTF.setText(toPDMCB.getSelectedItem().toString());
            }
        }
    }

    private void setToPDM() {
        if (toPDMCB.getSelectedItem() != null) {
            initToPDMRoleCB();
            setToTextField();
        }
    }


}
