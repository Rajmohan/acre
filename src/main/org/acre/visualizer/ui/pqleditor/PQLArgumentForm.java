/**
 *   Copyright 2004-2005 Sun Microsystems, Inc.
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */

package org.acre.visualizer.ui.pqleditor;

import org.acre.pdmqueries.QueryType;
import org.acre.dao.DAOFactory;
import org.acre.dao.PDMQueryValidator;
import org.acre.dao.PDMXMLConstants;
import org.acre.dao.PatternQueryRepository;
import org.acre.visualizer.ui.Main;

import javax.swing.JDialog;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author  Administrator
 */
public class PQLArgumentForm extends javax.swing.JPanel {
    
    /** Creates new form PQLArgumentForm */
    public PQLArgumentForm() {
        patternQueryRepository = DAOFactory.getPatternQueryRepository();
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        seqLabel = new javax.swing.JLabel();
        sequenceTF = new javax.swing.JTextField();
        nameLabel = new javax.swing.JLabel();
        nameTF = new javax.swing.JTextField();
        typeLabel = new javax.swing.JLabel();
        typeCB = new javax.swing.JComboBox();
        relatedQueryNameLabel = new javax.swing.JLabel();
        relatedQueryNameCB = new javax.swing.JComboBox();
        relatedVariableNameLabel = new javax.swing.JLabel();
        relatedVariableNameCB = new javax.swing.JComboBox();
        valueLabel = new javax.swing.JLabel();
        valueTF = new javax.swing.JTextField();
        descLabel = new javax.swing.JLabel();
        descScroll = new javax.swing.JScrollPane();
        descriptionTF = new javax.swing.JTextArea();
        buttonPanel = new javax.swing.JPanel();
        saveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        seqLabel.setText("Sequence #");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 10);
        add(seqLabel, gridBagConstraints);

        sequenceTF.setColumns(3);
        sequenceTF.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        add(sequenceTF, gridBagConstraints);

        nameLabel.setText("Argument Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 10);
        add(nameLabel, gridBagConstraints);

        nameTF.setColumns(15);
        nameTF.setToolTipText("Name for the argument, unique within a query");
        nameTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameTFActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        add(nameTF, gridBagConstraints);

        typeLabel.setText("Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 10);
        add(typeLabel, gridBagConstraints);

        initTypeCB();
        typeCB.setToolTipText("Argument Type");
        typeCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeCBActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        add(typeCB, gridBagConstraints);

        relatedQueryNameLabel.setText("Related Query Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 10);
        add(relatedQueryNameLabel, gridBagConstraints);

        initRelatedQueryNameCB();
        relatedQueryNameCB.setToolTipText("Related Query");
        relatedQueryNameCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                relatedQueryNameCBActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        add(relatedQueryNameCB, gridBagConstraints);

        relatedVariableNameLabel.setText("Related Return Variable Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 10);
        add(relatedVariableNameLabel, gridBagConstraints);

        initRelatedVariableNameCB();
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        add(relatedVariableNameCB, gridBagConstraints);

        valueLabel.setText("Value");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 10);
        add(valueLabel, gridBagConstraints);

        valueTF.setColumns(20);
        valueTF.setToolTipText("Value to be passed to this argument");
        valueTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                valueTFActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        add(valueTF, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        add(descLabel, gridBagConstraints);

        descScroll.setBorder(new javax.swing.border.TitledBorder("Description for this argument"));
        descriptionTF.setColumns(30);
        descriptionTF.setRows(3);
        descriptionTF.setToolTipText("Description for the Argument");
        descScroll.setViewportView(descriptionTF);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        add(descScroll, gridBagConstraints);

        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/acre/visualizer/ui/icons/buttons/SaveButton.gif")));
        saveButton.setMnemonic('S');
        saveButton.setToolTipText("Save Query Argument");
        saveButton.setBorderPainted(false);
        saveButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(saveButton);

        cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/acre/visualizer/ui/icons/buttons/CancelButton.gif")));
        cancelButton.setBorderPainted(false);
        cancelButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(cancelButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        add(buttonPanel, gridBagConstraints);

    }//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        cancel();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        save();
    }//GEN-LAST:event_saveButtonActionPerformed

    private void valueTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_valueTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_valueTFActionPerformed

    private void relatedQueryNameCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_relatedQueryNameCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_relatedQueryNameCBActionPerformed

    private void typeCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeCBActionPerformed
        checkTypeSelected();
    }//GEN-LAST:event_typeCBActionPerformed

    private void nameTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameTFActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel descLabel;
    private javax.swing.JScrollPane descScroll;
    private javax.swing.JTextArea descriptionTF;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameTF;
    private javax.swing.JComboBox relatedQueryNameCB;
    private javax.swing.JLabel relatedQueryNameLabel;
    private javax.swing.JComboBox relatedVariableNameCB;
    private javax.swing.JLabel relatedVariableNameLabel;
    private javax.swing.JButton saveButton;
    private javax.swing.JLabel seqLabel;
    private javax.swing.JTextField sequenceTF;
    private javax.swing.JComboBox typeCB;
    private javax.swing.JLabel typeLabel;
    private javax.swing.JLabel valueLabel;
    private javax.swing.JTextField valueTF;
    // End of variables declaration//GEN-END:variables


    JDialog myDialog;
    boolean operationCanceled = false;
    QueryType query;

    private PatternQueryRepository patternQueryRepository;

    private void initTypeCB() {
        Object [] values = PDMQueryValidator.getInstance().getQueryArgumentTypes();
        javax.swing.DefaultComboBoxModel model = new javax.swing.DefaultComboBoxModel(values);
        typeCB.setModel(model);
    }

    private void initRelatedQueryNameCB() {
        List queries = patternQueryRepository.getGlobalQueryList();
        ArrayList queryNames=new ArrayList();
        queryNames.add("");
        for (int i=0; i < queries.size(); i++) {
            queryNames.add(((QueryType)  queries.get(i)).getName());
        }
        Object values [] = queryNames.toArray();
        javax.swing.DefaultComboBoxModel model = new javax.swing.DefaultComboBoxModel(values);
        relatedQueryNameCB.setModel(model);

        // disable until the type is selected to be return variable
        disableRelated();
    }

    private void initRelatedVariableNameCB() {

    }

    private void disableRelated() {
        relatedQueryNameCB.setEnabled(false);
        relatedVariableNameCB.setEnabled(false);
        relatedQueryNameCB.setSelectedIndex(-1);
        relatedVariableNameCB.setSelectedIndex(-1);
    }

    private void enableRelated() {
        relatedQueryNameCB.setEnabled(true);
        relatedVariableNameCB.setEnabled(true);
    }

    private void checkTypeSelected() {
        if (typeCB.getSelectedIndex() == -1) {
            disableRelated();
            return;
        }

        if (typeCB.getSelectedItem().toString().equals(PDMXMLConstants.QUERY_ARGUMENT_TYPE_RETURN)) {
            enableRelated();
            return;
        }
        else {
            disableRelated();
        }

    }

    public void clear() {
        nameTF.setText("");
        descriptionTF.setText("");
        valueTF.setText("");
        relatedQueryNameCB.setSelectedIndex(-1);
        relatedVariableNameCB.setSelectedIndex(-1);
        sequenceTF.setText("");
        typeCB.setSelectedIndex(-1);
        operationCanceled=false;

    }

    public void showMe() {
        if (myDialog != null)
            myDialog.setVisible(true);
    }

    public void hideMe() {
        if (myDialog != null)
            myDialog.setVisible(false);
    }

    public JDialog getDialog() {
        return myDialog;
    }

    public void setDialog(JDialog myDialog) {
        this.myDialog = myDialog;
        myDialog.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
    }

    public String getDescription() {
        return descriptionTF.getText();
    }

    public String getArgumentName() {
        return nameTF.getText();
    }

    public String getRelatedQueryName() {
        if (relatedQueryNameCB.getSelectedIndex() != -1)
            return relatedQueryNameCB.getSelectedItem().toString();
        else
            return "";
    }

    public String getRelatedVariableName() {
        if (relatedVariableNameCB.getSelectedIndex() != -1)
            return relatedVariableNameCB.getSelectedItem().toString();
        else
            return "";
    }

    public String getSequence() {
        return sequenceTF.getText();
    }

    public String getType() {
        if (typeCB.getSelectedIndex() != -1)
            return typeCB.getSelectedItem().toString();
        else
            return "";
    }

    public String getValue() {
        return valueTF.getText();
    }

    public boolean operationCanceled() {
        return operationCanceled;
    }
    
    private void initSequence() {         
        sequenceTF.setText("");
    }

    public void setSequence(String s) {
        sequenceTF.setText(s);
    }

    public void setQuery(QueryType query) {
        this.query = query;
    }

    public QueryType getQuery() {
        return query;
    }

    private void save() {
        if (! PDMQueryValidator.argumentExists(query, getArgumentName())) {
            operationCanceled = false;
            hideMe();
        } else {
            Main.showMainError("Argument already exists for same name.\n" +
                    " Cannot create duplicate argument.", "Save Query Argument");
            return;
        }
    }

    private void cancel() {
        operationCanceled = true;
        hideMe();
    }
}
