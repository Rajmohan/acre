/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.acre.lang.node;

import java.util.*;
import org.acre.lang.analysis.*;

public final class AEnumType extends PType
{
    private TEnum _enum_;
    private TIdentifier _identifier_;
    private PTypeX _typeX_;

    public AEnumType()
    {
    }

    public AEnumType(
        TEnum _enum_,
        TIdentifier _identifier_,
        PTypeX _typeX_)
    {
        setEnum(_enum_);

        setIdentifier(_identifier_);

        setTypeX(_typeX_);

    }
    public Object clone()
    {
        return new AEnumType(
            (TEnum) cloneNode(_enum_),
            (TIdentifier) cloneNode(_identifier_),
            (PTypeX) cloneNode(_typeX_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAEnumType(this);
    }

    public TEnum getEnum()
    {
        return _enum_;
    }

    public void setEnum(TEnum node)
    {
        if(_enum_ != null)
        {
            _enum_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _enum_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return _identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _identifier_ = node;
    }

    public PTypeX getTypeX()
    {
        return _typeX_;
    }

    public void setTypeX(PTypeX node)
    {
        if(_typeX_ != null)
        {
            _typeX_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _typeX_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_enum_)
            + toString(_identifier_)
            + toString(_typeX_);
    }

    void removeChild(Node child)
    {
        if(_enum_ == child)
        {
            _enum_ = null;
            return;
        }

        if(_identifier_ == child)
        {
            _identifier_ = null;
            return;
        }

        if(_typeX_ == child)
        {
            _typeX_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_enum_ == oldChild)
        {
            setEnum((TEnum) newChild);
            return;
        }

        if(_identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(_typeX_ == oldChild)
        {
            setTypeX((PTypeX) newChild);
            return;
        }

    }
}
