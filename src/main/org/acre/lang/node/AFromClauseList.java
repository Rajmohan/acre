/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.acre.lang.node;

import java.util.*;
import org.acre.lang.analysis.*;

public final class AFromClauseList extends PFromClauseList
{
    private PFromClauseList _fromClauseList_;
    private TComma _comma_;
    private PIteratorDef _iteratorDef_;

    public AFromClauseList()
    {
    }

    public AFromClauseList(
        PFromClauseList _fromClauseList_,
        TComma _comma_,
        PIteratorDef _iteratorDef_)
    {
        setFromClauseList(_fromClauseList_);

        setComma(_comma_);

        setIteratorDef(_iteratorDef_);

    }
    public Object clone()
    {
        return new AFromClauseList(
            (PFromClauseList) cloneNode(_fromClauseList_),
            (TComma) cloneNode(_comma_),
            (PIteratorDef) cloneNode(_iteratorDef_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFromClauseList(this);
    }

    public PFromClauseList getFromClauseList()
    {
        return _fromClauseList_;
    }

    public void setFromClauseList(PFromClauseList node)
    {
        if(_fromClauseList_ != null)
        {
            _fromClauseList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _fromClauseList_ = node;
    }

    public TComma getComma()
    {
        return _comma_;
    }

    public void setComma(TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _comma_ = node;
    }

    public PIteratorDef getIteratorDef()
    {
        return _iteratorDef_;
    }

    public void setIteratorDef(PIteratorDef node)
    {
        if(_iteratorDef_ != null)
        {
            _iteratorDef_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _iteratorDef_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_fromClauseList_)
            + toString(_comma_)
            + toString(_iteratorDef_);
    }

    void removeChild(Node child)
    {
        if(_fromClauseList_ == child)
        {
            _fromClauseList_ = null;
            return;
        }

        if(_comma_ == child)
        {
            _comma_ = null;
            return;
        }

        if(_iteratorDef_ == child)
        {
            _iteratorDef_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_fromClauseList_ == oldChild)
        {
            setFromClauseList((PFromClauseList) newChild);
            return;
        }

        if(_comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(_iteratorDef_ == oldChild)
        {
            setIteratorDef((PIteratorDef) newChild);
            return;
        }

    }
}
