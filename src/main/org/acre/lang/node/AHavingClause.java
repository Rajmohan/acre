/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.acre.lang.node;

import java.util.*;
import org.acre.lang.analysis.*;

public final class AHavingClause extends PHavingClause
{
    private THaving _having_;
    private PExpr _expr_;

    public AHavingClause()
    {
    }

    public AHavingClause(
        THaving _having_,
        PExpr _expr_)
    {
        setHaving(_having_);

        setExpr(_expr_);

    }
    public Object clone()
    {
        return new AHavingClause(
            (THaving) cloneNode(_having_),
            (PExpr) cloneNode(_expr_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAHavingClause(this);
    }

    public THaving getHaving()
    {
        return _having_;
    }

    public void setHaving(THaving node)
    {
        if(_having_ != null)
        {
            _having_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _having_ = node;
    }

    public PExpr getExpr()
    {
        return _expr_;
    }

    public void setExpr(PExpr node)
    {
        if(_expr_ != null)
        {
            _expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _expr_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_having_)
            + toString(_expr_);
    }

    void removeChild(Node child)
    {
        if(_having_ == child)
        {
            _having_ = null;
            return;
        }

        if(_expr_ == child)
        {
            _expr_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_having_ == oldChild)
        {
            setHaving((THaving) newChild);
            return;
        }

        if(_expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

    }
}
