/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.acre.lang.node;

import java.util.*;
import org.acre.lang.analysis.*;

public final class AUndefinedLiteral extends PLiteral
{
    private TUndefined _undefined_;

    public AUndefinedLiteral()
    {
    }

    public AUndefinedLiteral(
        TUndefined _undefined_)
    {
        setUndefined(_undefined_);

    }
    public Object clone()
    {
        return new AUndefinedLiteral(
            (TUndefined) cloneNode(_undefined_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAUndefinedLiteral(this);
    }

    public TUndefined getUndefined()
    {
        return _undefined_;
    }

    public void setUndefined(TUndefined node)
    {
        if(_undefined_ != null)
        {
            _undefined_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _undefined_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_undefined_);
    }

    void removeChild(Node child)
    {
        if(_undefined_ == child)
        {
            _undefined_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_undefined_ == oldChild)
        {
            setUndefined((TUndefined) newChild);
            return;
        }

    }
}
