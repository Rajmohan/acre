/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.acre.lang.node;

import java.util.*;
import org.acre.lang.analysis.*;

public final class ALastTmpRelationalExpr extends PTmpRelationalExpr
{
    private PTmpRelationalExpr _tmpRelationalExpr_;
    private PCompareToken _compareToken_;
    private PCompositePredicate _compositePredicate_;
    private TIdentifier _identifier_;

    public ALastTmpRelationalExpr()
    {
    }

    public ALastTmpRelationalExpr(
        PTmpRelationalExpr _tmpRelationalExpr_,
        PCompareToken _compareToken_,
        PCompositePredicate _compositePredicate_,
        TIdentifier _identifier_)
    {
        setTmpRelationalExpr(_tmpRelationalExpr_);

        setCompareToken(_compareToken_);

        setCompositePredicate(_compositePredicate_);

        setIdentifier(_identifier_);

    }
    public Object clone()
    {
        return new ALastTmpRelationalExpr(
            (PTmpRelationalExpr) cloneNode(_tmpRelationalExpr_),
            (PCompareToken) cloneNode(_compareToken_),
            (PCompositePredicate) cloneNode(_compositePredicate_),
            (TIdentifier) cloneNode(_identifier_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALastTmpRelationalExpr(this);
    }

    public PTmpRelationalExpr getTmpRelationalExpr()
    {
        return _tmpRelationalExpr_;
    }

    public void setTmpRelationalExpr(PTmpRelationalExpr node)
    {
        if(_tmpRelationalExpr_ != null)
        {
            _tmpRelationalExpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _tmpRelationalExpr_ = node;
    }

    public PCompareToken getCompareToken()
    {
        return _compareToken_;
    }

    public void setCompareToken(PCompareToken node)
    {
        if(_compareToken_ != null)
        {
            _compareToken_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _compareToken_ = node;
    }

    public PCompositePredicate getCompositePredicate()
    {
        return _compositePredicate_;
    }

    public void setCompositePredicate(PCompositePredicate node)
    {
        if(_compositePredicate_ != null)
        {
            _compositePredicate_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _compositePredicate_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return _identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _identifier_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_tmpRelationalExpr_)
            + toString(_compareToken_)
            + toString(_compositePredicate_)
            + toString(_identifier_);
    }

    void removeChild(Node child)
    {
        if(_tmpRelationalExpr_ == child)
        {
            _tmpRelationalExpr_ = null;
            return;
        }

        if(_compareToken_ == child)
        {
            _compareToken_ = null;
            return;
        }

        if(_compositePredicate_ == child)
        {
            _compositePredicate_ = null;
            return;
        }

        if(_identifier_ == child)
        {
            _identifier_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_tmpRelationalExpr_ == oldChild)
        {
            setTmpRelationalExpr((PTmpRelationalExpr) newChild);
            return;
        }

        if(_compareToken_ == oldChild)
        {
            setCompareToken((PCompareToken) newChild);
            return;
        }

        if(_compositePredicate_ == oldChild)
        {
            setCompositePredicate((PCompositePredicate) newChild);
            return;
        }

        if(_identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

    }
}
