/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.acre.lang.node;

import java.util.*;
import org.acre.lang.analysis.*;

public final class AProjectionList extends PProjectionList
{
    private PProjectionList _projectionList_;
    private TComma _comma_;
    private PProjection _projection_;

    public AProjectionList()
    {
    }

    public AProjectionList(
        PProjectionList _projectionList_,
        TComma _comma_,
        PProjection _projection_)
    {
        setProjectionList(_projectionList_);

        setComma(_comma_);

        setProjection(_projection_);

    }
    public Object clone()
    {
        return new AProjectionList(
            (PProjectionList) cloneNode(_projectionList_),
            (TComma) cloneNode(_comma_),
            (PProjection) cloneNode(_projection_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAProjectionList(this);
    }

    public PProjectionList getProjectionList()
    {
        return _projectionList_;
    }

    public void setProjectionList(PProjectionList node)
    {
        if(_projectionList_ != null)
        {
            _projectionList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _projectionList_ = node;
    }

    public TComma getComma()
    {
        return _comma_;
    }

    public void setComma(TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _comma_ = node;
    }

    public PProjection getProjection()
    {
        return _projection_;
    }

    public void setProjection(PProjection node)
    {
        if(_projection_ != null)
        {
            _projection_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _projection_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_projectionList_)
            + toString(_comma_)
            + toString(_projection_);
    }

    void removeChild(Node child)
    {
        if(_projectionList_ == child)
        {
            _projectionList_ = null;
            return;
        }

        if(_comma_ == child)
        {
            _comma_ = null;
            return;
        }

        if(_projection_ == child)
        {
            _projection_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_projectionList_ == oldChild)
        {
            setProjectionList((PProjectionList) newChild);
            return;
        }

        if(_comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(_projection_ == oldChild)
        {
            setProjection((PProjection) newChild);
            return;
        }

    }
}
