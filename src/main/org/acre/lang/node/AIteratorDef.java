/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.acre.lang.node;

import java.util.*;
import org.acre.lang.analysis.*;

public final class AIteratorDef extends PIteratorDef
{
    private PExpr _expr_;
    private PAsIdentifierOptAs _asIdentifierOptAs_;

    public AIteratorDef()
    {
    }

    public AIteratorDef(
        PExpr _expr_,
        PAsIdentifierOptAs _asIdentifierOptAs_)
    {
        setExpr(_expr_);

        setAsIdentifierOptAs(_asIdentifierOptAs_);

    }
    public Object clone()
    {
        return new AIteratorDef(
            (PExpr) cloneNode(_expr_),
            (PAsIdentifierOptAs) cloneNode(_asIdentifierOptAs_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIteratorDef(this);
    }

    public PExpr getExpr()
    {
        return _expr_;
    }

    public void setExpr(PExpr node)
    {
        if(_expr_ != null)
        {
            _expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _expr_ = node;
    }

    public PAsIdentifierOptAs getAsIdentifierOptAs()
    {
        return _asIdentifierOptAs_;
    }

    public void setAsIdentifierOptAs(PAsIdentifierOptAs node)
    {
        if(_asIdentifierOptAs_ != null)
        {
            _asIdentifierOptAs_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _asIdentifierOptAs_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_expr_)
            + toString(_asIdentifierOptAs_);
    }

    void removeChild(Node child)
    {
        if(_expr_ == child)
        {
            _expr_ = null;
            return;
        }

        if(_asIdentifierOptAs_ == child)
        {
            _asIdentifierOptAs_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        if(_asIdentifierOptAs_ == oldChild)
        {
            setAsIdentifierOptAs((PAsIdentifierOptAs) newChild);
            return;
        }

    }
}
