/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.acre.lang.node;

import java.util.*;
import org.acre.lang.analysis.*;

public final class ASortCriterion extends PSortCriterion
{
    private PExpr _expr_;
    private PSortCriterionT _sortCriterionT_;

    public ASortCriterion()
    {
    }

    public ASortCriterion(
        PExpr _expr_,
        PSortCriterionT _sortCriterionT_)
    {
        setExpr(_expr_);

        setSortCriterionT(_sortCriterionT_);

    }
    public Object clone()
    {
        return new ASortCriterion(
            (PExpr) cloneNode(_expr_),
            (PSortCriterionT) cloneNode(_sortCriterionT_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASortCriterion(this);
    }

    public PExpr getExpr()
    {
        return _expr_;
    }

    public void setExpr(PExpr node)
    {
        if(_expr_ != null)
        {
            _expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _expr_ = node;
    }

    public PSortCriterionT getSortCriterionT()
    {
        return _sortCriterionT_;
    }

    public void setSortCriterionT(PSortCriterionT node)
    {
        if(_sortCriterionT_ != null)
        {
            _sortCriterionT_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _sortCriterionT_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_expr_)
            + toString(_sortCriterionT_);
    }

    void removeChild(Node child)
    {
        if(_expr_ == child)
        {
            _expr_ = null;
            return;
        }

        if(_sortCriterionT_ == child)
        {
            _sortCriterionT_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        if(_sortCriterionT_ == oldChild)
        {
            setSortCriterionT((PSortCriterionT) newChild);
            return;
        }

    }
}
