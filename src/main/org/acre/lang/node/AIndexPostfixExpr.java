/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.acre.lang.node;

import java.util.*;
import org.acre.lang.analysis.*;

public final class AIndexPostfixExpr extends PPostfixExpr
{
    private PPostfixExpr _postfixExpr_;
    private TSqBracketL _sqBracketL_;
    private PIndex _index_;
    private TSqBracketR _sqBracketR_;

    public AIndexPostfixExpr()
    {
    }

    public AIndexPostfixExpr(
        PPostfixExpr _postfixExpr_,
        TSqBracketL _sqBracketL_,
        PIndex _index_,
        TSqBracketR _sqBracketR_)
    {
        setPostfixExpr(_postfixExpr_);

        setSqBracketL(_sqBracketL_);

        setIndex(_index_);

        setSqBracketR(_sqBracketR_);

    }
    public Object clone()
    {
        return new AIndexPostfixExpr(
            (PPostfixExpr) cloneNode(_postfixExpr_),
            (TSqBracketL) cloneNode(_sqBracketL_),
            (PIndex) cloneNode(_index_),
            (TSqBracketR) cloneNode(_sqBracketR_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIndexPostfixExpr(this);
    }

    public PPostfixExpr getPostfixExpr()
    {
        return _postfixExpr_;
    }

    public void setPostfixExpr(PPostfixExpr node)
    {
        if(_postfixExpr_ != null)
        {
            _postfixExpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _postfixExpr_ = node;
    }

    public TSqBracketL getSqBracketL()
    {
        return _sqBracketL_;
    }

    public void setSqBracketL(TSqBracketL node)
    {
        if(_sqBracketL_ != null)
        {
            _sqBracketL_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _sqBracketL_ = node;
    }

    public PIndex getIndex()
    {
        return _index_;
    }

    public void setIndex(PIndex node)
    {
        if(_index_ != null)
        {
            _index_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _index_ = node;
    }

    public TSqBracketR getSqBracketR()
    {
        return _sqBracketR_;
    }

    public void setSqBracketR(TSqBracketR node)
    {
        if(_sqBracketR_ != null)
        {
            _sqBracketR_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _sqBracketR_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_postfixExpr_)
            + toString(_sqBracketL_)
            + toString(_index_)
            + toString(_sqBracketR_);
    }

    void removeChild(Node child)
    {
        if(_postfixExpr_ == child)
        {
            _postfixExpr_ = null;
            return;
        }

        if(_sqBracketL_ == child)
        {
            _sqBracketL_ = null;
            return;
        }

        if(_index_ == child)
        {
            _index_ = null;
            return;
        }

        if(_sqBracketR_ == child)
        {
            _sqBracketR_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_postfixExpr_ == oldChild)
        {
            setPostfixExpr((PPostfixExpr) newChild);
            return;
        }

        if(_sqBracketL_ == oldChild)
        {
            setSqBracketL((TSqBracketL) newChild);
            return;
        }

        if(_index_ == oldChild)
        {
            setIndex((PIndex) newChild);
            return;
        }

        if(_sqBracketR_ == oldChild)
        {
            setSqBracketR((TSqBracketR) newChild);
            return;
        }

    }
}
