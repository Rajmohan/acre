/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.acre.lang.node;

import java.util.*;
import org.acre.lang.analysis.*;

public final class AListTmpInExpr extends PTmpInExpr
{
    private TIdentifier _identifier_;
    private TNot _not_;
    private TIn _in_;
    private TBracketL _bracketL_;
    private PUnaryExpr _unaryExpr_;
    private final LinkedList _inlist_ = new TypedLinkedList(new Inlist_Cast());
    private TBracketR _bracketR_;

    public AListTmpInExpr()
    {
    }

    public AListTmpInExpr(
        TIdentifier _identifier_,
        TNot _not_,
        TIn _in_,
        TBracketL _bracketL_,
        PUnaryExpr _unaryExpr_,
        List _inlist_,
        TBracketR _bracketR_)
    {
        setIdentifier(_identifier_);

        setNot(_not_);

        setIn(_in_);

        setBracketL(_bracketL_);

        setUnaryExpr(_unaryExpr_);

        {
            this._inlist_.clear();
            this._inlist_.addAll(_inlist_);
        }

        setBracketR(_bracketR_);

    }

    public AListTmpInExpr(
        TIdentifier _identifier_,
        TNot _not_,
        TIn _in_,
        TBracketL _bracketL_,
        PUnaryExpr _unaryExpr_,
        XPInlist _inlist_,
        TBracketR _bracketR_)
    {
        setIdentifier(_identifier_);

        setNot(_not_);

        setIn(_in_);

        setBracketL(_bracketL_);

        setUnaryExpr(_unaryExpr_);

        if(_inlist_ != null)
        {
            while(_inlist_ instanceof X1PInlist)
            {
                this._inlist_.addFirst(((X1PInlist) _inlist_).getPInlist());
                _inlist_ = ((X1PInlist) _inlist_).getXPInlist();
            }
            this._inlist_.addFirst(((X2PInlist) _inlist_).getPInlist());
        }

        setBracketR(_bracketR_);

    }
    public Object clone()
    {
        return new AListTmpInExpr(
            (TIdentifier) cloneNode(_identifier_),
            (TNot) cloneNode(_not_),
            (TIn) cloneNode(_in_),
            (TBracketL) cloneNode(_bracketL_),
            (PUnaryExpr) cloneNode(_unaryExpr_),
            cloneList(_inlist_),
            (TBracketR) cloneNode(_bracketR_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAListTmpInExpr(this);
    }

    public TIdentifier getIdentifier()
    {
        return _identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _identifier_ = node;
    }

    public TNot getNot()
    {
        return _not_;
    }

    public void setNot(TNot node)
    {
        if(_not_ != null)
        {
            _not_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _not_ = node;
    }

    public TIn getIn()
    {
        return _in_;
    }

    public void setIn(TIn node)
    {
        if(_in_ != null)
        {
            _in_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _in_ = node;
    }

    public TBracketL getBracketL()
    {
        return _bracketL_;
    }

    public void setBracketL(TBracketL node)
    {
        if(_bracketL_ != null)
        {
            _bracketL_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _bracketL_ = node;
    }

    public PUnaryExpr getUnaryExpr()
    {
        return _unaryExpr_;
    }

    public void setUnaryExpr(PUnaryExpr node)
    {
        if(_unaryExpr_ != null)
        {
            _unaryExpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _unaryExpr_ = node;
    }

    public LinkedList getInlist()
    {
        return _inlist_;
    }

    public void setInlist(List list)
    {
        _inlist_.clear();
        _inlist_.addAll(list);
    }

    public TBracketR getBracketR()
    {
        return _bracketR_;
    }

    public void setBracketR(TBracketR node)
    {
        if(_bracketR_ != null)
        {
            _bracketR_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _bracketR_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_identifier_)
            + toString(_not_)
            + toString(_in_)
            + toString(_bracketL_)
            + toString(_unaryExpr_)
            + toString(_inlist_)
            + toString(_bracketR_);
    }

    void removeChild(Node child)
    {
        if(_identifier_ == child)
        {
            _identifier_ = null;
            return;
        }

        if(_not_ == child)
        {
            _not_ = null;
            return;
        }

        if(_in_ == child)
        {
            _in_ = null;
            return;
        }

        if(_bracketL_ == child)
        {
            _bracketL_ = null;
            return;
        }

        if(_unaryExpr_ == child)
        {
            _unaryExpr_ = null;
            return;
        }

        if(_inlist_.remove(child))
        {
            return;
        }

        if(_bracketR_ == child)
        {
            _bracketR_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(_not_ == oldChild)
        {
            setNot((TNot) newChild);
            return;
        }

        if(_in_ == oldChild)
        {
            setIn((TIn) newChild);
            return;
        }

        if(_bracketL_ == oldChild)
        {
            setBracketL((TBracketL) newChild);
            return;
        }

        if(_unaryExpr_ == oldChild)
        {
            setUnaryExpr((PUnaryExpr) newChild);
            return;
        }

        for(ListIterator i = _inlist_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(_bracketR_ == oldChild)
        {
            setBracketR((TBracketR) newChild);
            return;
        }

    }

    private class Inlist_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PInlist node = (PInlist) o;

            if((node.parent() != null) &&
                (node.parent() != AListTmpInExpr.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AListTmpInExpr.this))
            {
                node.parent(AListTmpInExpr.this);
            }

            return node;
        }
    }
}
