/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.acre.lang.node;

import java.util.*;
import org.acre.lang.analysis.*;

public final class ATmpHavingClause extends PHavingClause
{
    private THaving _having_;
    private PExprRestricted _exprRestricted_;

    public ATmpHavingClause()
    {
    }

    public ATmpHavingClause(
        THaving _having_,
        PExprRestricted _exprRestricted_)
    {
        setHaving(_having_);

        setExprRestricted(_exprRestricted_);

    }
    public Object clone()
    {
        return new ATmpHavingClause(
            (THaving) cloneNode(_having_),
            (PExprRestricted) cloneNode(_exprRestricted_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATmpHavingClause(this);
    }

    public THaving getHaving()
    {
        return _having_;
    }

    public void setHaving(THaving node)
    {
        if(_having_ != null)
        {
            _having_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _having_ = node;
    }

    public PExprRestricted getExprRestricted()
    {
        return _exprRestricted_;
    }

    public void setExprRestricted(PExprRestricted node)
    {
        if(_exprRestricted_ != null)
        {
            _exprRestricted_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _exprRestricted_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_having_)
            + toString(_exprRestricted_);
    }

    void removeChild(Node child)
    {
        if(_having_ == child)
        {
            _having_ = null;
            return;
        }

        if(_exprRestricted_ == child)
        {
            _exprRestricted_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_having_ == oldChild)
        {
            setHaving((THaving) newChild);
            return;
        }

        if(_exprRestricted_ == oldChild)
        {
            setExprRestricted((PExprRestricted) newChild);
            return;
        }

    }
}
