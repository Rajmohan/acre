/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.acre.lang.node;

import java.util.*;
import org.acre.lang.analysis.*;

public final class AWhereClause extends PWhereClause
{
    private TWhere _where_;
    private TAll _all_;
    private PExpr _expr_;

    public AWhereClause()
    {
    }

    public AWhereClause(
        TWhere _where_,
        TAll _all_,
        PExpr _expr_)
    {
        setWhere(_where_);

        setAll(_all_);

        setExpr(_expr_);

    }
    public Object clone()
    {
        return new AWhereClause(
            (TWhere) cloneNode(_where_),
            (TAll) cloneNode(_all_),
            (PExpr) cloneNode(_expr_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAWhereClause(this);
    }

    public TWhere getWhere()
    {
        return _where_;
    }

    public void setWhere(TWhere node)
    {
        if(_where_ != null)
        {
            _where_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _where_ = node;
    }

    public TAll getAll()
    {
        return _all_;
    }

    public void setAll(TAll node)
    {
        if(_all_ != null)
        {
            _all_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _all_ = node;
    }

    public PExpr getExpr()
    {
        return _expr_;
    }

    public void setExpr(PExpr node)
    {
        if(_expr_ != null)
        {
            _expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _expr_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_where_)
            + toString(_all_)
            + toString(_expr_);
    }

    void removeChild(Node child)
    {
        if(_where_ == child)
        {
            _where_ = null;
            return;
        }

        if(_all_ == child)
        {
            _all_ = null;
            return;
        }

        if(_expr_ == child)
        {
            _expr_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_where_ == oldChild)
        {
            setWhere((TWhere) newChild);
            return;
        }

        if(_all_ == oldChild)
        {
            setAll((TAll) newChild);
            return;
        }

        if(_expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

    }
}
