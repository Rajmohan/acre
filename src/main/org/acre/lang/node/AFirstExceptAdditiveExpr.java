/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.acre.lang.node;

import java.util.*;
import org.acre.lang.analysis.*;

public final class AFirstExceptAdditiveExpr extends PAdditiveExpr
{
    private TIdentifier _identifier_;
    private TExcept _except_;
    private PMultiplicativeExpr _multiplicativeExpr_;

    public AFirstExceptAdditiveExpr()
    {
    }

    public AFirstExceptAdditiveExpr(
        TIdentifier _identifier_,
        TExcept _except_,
        PMultiplicativeExpr _multiplicativeExpr_)
    {
        setIdentifier(_identifier_);

        setExcept(_except_);

        setMultiplicativeExpr(_multiplicativeExpr_);

    }
    public Object clone()
    {
        return new AFirstExceptAdditiveExpr(
            (TIdentifier) cloneNode(_identifier_),
            (TExcept) cloneNode(_except_),
            (PMultiplicativeExpr) cloneNode(_multiplicativeExpr_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFirstExceptAdditiveExpr(this);
    }

    public TIdentifier getIdentifier()
    {
        return _identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _identifier_ = node;
    }

    public TExcept getExcept()
    {
        return _except_;
    }

    public void setExcept(TExcept node)
    {
        if(_except_ != null)
        {
            _except_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _except_ = node;
    }

    public PMultiplicativeExpr getMultiplicativeExpr()
    {
        return _multiplicativeExpr_;
    }

    public void setMultiplicativeExpr(PMultiplicativeExpr node)
    {
        if(_multiplicativeExpr_ != null)
        {
            _multiplicativeExpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _multiplicativeExpr_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_identifier_)
            + toString(_except_)
            + toString(_multiplicativeExpr_);
    }

    void removeChild(Node child)
    {
        if(_identifier_ == child)
        {
            _identifier_ = null;
            return;
        }

        if(_except_ == child)
        {
            _except_ = null;
            return;
        }

        if(_multiplicativeExpr_ == child)
        {
            _multiplicativeExpr_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(_except_ == oldChild)
        {
            setExcept((TExcept) newChild);
            return;
        }

        if(_multiplicativeExpr_ == oldChild)
        {
            setMultiplicativeExpr((PMultiplicativeExpr) newChild);
            return;
        }

    }
}
