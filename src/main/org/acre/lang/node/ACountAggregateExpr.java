/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.acre.lang.node;

import java.util.*;
import org.acre.lang.analysis.*;

public final class ACountAggregateExpr extends PAggregateExpr
{
    private TCount _count_;
    private TBracketL _bracketL_;
    private PQueryStar _queryStar_;
    private TBracketR _bracketR_;

    public ACountAggregateExpr()
    {
    }

    public ACountAggregateExpr(
        TCount _count_,
        TBracketL _bracketL_,
        PQueryStar _queryStar_,
        TBracketR _bracketR_)
    {
        setCount(_count_);

        setBracketL(_bracketL_);

        setQueryStar(_queryStar_);

        setBracketR(_bracketR_);

    }
    public Object clone()
    {
        return new ACountAggregateExpr(
            (TCount) cloneNode(_count_),
            (TBracketL) cloneNode(_bracketL_),
            (PQueryStar) cloneNode(_queryStar_),
            (TBracketR) cloneNode(_bracketR_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACountAggregateExpr(this);
    }

    public TCount getCount()
    {
        return _count_;
    }

    public void setCount(TCount node)
    {
        if(_count_ != null)
        {
            _count_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _count_ = node;
    }

    public TBracketL getBracketL()
    {
        return _bracketL_;
    }

    public void setBracketL(TBracketL node)
    {
        if(_bracketL_ != null)
        {
            _bracketL_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _bracketL_ = node;
    }

    public PQueryStar getQueryStar()
    {
        return _queryStar_;
    }

    public void setQueryStar(PQueryStar node)
    {
        if(_queryStar_ != null)
        {
            _queryStar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _queryStar_ = node;
    }

    public TBracketR getBracketR()
    {
        return _bracketR_;
    }

    public void setBracketR(TBracketR node)
    {
        if(_bracketR_ != null)
        {
            _bracketR_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _bracketR_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_count_)
            + toString(_bracketL_)
            + toString(_queryStar_)
            + toString(_bracketR_);
    }

    void removeChild(Node child)
    {
        if(_count_ == child)
        {
            _count_ = null;
            return;
        }

        if(_bracketL_ == child)
        {
            _bracketL_ = null;
            return;
        }

        if(_queryStar_ == child)
        {
            _queryStar_ = null;
            return;
        }

        if(_bracketR_ == child)
        {
            _bracketR_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_count_ == oldChild)
        {
            setCount((TCount) newChild);
            return;
        }

        if(_bracketL_ == oldChild)
        {
            setBracketL((TBracketL) newChild);
            return;
        }

        if(_queryStar_ == oldChild)
        {
            setQueryStar((PQueryStar) newChild);
            return;
        }

        if(_bracketR_ == oldChild)
        {
            setBracketR((TBracketR) newChild);
            return;
        }

    }
}
