/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.acre.lang.node;

import java.util.*;
import org.acre.lang.analysis.*;

public final class AExistsExpr extends PExpr
{
    private TExists _exists_;
    private PInClause _inClause_;
    private TColon _colon_;
    private PExpr _expr_;

    public AExistsExpr()
    {
    }

    public AExistsExpr(
        TExists _exists_,
        PInClause _inClause_,
        TColon _colon_,
        PExpr _expr_)
    {
        setExists(_exists_);

        setInClause(_inClause_);

        setColon(_colon_);

        setExpr(_expr_);

    }
    public Object clone()
    {
        return new AExistsExpr(
            (TExists) cloneNode(_exists_),
            (PInClause) cloneNode(_inClause_),
            (TColon) cloneNode(_colon_),
            (PExpr) cloneNode(_expr_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExistsExpr(this);
    }

    public TExists getExists()
    {
        return _exists_;
    }

    public void setExists(TExists node)
    {
        if(_exists_ != null)
        {
            _exists_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _exists_ = node;
    }

    public PInClause getInClause()
    {
        return _inClause_;
    }

    public void setInClause(PInClause node)
    {
        if(_inClause_ != null)
        {
            _inClause_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _inClause_ = node;
    }

    public TColon getColon()
    {
        return _colon_;
    }

    public void setColon(TColon node)
    {
        if(_colon_ != null)
        {
            _colon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _colon_ = node;
    }

    public PExpr getExpr()
    {
        return _expr_;
    }

    public void setExpr(PExpr node)
    {
        if(_expr_ != null)
        {
            _expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _expr_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_exists_)
            + toString(_inClause_)
            + toString(_colon_)
            + toString(_expr_);
    }

    void removeChild(Node child)
    {
        if(_exists_ == child)
        {
            _exists_ = null;
            return;
        }

        if(_inClause_ == child)
        {
            _inClause_ = null;
            return;
        }

        if(_colon_ == child)
        {
            _colon_ = null;
            return;
        }

        if(_expr_ == child)
        {
            _expr_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_exists_ == oldChild)
        {
            setExists((TExists) newChild);
            return;
        }

        if(_inClause_ == oldChild)
        {
            setInClause((PInClause) newChild);
            return;
        }

        if(_colon_ == oldChild)
        {
            setColon((TColon) newChild);
            return;
        }

        if(_expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

    }
}
