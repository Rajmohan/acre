/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.acre.lang.node;

import java.util.*;
import org.acre.lang.analysis.*;

public final class ADefineQuery extends PDefineQuery
{
    private TDefine _define_;
    private TTquery _tquery_;
    private TIdentifier _identifier_;
    private PDefineQueryX _defineQueryX_;
    private TAs _as_;
    private PQuery _query_;

    public ADefineQuery()
    {
    }

    public ADefineQuery(
        TDefine _define_,
        TTquery _tquery_,
        TIdentifier _identifier_,
        PDefineQueryX _defineQueryX_,
        TAs _as_,
        PQuery _query_)
    {
        setDefine(_define_);

        setTquery(_tquery_);

        setIdentifier(_identifier_);

        setDefineQueryX(_defineQueryX_);

        setAs(_as_);

        setQuery(_query_);

    }
    public Object clone()
    {
        return new ADefineQuery(
            (TDefine) cloneNode(_define_),
            (TTquery) cloneNode(_tquery_),
            (TIdentifier) cloneNode(_identifier_),
            (PDefineQueryX) cloneNode(_defineQueryX_),
            (TAs) cloneNode(_as_),
            (PQuery) cloneNode(_query_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADefineQuery(this);
    }

    public TDefine getDefine()
    {
        return _define_;
    }

    public void setDefine(TDefine node)
    {
        if(_define_ != null)
        {
            _define_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _define_ = node;
    }

    public TTquery getTquery()
    {
        return _tquery_;
    }

    public void setTquery(TTquery node)
    {
        if(_tquery_ != null)
        {
            _tquery_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _tquery_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return _identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _identifier_ = node;
    }

    public PDefineQueryX getDefineQueryX()
    {
        return _defineQueryX_;
    }

    public void setDefineQueryX(PDefineQueryX node)
    {
        if(_defineQueryX_ != null)
        {
            _defineQueryX_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _defineQueryX_ = node;
    }

    public TAs getAs()
    {
        return _as_;
    }

    public void setAs(TAs node)
    {
        if(_as_ != null)
        {
            _as_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _as_ = node;
    }

    public PQuery getQuery()
    {
        return _query_;
    }

    public void setQuery(PQuery node)
    {
        if(_query_ != null)
        {
            _query_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _query_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_define_)
            + toString(_tquery_)
            + toString(_identifier_)
            + toString(_defineQueryX_)
            + toString(_as_)
            + toString(_query_);
    }

    void removeChild(Node child)
    {
        if(_define_ == child)
        {
            _define_ = null;
            return;
        }

        if(_tquery_ == child)
        {
            _tquery_ = null;
            return;
        }

        if(_identifier_ == child)
        {
            _identifier_ = null;
            return;
        }

        if(_defineQueryX_ == child)
        {
            _defineQueryX_ = null;
            return;
        }

        if(_as_ == child)
        {
            _as_ = null;
            return;
        }

        if(_query_ == child)
        {
            _query_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_define_ == oldChild)
        {
            setDefine((TDefine) newChild);
            return;
        }

        if(_tquery_ == oldChild)
        {
            setTquery((TTquery) newChild);
            return;
        }

        if(_identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(_defineQueryX_ == oldChild)
        {
            setDefineQueryX((PDefineQueryX) newChild);
            return;
        }

        if(_as_ == oldChild)
        {
            setAs((TAs) newChild);
            return;
        }

        if(_query_ == oldChild)
        {
            setQuery((PQuery) newChild);
            return;
        }

    }
}
