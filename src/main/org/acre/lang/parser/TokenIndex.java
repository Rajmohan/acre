/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.acre.lang.parser;

import org.acre.lang.node.*;
import org.acre.lang.analysis.*;

class TokenIndex extends AnalysisAdapter
{
    int index;

    public void caseTDotdotdot(TDotdotdot node)
    {
        index = 0;
    }

    public void caseTArrow(TArrow node)
    {
        index = 1;
    }

    public void caseTBinor(TBinor node)
    {
        index = 2;
    }

    public void caseTBracketL(TBracketL node)
    {
        index = 3;
    }

    public void caseTBracketR(TBracketR node)
    {
        index = 4;
    }

    public void caseTColon(TColon node)
    {
        index = 5;
    }

    public void caseTComma(TComma node)
    {
        index = 6;
    }

    public void caseTDivide(TDivide node)
    {
        index = 7;
    }

    public void caseTDollar(TDollar node)
    {
        index = 8;
    }

    public void caseTDotdot(TDotdot node)
    {
        index = 9;
    }

    public void caseTDot(TDot node)
    {
        index = 10;
    }

    public void caseTEq(TEq node)
    {
        index = 11;
    }

    public void caseTGe(TGe node)
    {
        index = 12;
    }

    public void caseTGt(TGt node)
    {
        index = 13;
    }

    public void caseTLe(TLe node)
    {
        index = 14;
    }

    public void caseTLt(TLt node)
    {
        index = 15;
    }

    public void caseTMinus(TMinus node)
    {
        index = 16;
    }

    public void caseTNe(TNe node)
    {
        index = 17;
    }

    public void caseTPlus(TPlus node)
    {
        index = 18;
    }

    public void caseTQuote(TQuote node)
    {
        index = 19;
    }

    public void caseTSemicolon(TSemicolon node)
    {
        index = 20;
    }

    public void caseTSqBracketL(TSqBracketL node)
    {
        index = 21;
    }

    public void caseTSqBracketR(TSqBracketR node)
    {
        index = 22;
    }

    public void caseTStar(TStar node)
    {
        index = 23;
    }

    public void caseTSetAnd(TSetAnd node)
    {
        index = 24;
    }

    public void caseTAbs(TAbs node)
    {
        index = 25;
    }

    public void caseTAlias(TAlias node)
    {
        index = 26;
    }

    public void caseTAll(TAll node)
    {
        index = 27;
    }

    public void caseTAndthen(TAndthen node)
    {
        index = 28;
    }

    public void caseTAnd(TAnd node)
    {
        index = 29;
    }

    public void caseTAny(TAny node)
    {
        index = 30;
    }

    public void caseTArray(TArray node)
    {
        index = 31;
    }

    public void caseTAs(TAs node)
    {
        index = 32;
    }

    public void caseTAsc(TAsc node)
    {
        index = 33;
    }

    public void caseTAvg(TAvg node)
    {
        index = 34;
    }

    public void caseTBag(TBag node)
    {
        index = 35;
    }

    public void caseTBoolean(TBoolean node)
    {
        index = 36;
    }

    public void caseTBy(TBy node)
    {
        index = 37;
    }

    public void caseTCount(TCount node)
    {
        index = 38;
    }

    public void caseTChar(TChar node)
    {
        index = 39;
    }

    public void caseTDate(TDate node)
    {
        index = 40;
    }

    public void caseTDefine(TDefine node)
    {
        index = 41;
    }

    public void caseTDesc(TDesc node)
    {
        index = 42;
    }

    public void caseTDictionary(TDictionary node)
    {
        index = 43;
    }

    public void caseTDistinct(TDistinct node)
    {
        index = 44;
    }

    public void caseTDouble(TDouble node)
    {
        index = 45;
    }

    public void caseTElement(TElement node)
    {
        index = 46;
    }

    public void caseTEnum(TEnum node)
    {
        index = 47;
    }

    public void caseTExcept(TExcept node)
    {
        index = 48;
    }

    public void caseTExists(TExists node)
    {
        index = 49;
    }

    public void caseTFalse(TFalse node)
    {
        index = 50;
    }

    public void caseTFirst(TFirst node)
    {
        index = 51;
    }

    public void caseTFlatten(TFlatten node)
    {
        index = 52;
    }

    public void caseTFloat(TFloat node)
    {
        index = 53;
    }

    public void caseTFor(TFor node)
    {
        index = 54;
    }

    public void caseTFrom(TFrom node)
    {
        index = 55;
    }

    public void caseTGroup(TGroup node)
    {
        index = 56;
    }

    public void caseTHaving(THaving node)
    {
        index = 57;
    }

    public void caseTInclude(TInclude node)
    {
        index = 58;
    }

    public void caseTInstanceof(TInstanceof node)
    {
        index = 59;
    }

    public void caseTIntersect(TIntersect node)
    {
        index = 60;
    }

    public void caseTInterval(TInterval node)
    {
        index = 61;
    }

    public void caseTIn(TIn node)
    {
        index = 62;
    }

    public void caseTIsDefined(TIsDefined node)
    {
        index = 63;
    }

    public void caseTIsUndefined(TIsUndefined node)
    {
        index = 64;
    }

    public void caseTLast(TLast node)
    {
        index = 65;
    }

    public void caseTLike(TLike node)
    {
        index = 66;
    }

    public void caseTRlike(TRlike node)
    {
        index = 67;
    }

    public void caseTListtoset(TListtoset node)
    {
        index = 68;
    }

    public void caseTList(TList node)
    {
        index = 69;
    }

    public void caseTLong(TLong node)
    {
        index = 70;
    }

    public void caseTMax(TMax node)
    {
        index = 71;
    }

    public void caseTMod(TMod node)
    {
        index = 72;
    }

    public void caseTMin(TMin node)
    {
        index = 73;
    }

    public void caseTNil(TNil node)
    {
        index = 74;
    }

    public void caseTNot(TNot node)
    {
        index = 75;
    }

    public void caseTOctet(TOctet node)
    {
        index = 76;
    }

    public void caseTOrder(TOrder node)
    {
        index = 77;
    }

    public void caseTOrelse(TOrelse node)
    {
        index = 78;
    }

    public void caseTOr(TOr node)
    {
        index = 79;
    }

    public void caseTReturn(TReturn node)
    {
        index = 80;
    }

    public void caseTTquery(TTquery node)
    {
        index = 81;
    }

    public void caseTSelect(TSelect node)
    {
        index = 82;
    }

    public void caseTSet(TSet node)
    {
        index = 83;
    }

    public void caseTSome(TSome node)
    {
        index = 84;
    }

    public void caseTShort(TShort node)
    {
        index = 85;
    }

    public void caseTString(TString node)
    {
        index = 86;
    }

    public void caseTStruct(TStruct node)
    {
        index = 87;
    }

    public void caseTSum(TSum node)
    {
        index = 88;
    }

    public void caseTTimestamp(TTimestamp node)
    {
        index = 89;
    }

    public void caseTTime(TTime node)
    {
        index = 90;
    }

    public void caseTTrue(TTrue node)
    {
        index = 91;
    }

    public void caseTUndefined(TUndefined node)
    {
        index = 92;
    }

    public void caseTUndefine(TUndefine node)
    {
        index = 93;
    }

    public void caseTUnion(TUnion node)
    {
        index = 94;
    }

    public void caseTUnique(TUnique node)
    {
        index = 95;
    }

    public void caseTUnsigned(TUnsigned node)
    {
        index = 96;
    }

    public void caseTWhere(TWhere node)
    {
        index = 97;
    }

    public void caseTIdentifier(TIdentifier node)
    {
        index = 98;
    }

    public void caseTDoubleLiteral(TDoubleLiteral node)
    {
        index = 99;
    }

    public void caseTLongLiteral(TLongLiteral node)
    {
        index = 100;
    }

    public void caseTCharLiteral(TCharLiteral node)
    {
        index = 101;
    }

    public void caseTStringLiteral(TStringLiteral node)
    {
        index = 102;
    }

    public void caseEOF(EOF node)
    {
        index = 103;
    }
}
