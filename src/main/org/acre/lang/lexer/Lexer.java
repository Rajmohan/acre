/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.acre.lang.lexer;

import java.io.*;
import java.util.*;
import org.acre.lang.node.*;

public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    protected void filter() throws LexerException, IOException
    {
    }

    public Lexer(PushbackReader in)
    {
        this.in = in;

        if(gotoTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Lexer.class.getResourceAsStream("lexer.dat")));

                // read gotoTable
                int length = s.readInt();
                gotoTable = new int[length][][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][][];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        length = s.readInt();
                        gotoTable[i][j] = new int[length][3];
                        for(int k = 0; k < gotoTable[i][j].length; k++)
                        {
                            for(int l = 0; l < 3; l++)
                            {
                                gotoTable[i][j][k][l] = s.readInt();
                            }
                        }
                    }
                }

                // read accept
                length = s.readInt();
                accept = new int[length][];
                for(int i = 0; i < accept.length; i++)
                {
                    length = s.readInt();
                    accept[i] = new int[length];
                    for(int j = 0; j < accept[i].length; j++)
                    {
                        accept[i][j] = s.readInt();
                    }
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
            }
        }
    }

    public Token peek() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        return token;
    }

    public Token next() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        Token result = token;
        token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = pos;
        int start_line = line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        int[][][] gotoTable = this.gotoTable[state.id()];
        int[] accept = this.accept[state.id()];
        text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(cr)
                    {
                        cr = false;
                    }
                    else
                    {
                        line++;
                        pos = 0;
                    }
                    break;
                case 13:
                    line++;
                    pos = 0;
                    cr = true;
                    break;
                default:
                    pos++;
                    cr = false;
                    break;
                };

                text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = text.length();
                    accept_pos = pos;
                    accept_line = line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            Token token = new1(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            Token token = new2(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            Token token = new3(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            Token token = new10(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            Token token = new11(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            Token token = new12(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            Token token = new13(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            Token token = new14(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            Token token = new15(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            Token token = new16(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            Token token = new17(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            Token token = new18(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            Token token = new19(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            Token token = new20(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            Token token = new21(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            Token token = new22(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            Token token = new23(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            Token token = new24(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            Token token = new25(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            Token token = new26(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 27:
                        {
                            Token token = new27(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 28:
                        {
                            Token token = new28(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 29:
                        {
                            Token token = new29(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 30:
                        {
                            Token token = new30(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 31:
                        {
                            Token token = new31(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 32:
                        {
                            Token token = new32(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 33:
                        {
                            Token token = new33(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 34:
                        {
                            Token token = new34(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 35:
                        {
                            Token token = new35(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 36:
                        {
                            Token token = new36(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 37:
                        {
                            Token token = new37(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 38:
                        {
                            Token token = new38(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 39:
                        {
                            Token token = new39(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 40:
                        {
                            Token token = new40(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 41:
                        {
                            Token token = new41(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 42:
                        {
                            Token token = new42(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 43:
                        {
                            Token token = new43(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 44:
                        {
                            Token token = new44(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 45:
                        {
                            Token token = new45(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 46:
                        {
                            Token token = new46(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 47:
                        {
                            Token token = new47(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 48:
                        {
                            Token token = new48(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 49:
                        {
                            Token token = new49(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 50:
                        {
                            Token token = new50(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 51:
                        {
                            Token token = new51(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 52:
                        {
                            Token token = new52(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 53:
                        {
                            Token token = new53(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 54:
                        {
                            Token token = new54(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 55:
                        {
                            Token token = new55(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 56:
                        {
                            Token token = new56(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 57:
                        {
                            Token token = new57(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 58:
                        {
                            Token token = new58(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 59:
                        {
                            Token token = new59(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 60:
                        {
                            Token token = new60(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 61:
                        {
                            Token token = new61(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 62:
                        {
                            Token token = new62(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 63:
                        {
                            Token token = new63(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 64:
                        {
                            Token token = new64(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 65:
                        {
                            Token token = new65(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 66:
                        {
                            Token token = new66(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 67:
                        {
                            Token token = new67(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 68:
                        {
                            Token token = new68(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 69:
                        {
                            Token token = new69(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 70:
                        {
                            Token token = new70(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 71:
                        {
                            Token token = new71(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 72:
                        {
                            Token token = new72(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 73:
                        {
                            Token token = new73(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 74:
                        {
                            Token token = new74(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 75:
                        {
                            Token token = new75(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 76:
                        {
                            Token token = new76(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 77:
                        {
                            Token token = new77(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 78:
                        {
                            Token token = new78(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 79:
                        {
                            Token token = new79(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 80:
                        {
                            Token token = new80(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 81:
                        {
                            Token token = new81(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 82:
                        {
                            Token token = new82(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 83:
                        {
                            Token token = new83(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 84:
                        {
                            Token token = new84(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 85:
                        {
                            Token token = new85(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 86:
                        {
                            Token token = new86(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 87:
                        {
                            Token token = new87(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 88:
                        {
                            Token token = new88(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 89:
                        {
                            Token token = new89(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 90:
                        {
                            Token token = new90(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 91:
                        {
                            Token token = new91(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 92:
                        {
                            Token token = new92(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 93:
                        {
                            Token token = new93(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 94:
                        {
                            Token token = new94(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 95:
                        {
                            Token token = new95(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 96:
                        {
                            Token token = new96(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 97:
                        {
                            Token token = new97(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 98:
                        {
                            Token token = new98(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 99:
                        {
                            Token token = new99(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 100:
                        {
                            Token token = new100(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 101:
                        {
                            Token token = new101(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 102:
                        {
                            Token token = new102(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 103:
                        {
                            Token token = new103(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 104:
                        {
                            Token token = new104(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 105:
                        {
                            Token token = new105(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + text);
                    }
                    else
                    {
                        EOF token = new EOF(
                            start_line + 1,
                            start_pos + 1);
                        return token;
                    }
                }
            }
        }
    }

    Token new0(String text, int line, int pos) { return new TWhite(text, line, pos); }
    Token new1(String text, int line, int pos) { return new TDotdotdot(text, line, pos); }
    Token new2(int line, int pos) { return new TArrow(line, pos); }
    Token new3(int line, int pos) { return new TBinor(line, pos); }
    Token new4(int line, int pos) { return new TBracketL(line, pos); }
    Token new5(int line, int pos) { return new TBracketR(line, pos); }
    Token new6(int line, int pos) { return new TColon(line, pos); }
    Token new7(int line, int pos) { return new TComma(line, pos); }
    Token new8(int line, int pos) { return new TDivide(line, pos); }
    Token new9(int line, int pos) { return new TDollar(line, pos); }
    Token new10(int line, int pos) { return new TDotdot(line, pos); }
    Token new11(int line, int pos) { return new TDot(line, pos); }
    Token new12(int line, int pos) { return new TEq(line, pos); }
    Token new13(int line, int pos) { return new TGe(line, pos); }
    Token new14(int line, int pos) { return new TGt(line, pos); }
    Token new15(int line, int pos) { return new TLe(line, pos); }
    Token new16(int line, int pos) { return new TLt(line, pos); }
    Token new17(int line, int pos) { return new TMinus(line, pos); }
    Token new18(int line, int pos) { return new TNe(line, pos); }
    Token new19(int line, int pos) { return new TPlus(line, pos); }
    Token new20(int line, int pos) { return new TQuote(line, pos); }
    Token new21(int line, int pos) { return new TSemicolon(line, pos); }
    Token new22(int line, int pos) { return new TSqBracketL(line, pos); }
    Token new23(int line, int pos) { return new TSqBracketR(line, pos); }
    Token new24(int line, int pos) { return new TStar(line, pos); }
    Token new25(int line, int pos) { return new TSetAnd(line, pos); }
    Token new26(String text, int line, int pos) { return new TAbs(text, line, pos); }
    Token new27(String text, int line, int pos) { return new TAlias(text, line, pos); }
    Token new28(String text, int line, int pos) { return new TAll(text, line, pos); }
    Token new29(String text, int line, int pos) { return new TAndthen(text, line, pos); }
    Token new30(String text, int line, int pos) { return new TAnd(text, line, pos); }
    Token new31(String text, int line, int pos) { return new TAny(text, line, pos); }
    Token new32(String text, int line, int pos) { return new TArray(text, line, pos); }
    Token new33(String text, int line, int pos) { return new TAs(text, line, pos); }
    Token new34(String text, int line, int pos) { return new TAsc(text, line, pos); }
    Token new35(String text, int line, int pos) { return new TAvg(text, line, pos); }
    Token new36(String text, int line, int pos) { return new TBag(text, line, pos); }
    Token new37(String text, int line, int pos) { return new TBoolean(text, line, pos); }
    Token new38(String text, int line, int pos) { return new TBy(text, line, pos); }
    Token new39(String text, int line, int pos) { return new TCount(text, line, pos); }
    Token new40(String text, int line, int pos) { return new TChar(text, line, pos); }
    Token new41(String text, int line, int pos) { return new TDate(text, line, pos); }
    Token new42(String text, int line, int pos) { return new TDefine(text, line, pos); }
    Token new43(String text, int line, int pos) { return new TDesc(text, line, pos); }
    Token new44(String text, int line, int pos) { return new TDictionary(text, line, pos); }
    Token new45(String text, int line, int pos) { return new TDistinct(text, line, pos); }
    Token new46(String text, int line, int pos) { return new TDouble(text, line, pos); }
    Token new47(String text, int line, int pos) { return new TElement(text, line, pos); }
    Token new48(String text, int line, int pos) { return new TEnum(text, line, pos); }
    Token new49(String text, int line, int pos) { return new TExcept(text, line, pos); }
    Token new50(String text, int line, int pos) { return new TExists(text, line, pos); }
    Token new51(String text, int line, int pos) { return new TFalse(text, line, pos); }
    Token new52(String text, int line, int pos) { return new TFirst(text, line, pos); }
    Token new53(String text, int line, int pos) { return new TFlatten(text, line, pos); }
    Token new54(String text, int line, int pos) { return new TFloat(text, line, pos); }
    Token new55(String text, int line, int pos) { return new TFor(text, line, pos); }
    Token new56(String text, int line, int pos) { return new TFrom(text, line, pos); }
    Token new57(String text, int line, int pos) { return new TGroup(text, line, pos); }
    Token new58(String text, int line, int pos) { return new THaving(text, line, pos); }
    Token new59(String text, int line, int pos) { return new TInclude(text, line, pos); }
    Token new60(String text, int line, int pos) { return new TInstanceof(text, line, pos); }
    Token new61(String text, int line, int pos) { return new TIntersect(text, line, pos); }
    Token new62(String text, int line, int pos) { return new TInterval(text, line, pos); }
    Token new63(String text, int line, int pos) { return new TIn(text, line, pos); }
    Token new64(String text, int line, int pos) { return new TIsDefined(text, line, pos); }
    Token new65(String text, int line, int pos) { return new TIsUndefined(text, line, pos); }
    Token new66(String text, int line, int pos) { return new TLast(text, line, pos); }
    Token new67(String text, int line, int pos) { return new TLike(text, line, pos); }
    Token new68(String text, int line, int pos) { return new TRlike(text, line, pos); }
    Token new69(String text, int line, int pos) { return new TListtoset(text, line, pos); }
    Token new70(String text, int line, int pos) { return new TList(text, line, pos); }
    Token new71(String text, int line, int pos) { return new TLong(text, line, pos); }
    Token new72(String text, int line, int pos) { return new TMax(text, line, pos); }
    Token new73(String text, int line, int pos) { return new TMod(text, line, pos); }
    Token new74(String text, int line, int pos) { return new TMin(text, line, pos); }
    Token new75(String text, int line, int pos) { return new TNil(text, line, pos); }
    Token new76(String text, int line, int pos) { return new TNot(text, line, pos); }
    Token new77(String text, int line, int pos) { return new TOctet(text, line, pos); }
    Token new78(String text, int line, int pos) { return new TOrder(text, line, pos); }
    Token new79(String text, int line, int pos) { return new TOrelse(text, line, pos); }
    Token new80(String text, int line, int pos) { return new TOr(text, line, pos); }
    Token new81(String text, int line, int pos) { return new TReturn(text, line, pos); }
    Token new82(String text, int line, int pos) { return new TTquery(text, line, pos); }
    Token new83(String text, int line, int pos) { return new TSelect(text, line, pos); }
    Token new84(String text, int line, int pos) { return new TSet(text, line, pos); }
    Token new85(String text, int line, int pos) { return new TSome(text, line, pos); }
    Token new86(String text, int line, int pos) { return new TShort(text, line, pos); }
    Token new87(String text, int line, int pos) { return new TString(text, line, pos); }
    Token new88(String text, int line, int pos) { return new TStruct(text, line, pos); }
    Token new89(String text, int line, int pos) { return new TSum(text, line, pos); }
    Token new90(String text, int line, int pos) { return new TTimestamp(text, line, pos); }
    Token new91(String text, int line, int pos) { return new TTime(text, line, pos); }
    Token new92(String text, int line, int pos) { return new TTrue(text, line, pos); }
    Token new93(String text, int line, int pos) { return new TUndefined(text, line, pos); }
    Token new94(String text, int line, int pos) { return new TUndefine(text, line, pos); }
    Token new95(String text, int line, int pos) { return new TUnion(text, line, pos); }
    Token new96(String text, int line, int pos) { return new TUnique(text, line, pos); }
    Token new97(String text, int line, int pos) { return new TUnsigned(text, line, pos); }
    Token new98(String text, int line, int pos) { return new TWhere(text, line, pos); }
    Token new99(String text, int line, int pos) { return new TIdentifier(text, line, pos); }
    Token new100(String text, int line, int pos) { return new TDoubleLiteral(text, line, pos); }
    Token new101(String text, int line, int pos) { return new TLongLiteral(text, line, pos); }
    Token new102(String text, int line, int pos) { return new TCharLiteral(text, line, pos); }
    Token new103(String text, int line, int pos) { return new TStringLiteral(text, line, pos); }
    Token new104(String text, int line, int pos) { return new TLineComment(text, line, pos); }
    Token new105(String text, int line, int pos) { return new TMultilineComment(text, line, pos); }

    private int getChar() throws IOException
    {
        if(eof)
        {
            return -1;
        }

        int result = in.read();

        if(result == -1)
        {
            eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }
    }

    protected void unread(Token token) throws IOException
    {
        String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }

        pos = token.getPos() - 1;
        line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{9, 10, 1}, {13, 13, 1}, {32, 32, 1}, {33, 33, 2}, {34, 34, 3}, {35, 35, 4}, {36, 36, 5}, {39, 39, 6}, {40, 40, 7}, {41, 41, 8}, {42, 42, 9}, {43, 43, 10}, {44, 44, 11}, {45, 45, 12}, {46, 46, 13}, {47, 47, 14}, {48, 57, 15}, {58, 58, 16}, {59, 59, 17}, {60, 60, 18}, {61, 61, 19}, {62, 62, 20}, {64, 64, 21}, {65, 65, 22}, {66, 66, 23}, {67, 67, 24}, {68, 68, 25}, {69, 69, 26}, {70, 70, 27}, {71, 71, 28}, {72, 72, 29}, {73, 73, 30}, {74, 75, 31}, {76, 76, 32}, {77, 77, 33}, {78, 78, 34}, {79, 79, 35}, {80, 80, 31}, {81, 81, 36}, {82, 82, 37}, {83, 83, 38}, {84, 84, 39}, {85, 85, 40}, {86, 86, 31}, {87, 87, 41}, {88, 90, 31}, {91, 91, 42}, {93, 93, 43}, {94, 94, 44}, {97, 97, 45}, {98, 98, 46}, {99, 99, 47}, {100, 100, 48}, {101, 101, 49}, {102, 102, 50}, {103, 103, 51}, {104, 104, 52}, {105, 105, 53}, {106, 107, 31}, {108, 108, 54}, {109, 109, 55}, {110, 110, 56}, {111, 111, 57}, {112, 112, 31}, {113, 113, 58}, {114, 114, 59}, {115, 115, 60}, {116, 116, 61}, {117, 117, 62}, {118, 118, 31}, {119, 119, 63}, {120, 122, 31}, {124, 124, 64}, },
            {{9, 32, -2}, },
            {{61, 61, 65}, },
            {{0, 9, 66}, {11, 12, 66}, {14, 33, 66}, {34, 34, 67}, {35, 65535, 66}, },
            {{0, 9, 68}, {10, 10, 69}, {11, 12, 68}, {13, 13, 69}, {14, 65535, 68}, },
            {},
            {{37, 37, 70}, {42, 42, 70}, {48, 57, 70}, {63, 63, 70}, {65, 90, 70}, {92, 92, 70}, {95, 95, 70}, {97, 122, 70}, },
            {},
            {},
            {},
            {},
            {},
            {{62, 62, 71}, },
            {{42, 42, 72}, {46, 46, 73}, },
            {{42, 42, 74}, {47, 47, 75}, },
            {{46, 46, 76}, {48, 57, 77}, },
            {{65, 90, 78}, {97, 122, 78}, },
            {},
            {{61, 61, 79}, },
            {},
            {{61, 61, 80}, },
            {{65, 90, 81}, {97, 122, 81}, },
            {{48, 57, 82}, {65, 65, 82}, {66, 66, 83}, {67, 75, 82}, {76, 76, 84}, {77, 77, 82}, {78, 78, 85}, {79, 81, 82}, {82, 82, 86}, {83, 83, 87}, {84, 85, 82}, {86, 86, 88}, {87, 90, 82}, {95, 95, 82}, {97, 97, 82}, {98, 98, 89}, {99, 107, 82}, {108, 108, 90}, {109, 109, 82}, {110, 110, 91}, {111, 113, 82}, {114, 114, 92}, {115, 115, 93}, {116, 117, 82}, {118, 118, 94}, {119, 122, 82}, },
            {{48, 57, 82}, {65, 65, 95}, {66, 78, 82}, {79, 79, 96}, {80, 88, 82}, {89, 89, 97}, {90, 90, 82}, {95, 95, 82}, {97, 97, 98}, {98, 110, 82}, {111, 111, 99}, {112, 120, 82}, {121, 121, 100}, {122, 122, 82}, },
            {{48, 57, 82}, {65, 71, 82}, {72, 72, 101}, {73, 78, 82}, {79, 79, 102}, {80, 90, 82}, {95, 95, 82}, {97, 103, 82}, {104, 104, 103}, {105, 110, 82}, {111, 111, 104}, {112, 122, 82}, },
            {{48, 57, 82}, {65, 65, 105}, {66, 68, 82}, {69, 69, 106}, {70, 72, 82}, {73, 73, 107}, {74, 78, 82}, {79, 79, 108}, {80, 95, -26}, {97, 97, 109}, {98, 100, 82}, {101, 101, 110}, {102, 104, 82}, {105, 105, 111}, {106, 110, 82}, {111, 111, 112}, {112, 122, 82}, },
            {{48, 57, 82}, {65, 75, 82}, {76, 76, 113}, {77, 77, 82}, {78, 78, 114}, {79, 87, 82}, {88, 88, 115}, {89, 90, 82}, {95, 95, 82}, {97, 107, 82}, {108, 108, 116}, {109, 109, 82}, {110, 110, 117}, {111, 119, 82}, {120, 120, 118}, {121, 122, 82}, },
            {{48, 57, 82}, {65, 65, 119}, {66, 72, 82}, {73, 73, 120}, {74, 75, 82}, {76, 76, 121}, {77, 78, 82}, {79, 79, 122}, {80, 81, 82}, {82, 82, 123}, {83, 90, 82}, {95, 95, 82}, {97, 97, 124}, {98, 104, 82}, {105, 105, 125}, {106, 107, 82}, {108, 108, 126}, {109, 110, 82}, {111, 111, 127}, {112, 113, 82}, {114, 114, 128}, {115, 122, 82}, },
            {{48, 57, 82}, {65, 81, 82}, {82, 82, 129}, {83, 95, -29}, {97, 113, 82}, {114, 114, 130}, {115, 122, 82}, },
            {{48, 57, 82}, {65, 65, 131}, {66, 90, 82}, {95, 95, 82}, {97, 97, 132}, {98, 122, 82}, },
            {{48, 57, 82}, {65, 77, 82}, {78, 78, 133}, {79, 82, 82}, {83, 83, 134}, {84, 90, 82}, {95, 95, 82}, {97, 109, 82}, {110, 110, 135}, {111, 114, 82}, {115, 115, 136}, {116, 122, 82}, },
            {{48, 57, 82}, {65, 90, 82}, {95, 95, 82}, {97, 122, 82}, },
            {{48, 57, 82}, {65, 65, 137}, {66, 72, 82}, {73, 73, 138}, {74, 78, 82}, {79, 79, 139}, {80, 95, -26}, {97, 97, 140}, {98, 104, 82}, {105, 105, 141}, {106, 110, 82}, {111, 111, 142}, {112, 122, 82}, },
            {{48, 57, 82}, {65, 65, 143}, {66, 72, 82}, {73, 73, 144}, {74, 78, 82}, {79, 79, 145}, {80, 95, -26}, {97, 97, 146}, {98, 104, 82}, {105, 105, 147}, {106, 110, 82}, {111, 111, 148}, {112, 122, 82}, },
            {{48, 57, 82}, {65, 72, 82}, {73, 73, 149}, {74, 78, 82}, {79, 79, 150}, {80, 95, -26}, {97, 104, 82}, {105, 105, 151}, {106, 110, 82}, {111, 111, 152}, {112, 122, 82}, },
            {{48, 57, 82}, {65, 66, 82}, {67, 67, 153}, {68, 81, 82}, {82, 82, 154}, {83, 95, -29}, {97, 98, 82}, {99, 99, 155}, {100, 113, 82}, {114, 114, 156}, {115, 122, 82}, },
            {{48, 57, 82}, {65, 84, 82}, {85, 85, 157}, {86, 90, 82}, {95, 95, 82}, {97, 116, 82}, {117, 117, 158}, {118, 122, 82}, },
            {{48, 57, 82}, {65, 68, 82}, {69, 69, 159}, {70, 75, 82}, {76, 76, 160}, {77, 90, 82}, {95, 95, 82}, {97, 100, 82}, {101, 101, 161}, {102, 107, 82}, {108, 108, 162}, {109, 122, 82}, },
            {{48, 68, -39}, {69, 69, 163}, {70, 71, 82}, {72, 72, 164}, {73, 78, 82}, {79, 79, 165}, {80, 83, 82}, {84, 84, 166}, {85, 85, 167}, {86, 95, -38}, {97, 100, 82}, {101, 101, 168}, {102, 103, 82}, {104, 104, 169}, {105, 110, 82}, {111, 111, 170}, {112, 115, 82}, {116, 116, 171}, {117, 117, 172}, {118, 122, 82}, },
            {{48, 72, -36}, {73, 73, 173}, {74, 81, 82}, {82, 82, 174}, {83, 95, -29}, {97, 104, 82}, {105, 105, 175}, {106, 113, 82}, {114, 114, 176}, {115, 122, 82}, },
            {{48, 77, -32}, {78, 78, 177}, {79, 90, 82}, {95, 109, -32}, {110, 110, 178}, {111, 122, 82}, },
            {{48, 71, -26}, {72, 72, 179}, {73, 90, 82}, {95, 103, -26}, {104, 104, 180}, {105, 122, 82}, },
            {},
            {},
            {},
            {{48, 122, -24}, },
            {{48, 122, -25}, },
            {{48, 122, -26}, },
            {{48, 122, -27}, },
            {{48, 122, -28}, },
            {{48, 122, -29}, },
            {{48, 122, -30}, },
            {{48, 122, -31}, },
            {{48, 122, -32}, },
            {{48, 122, -34}, },
            {{48, 122, -35}, },
            {{48, 122, -36}, },
            {{48, 122, -37}, },
            {{48, 122, -38}, },
            {{48, 122, -39}, },
            {{48, 122, -40}, },
            {{48, 122, -41}, },
            {{48, 122, -42}, },
            {{48, 122, -43}, },
            {{124, 124, 181}, },
            {},
            {{0, 65535, -5}, },
            {},
            {{0, 65535, -6}, },
            {},
            {{39, 39, 182}, },
            {},
            {{42, 42, 183}, },
            {{46, 46, 184}, },
            {{0, 41, 185}, {42, 42, 186}, {43, 46, 185}, {48, 65535, 185}, },
            {{0, 9, 187}, {10, 10, 188}, {11, 12, 187}, {13, 13, 188}, {14, 65535, 187}, },
            {{48, 57, 189}, },
            {{46, 57, -17}, },
            {{48, 122, -33}, },
            {},
            {},
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 57, 82}, {65, 82, 82}, {83, 83, 190}, {84, 95, -32}, {97, 114, 82}, {115, 115, 191}, {116, 122, 82}, },
            {{48, 72, -36}, {73, 73, 192}, {74, 75, 82}, {76, 76, 193}, {77, 95, -39}, {97, 104, 82}, {105, 105, 194}, {106, 107, 82}, {108, 108, 195}, {109, 122, 82}, },
            {{48, 57, 82}, {65, 67, 82}, {68, 68, 196}, {69, 88, 82}, {89, 89, 197}, {90, 95, -25}, {97, 99, 82}, {100, 100, 198}, {101, 120, 82}, {121, 121, 199}, {122, 122, 82}, },
            {{48, 81, -30}, {82, 82, 200}, {83, 113, -30}, {114, 114, 201}, {115, 122, 82}, },
            {{48, 66, -37}, {67, 67, 202}, {68, 90, 82}, {95, 98, -37}, {99, 99, 203}, {100, 122, 82}, },
            {{48, 57, 82}, {65, 70, 82}, {71, 71, 204}, {72, 90, 82}, {95, 95, 82}, {97, 102, 82}, {103, 103, 205}, {104, 122, 82}, },
            {{48, 122, -85}, },
            {{48, 122, -86}, },
            {{48, 122, -87}, },
            {{48, 122, -88}, },
            {{48, 122, -89}, },
            {{48, 122, -90}, },
            {{48, 70, -90}, {71, 71, 206}, {72, 102, -90}, {103, 103, 207}, {104, 122, 82}, },
            {{48, 57, 82}, {65, 78, 82}, {79, 79, 208}, {80, 95, -26}, {97, 110, 82}, {111, 111, 209}, {112, 122, 82}, },
            {{48, 122, -33}, },
            {{48, 122, -97}, },
            {{48, 122, -98}, },
            {{48, 122, -33}, },
            {{48, 57, 82}, {65, 65, 210}, {66, 95, -31}, {97, 97, 211}, {98, 122, 82}, },
            {{48, 84, -38}, {85, 85, 212}, {86, 116, -38}, {117, 117, 213}, {118, 122, 82}, },
            {{48, 122, -103}, },
            {{48, 122, -104}, },
            {{48, 57, 82}, {65, 83, 82}, {84, 84, 214}, {85, 90, 82}, {95, 95, 82}, {97, 115, 82}, {116, 116, 215}, {117, 122, 82}, },
            {{48, 57, 82}, {65, 69, 82}, {70, 70, 216}, {71, 82, 82}, {83, 83, 217}, {84, 95, -32}, {97, 101, 82}, {102, 102, 218}, {103, 114, 82}, {115, 115, 219}, {116, 122, 82}, },
            {{48, 66, -37}, {67, 67, 220}, {68, 82, 82}, {83, 83, 221}, {84, 95, -32}, {97, 98, 82}, {99, 99, 222}, {100, 114, 82}, {115, 115, 223}, {116, 122, 82}, },
            {{48, 84, -38}, {85, 85, 224}, {86, 116, -38}, {117, 117, 225}, {118, 122, 82}, },
            {{48, 122, -107}, },
            {{48, 122, -108}, },
            {{48, 122, -109}, },
            {{48, 122, -110}, },
            {{48, 68, -39}, {69, 69, 226}, {70, 90, 82}, {95, 100, -39}, {101, 101, 227}, {102, 122, 82}, },
            {{48, 84, -38}, {85, 85, 228}, {86, 116, -38}, {117, 117, 229}, {118, 122, 82}, },
            {{48, 66, -37}, {67, 67, 230}, {68, 72, 82}, {73, 73, 231}, {74, 90, 82}, {95, 98, -37}, {99, 99, 232}, {100, 104, 82}, {105, 105, 233}, {106, 122, 82}, },
            {{48, 122, -115}, },
            {{48, 122, -116}, },
            {{48, 122, -117}, },
            {{48, 75, -28}, {76, 76, 234}, {77, 95, -39}, {97, 107, 82}, {108, 108, 235}, {109, 122, 82}, },
            {{48, 81, -30}, {82, 82, 236}, {83, 113, -30}, {114, 114, 237}, {115, 122, 82}, },
            {{48, 57, 82}, {65, 65, 238}, {66, 78, 82}, {79, 79, 239}, {80, 95, -26}, {97, 97, 240}, {98, 110, 82}, {111, 111, 241}, {112, 122, 82}, },
            {{48, 81, -30}, {82, 82, 242}, {83, 113, -30}, {114, 114, 243}, {115, 122, 82}, },
            {{48, 78, -98}, {79, 79, 244}, {80, 110, -98}, {111, 111, 245}, {112, 122, 82}, },
            {{48, 122, -121}, },
            {{48, 122, -122}, },
            {{48, 122, -123}, },
            {{48, 122, -124}, },
            {{48, 122, -125}, },
            {{48, 78, -98}, {79, 79, 246}, {80, 110, -98}, {111, 111, 247}, {112, 122, 82}, },
            {{48, 122, -131}, },
            {{48, 57, 82}, {65, 85, 82}, {86, 86, 248}, {87, 95, -24}, {97, 117, 82}, {118, 118, 249}, {119, 122, 82}, },
            {{48, 122, -133}, },
            {{48, 66, -37}, {67, 67, 250}, {68, 82, 82}, {83, 83, 251}, {84, 84, 252}, {85, 95, -107}, {97, 98, 82}, {99, 99, 253}, {100, 114, 82}, {115, 115, 254}, {116, 116, 255}, {117, 122, 82}, },
            {{48, 90, -33}, {95, 95, 256}, {97, 122, 82}, },
            {{48, 122, -135}, },
            {{48, 122, -136}, },
            {{48, 82, -85}, {83, 83, 257}, {84, 114, -85}, {115, 115, 258}, {116, 122, 82}, },
            {{48, 57, 82}, {65, 74, 82}, {75, 75, 259}, {76, 82, 82}, {83, 83, 260}, {84, 95, -32}, {97, 106, 82}, {107, 107, 261}, {108, 114, 82}, {115, 115, 262}, {116, 122, 82}, },
            {{48, 77, -32}, {78, 78, 263}, {79, 109, -42}, {110, 110, 264}, {111, 122, 82}, },
            {{48, 122, -139}, },
            {{48, 122, -140}, },
            {{48, 122, -141}, },
            {{48, 57, 82}, {65, 87, 82}, {88, 88, 265}, {89, 95, -28}, {97, 119, 82}, {120, 120, 266}, {121, 122, 82}, },
            {{48, 77, -32}, {78, 78, 267}, {79, 109, -42}, {110, 110, 268}, {111, 122, 82}, },
            {{48, 67, -87}, {68, 68, 269}, {69, 90, 82}, {95, 99, -87}, {100, 100, 270}, {101, 122, 82}, },
            {{48, 122, -145}, },
            {{48, 122, -146}, },
            {{48, 122, -147}, },
            {{48, 75, -28}, {76, 76, 271}, {77, 107, -121}, {108, 108, 272}, {109, 122, 82}, },
            {{48, 83, -107}, {84, 84, 273}, {85, 115, -107}, {116, 116, 274}, {117, 122, 82}, },
            {{48, 122, -151}, },
            {{48, 122, -152}, },
            {{48, 83, -107}, {84, 84, 275}, {85, 115, -107}, {116, 116, 276}, {117, 122, 82}, },
            {{48, 67, -87}, {68, 68, 277}, {69, 69, 278}, {70, 95, -115}, {97, 99, 82}, {100, 100, 279}, {101, 101, 280}, {102, 122, 82}, },
            {{48, 122, -155}, },
            {{48, 122, -156}, },
            {{48, 68, -39}, {69, 69, 281}, {70, 100, -115}, {101, 101, 282}, {102, 122, 82}, },
            {{48, 122, -159}, },
            {{48, 83, -107}, {84, 84, 283}, {85, 115, -107}, {116, 116, 284}, {117, 122, 82}, },
            {{48, 72, -36}, {73, 73, 285}, {74, 95, -117}, {97, 104, 82}, {105, 105, 286}, {106, 122, 82}, },
            {{48, 122, -161}, },
            {{48, 122, -162}, },
            {{48, 75, -28}, {76, 76, 287}, {77, 83, 82}, {84, 84, 288}, {85, 95, -107}, {97, 107, 82}, {108, 108, 289}, {109, 115, 82}, {116, 116, 290}, {117, 122, 82}, },
            {{48, 78, -98}, {79, 79, 291}, {80, 110, -98}, {111, 111, 292}, {112, 122, 82}, },
            {{48, 57, 82}, {65, 76, 82}, {77, 77, 293}, {78, 90, 82}, {95, 95, 82}, {97, 108, 82}, {109, 109, 294}, {110, 122, 82}, },
            {{48, 81, -30}, {82, 82, 295}, {83, 113, -30}, {114, 114, 296}, {115, 122, 82}, },
            {{48, 76, -167}, {77, 77, 297}, {78, 108, -167}, {109, 109, 298}, {110, 122, 82}, },
            {{48, 122, -165}, },
            {{48, 122, -166}, },
            {{48, 122, -167}, },
            {{48, 122, -168}, },
            {{48, 122, -169}, },
            {{48, 76, -167}, {77, 77, 299}, {78, 108, -167}, {109, 109, 300}, {110, 122, 82}, },
            {{48, 84, -38}, {85, 85, 301}, {86, 116, -38}, {117, 117, 302}, {118, 122, 82}, },
            {{48, 122, -175}, },
            {{48, 122, -176}, },
            {{48, 67, -87}, {68, 68, 303}, {69, 72, 82}, {73, 73, 304}, {74, 82, 82}, {83, 83, 305}, {84, 95, -32}, {97, 99, 82}, {100, 100, 306}, {101, 104, 82}, {105, 105, 307}, {106, 114, 82}, {115, 115, 308}, {116, 122, 82}, },
            {{48, 122, -179}, },
            {{48, 68, -39}, {69, 69, 309}, {70, 100, -115}, {101, 101, 310}, {102, 122, 82}, },
            {{48, 122, -181}, },
            {},
            {},
            {{46, 46, 311}, },
            {},
            {{0, 65535, -76}, },
            {{47, 47, 312}, },
            {{0, 65535, -77}, },
            {},
            {{48, 57, 313}, {69, 69, 314}, {101, 101, 315}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 57, 82}, {65, 65, 316}, {66, 95, -31}, {97, 97, 317}, {98, 122, 82}, },
            {{48, 122, -33}, },
            {{48, 122, -194}, },
            {{48, 122, -33}, },
            {{48, 83, -107}, {84, 84, 318}, {85, 115, -107}, {116, 116, 319}, {117, 122, 82}, },
            {{48, 122, -33}, },
            {{48, 122, -198}, },
            {{48, 122, -33}, },
            {{48, 57, 82}, {65, 65, 320}, {66, 95, -31}, {97, 97, 321}, {98, 122, 82}, },
            {{48, 122, -202}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 75, -28}, {76, 76, 322}, {77, 107, -121}, {108, 108, 323}, {109, 122, 82}, },
            {{48, 122, -210}, },
            {{48, 81, -30}, {82, 82, 324}, {83, 113, -30}, {114, 114, 325}, {115, 122, 82}, },
            {{48, 122, -212}, },
            {{48, 77, -32}, {78, 78, 326}, {79, 109, -42}, {110, 110, 327}, {111, 122, 82}, },
            {{48, 122, -214}, },
            {{48, 68, -39}, {69, 69, 328}, {70, 100, -115}, {101, 101, 329}, {102, 122, 82}, },
            {{48, 122, -216}, },
            {{48, 72, -36}, {73, 73, 330}, {74, 104, -162}, {105, 105, 331}, {106, 122, 82}, },
            {{48, 66, -37}, {67, 67, 332}, {68, 98, -89}, {99, 99, 333}, {100, 122, 82}, },
            {{48, 122, -218}, },
            {{48, 122, -219}, },
            {{48, 83, -107}, {84, 84, 334}, {85, 115, -107}, {116, 116, 335}, {117, 122, 82}, },
            {{48, 83, -107}, {84, 84, 336}, {85, 115, -107}, {116, 116, 337}, {117, 122, 82}, },
            {{48, 122, -222}, },
            {{48, 122, -223}, },
            {{48, 65, -24}, {66, 66, 338}, {67, 90, 82}, {95, 97, -24}, {98, 98, 339}, {99, 122, 82}, },
            {{48, 122, -226}, },
            {{48, 76, -167}, {77, 77, 340}, {78, 108, -167}, {109, 109, 341}, {110, 122, 82}, },
            {{48, 122, -228}, },
            {{48, 76, -167}, {77, 77, 342}, {78, 108, -167}, {109, 109, 343}, {110, 122, 82}, },
            {{48, 122, -230}, },
            {{48, 68, -39}, {69, 69, 344}, {70, 100, -115}, {101, 101, 345}, {102, 122, 82}, },
            {{48, 82, -85}, {83, 83, 346}, {84, 114, -85}, {115, 115, 347}, {116, 122, 82}, },
            {{48, 122, -232}, },
            {{48, 122, -233}, },
            {{48, 82, -85}, {83, 83, 348}, {84, 114, -85}, {115, 115, 349}, {116, 122, 82}, },
            {{48, 122, -236}, },
            {{48, 82, -85}, {83, 83, 350}, {84, 114, -85}, {115, 115, 351}, {116, 122, 82}, },
            {{48, 122, -238}, },
            {{48, 83, -107}, {84, 84, 352}, {85, 115, -107}, {116, 116, 353}, {117, 122, 82}, },
            {{48, 57, 82}, {65, 65, 354}, {66, 95, -31}, {97, 97, 355}, {98, 122, 82}, },
            {{48, 122, -240}, },
            {{48, 122, -241}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 76, -167}, {77, 77, 356}, {78, 108, -167}, {109, 109, 357}, {110, 122, 82}, },
            {{48, 122, -246}, },
            {{48, 84, -38}, {85, 85, 358}, {86, 116, -38}, {117, 117, 359}, {118, 122, 82}, },
            {{48, 122, -248}, },
            {{48, 72, -36}, {73, 73, 360}, {74, 104, -162}, {105, 105, 361}, {106, 122, 82}, },
            {{48, 122, -250}, },
            {{48, 75, -28}, {76, 76, 362}, {77, 107, -121}, {108, 108, 363}, {109, 122, 82}, },
            {{48, 83, -107}, {84, 84, 364}, {85, 115, -107}, {116, 116, 365}, {117, 122, 82}, },
            {{48, 68, -39}, {69, 69, 366}, {70, 100, -115}, {101, 101, 367}, {102, 122, 82}, },
            {{48, 122, -252}, },
            {{48, 122, -253}, },
            {{48, 122, -254}, },
            {{48, 67, -87}, {68, 68, 368}, {69, 84, 82}, {85, 85, 369}, {86, 95, -38}, {97, 99, 82}, {100, 100, 370}, {101, 116, 82}, {117, 117, 371}, {118, 122, 82}, },
            {{48, 83, -107}, {84, 84, 372}, {85, 115, -107}, {116, 116, 373}, {117, 122, 82}, },
            {{48, 122, -259}, },
            {{48, 68, -39}, {69, 69, 374}, {70, 100, -115}, {101, 101, 375}, {102, 122, 82}, },
            {{48, 83, -107}, {84, 84, 376}, {85, 115, -107}, {116, 116, 377}, {117, 122, 82}, },
            {{48, 122, -261}, },
            {{48, 122, -262}, },
            {{48, 70, -90}, {71, 71, 378}, {72, 102, -90}, {103, 103, 379}, {104, 122, 82}, },
            {{48, 122, -265}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 68, -39}, {69, 69, 380}, {70, 100, -115}, {101, 101, 381}, {102, 122, 82}, },
            {{48, 122, -277}, },
            {{48, 68, -39}, {69, 69, 382}, {70, 100, -115}, {101, 101, 383}, {102, 122, 82}, },
            {{48, 75, -28}, {76, 76, 384}, {77, 107, -121}, {108, 108, 385}, {109, 122, 82}, },
            {{48, 122, -279}, },
            {{48, 122, -280}, },
            {{48, 81, -30}, {82, 82, 386}, {83, 113, -30}, {114, 114, 387}, {115, 122, 82}, },
            {{48, 122, -283}, },
            {{48, 84, -38}, {85, 85, 388}, {86, 116, -38}, {117, 117, 389}, {118, 122, 82}, },
            {{48, 122, -285}, },
            {{48, 74, -140}, {75, 75, 390}, {76, 90, 82}, {95, 106, -140}, {107, 107, 391}, {108, 122, 82}, },
            {{48, 122, -287}, },
            {{48, 68, -39}, {69, 69, 392}, {70, 100, -115}, {101, 101, 393}, {102, 122, 82}, },
            {{48, 122, -33}, },
            {{48, 122, -289}, },
            {{48, 122, -33}, },
            {{48, 81, -30}, {82, 82, 394}, {83, 113, -30}, {114, 114, 395}, {115, 122, 82}, },
            {{48, 122, -293}, },
            {{48, 68, -39}, {69, 69, 396}, {70, 100, -115}, {101, 101, 397}, {102, 122, 82}, },
            {{48, 122, -295}, },
            {{48, 72, -36}, {73, 73, 398}, {74, 84, 82}, {85, 85, 399}, {86, 95, -38}, {97, 104, 82}, {105, 105, 400}, {106, 116, 82}, {117, 117, 401}, {118, 122, 82}, },
            {{48, 122, -297}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 68, -39}, {69, 69, 402}, {70, 100, -115}, {101, 101, 403}, {102, 122, 82}, },
            {{48, 122, -301}, },
            {{48, 68, -39}, {69, 69, 404}, {70, 100, -115}, {101, 101, 405}, {102, 122, 82}, },
            {{48, 122, -303}, },
            {{48, 68, -39}, {69, 69, 406}, {70, 100, -115}, {101, 101, 407}, {102, 122, 82}, },
            {{48, 78, -98}, {79, 79, 408}, {80, 80, 82}, {81, 81, 409}, {82, 90, 82}, {95, 110, -98}, {111, 111, 410}, {112, 112, 82}, {113, 113, 411}, {114, 122, 82}, },
            {{48, 72, -36}, {73, 73, 412}, {74, 104, -162}, {105, 105, 413}, {106, 122, 82}, },
            {{48, 122, -305}, },
            {{48, 122, -306}, },
            {{48, 122, -307}, },
            {{48, 81, -30}, {82, 82, 414}, {83, 113, -30}, {114, 114, 415}, {115, 122, 82}, },
            {{48, 122, -311}, },
            {},
            {},
            {{48, 101, -191}, },
            {{43, 43, 416}, {45, 45, 417}, {48, 57, 418}, },
            {{43, 57, -316}, },
            {{48, 82, -85}, {83, 83, 419}, {84, 114, -85}, {115, 115, 420}, {116, 122, 82}, },
            {{48, 122, -318}, },
            {{48, 71, -26}, {72, 72, 421}, {73, 103, -43}, {104, 104, 422}, {105, 122, 82}, },
            {{48, 122, -320}, },
            {{48, 57, 82}, {65, 88, 82}, {89, 89, 423}, {90, 95, -25}, {97, 120, 82}, {121, 121, 424}, {122, 122, 82}, },
            {{48, 122, -322}, },
            {{48, 68, -39}, {69, 69, 425}, {70, 100, -115}, {101, 101, 426}, {102, 122, 82}, },
            {{48, 122, -324}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 83, -107}, {84, 84, 427}, {85, 115, -107}, {116, 116, 428}, {117, 122, 82}, },
            {{48, 122, -328}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 77, -32}, {78, 78, 429}, {79, 109, -42}, {110, 110, 430}, {111, 122, 82}, },
            {{48, 122, -332}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 72, -36}, {73, 73, 431}, {74, 104, -162}, {105, 105, 432}, {106, 122, 82}, },
            {{48, 122, -336}, },
            {{48, 72, -36}, {73, 73, 433}, {74, 104, -162}, {105, 105, 434}, {106, 122, 82}, },
            {{48, 122, -338}, },
            {{48, 75, -28}, {76, 76, 435}, {77, 107, -121}, {108, 108, 436}, {109, 122, 82}, },
            {{48, 122, -340}, },
            {{48, 68, -39}, {69, 69, 437}, {70, 100, -115}, {101, 101, 438}, {102, 122, 82}, },
            {{48, 122, -342}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 57, 82}, {65, 79, 82}, {80, 80, 439}, {81, 90, 82}, {95, 95, 82}, {97, 111, 82}, {112, 112, 440}, {113, 122, 82}, },
            {{48, 122, -346}, },
            {{48, 83, -107}, {84, 84, 441}, {85, 115, -107}, {116, 116, 442}, {117, 122, 82}, },
            {{48, 122, -348}, },
            {{48, 68, -39}, {69, 69, 443}, {70, 100, -115}, {101, 101, 444}, {102, 122, 82}, },
            {{48, 122, -350}, },
            {{48, 83, -107}, {84, 84, 445}, {85, 115, -107}, {116, 116, 446}, {117, 122, 82}, },
            {{48, 122, -352}, },
            {{48, 83, -107}, {84, 84, 447}, {85, 115, -107}, {116, 116, 448}, {117, 122, 82}, },
            {{48, 122, -354}, },
            {{48, 83, -107}, {84, 84, 449}, {85, 115, -107}, {116, 116, 450}, {117, 122, 82}, },
            {{48, 122, -356}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 79, -346}, {80, 80, 451}, {81, 111, -346}, {112, 112, 452}, {113, 122, 82}, },
            {{48, 122, -360}, },
            {{48, 77, -32}, {78, 78, 453}, {79, 109, -42}, {110, 110, 454}, {111, 122, 82}, },
            {{48, 122, -362}, },
            {{48, 84, -38}, {85, 85, 455}, {86, 116, -38}, {117, 117, 456}, {118, 122, 82}, },
            {{48, 122, -364}, },
            {{48, 57, 82}, {65, 65, 457}, {66, 95, -31}, {97, 97, 458}, {98, 122, 82}, },
            {{48, 122, -366}, },
            {{48, 81, -30}, {82, 82, 459}, {83, 113, -30}, {114, 114, 460}, {115, 122, 82}, },
            {{48, 122, -368}, },
            {{48, 68, -39}, {69, 69, 461}, {70, 100, -115}, {101, 101, 462}, {102, 122, 82}, },
            {{48, 77, -32}, {78, 78, 463}, {79, 109, -42}, {110, 110, 464}, {111, 122, 82}, },
            {{48, 122, -370}, },
            {{48, 122, -371}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 83, -107}, {84, 84, 465}, {85, 115, -107}, {116, 116, 466}, {117, 122, 82}, },
            {{48, 122, -378}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 83, -107}, {84, 84, 467}, {85, 115, -107}, {116, 116, 468}, {117, 122, 82}, },
            {{48, 122, -382}, },
            {{48, 81, -30}, {82, 82, 469}, {83, 113, -30}, {114, 114, 470}, {115, 122, 82}, },
            {{48, 122, -384}, },
            {{48, 82, -85}, {83, 83, 471}, {84, 114, -85}, {115, 115, 472}, {116, 122, 82}, },
            {{48, 122, -386}, },
            {{48, 88, -322}, {89, 89, 473}, {90, 120, -322}, {121, 121, 474}, {122, 122, 82}, },
            {{48, 122, -388}, },
            {{48, 81, -30}, {82, 82, 475}, {83, 113, -30}, {114, 114, 476}, {115, 122, 82}, },
            {{48, 122, -390}, },
            {{48, 68, -39}, {69, 69, 477}, {70, 100, -115}, {101, 101, 478}, {102, 122, 82}, },
            {{48, 122, -392}, },
            {{48, 66, -37}, {67, 67, 479}, {68, 98, -89}, {99, 99, 480}, {100, 122, 82}, },
            {{48, 122, -394}, },
            {{48, 83, -107}, {84, 84, 481}, {85, 115, -107}, {116, 116, 482}, {117, 122, 82}, },
            {{48, 122, -396}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 77, -32}, {78, 78, 483}, {79, 109, -42}, {110, 110, 484}, {111, 122, 82}, },
            {{48, 66, -37}, {67, 67, 485}, {68, 98, -89}, {99, 99, 486}, {100, 122, 82}, },
            {{48, 122, -400}, },
            {{48, 122, -401}, },
            {{48, 82, -85}, {83, 83, 487}, {84, 114, -85}, {115, 115, 488}, {116, 122, 82}, },
            {{48, 122, -404}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 69, -108}, {70, 70, 489}, {71, 90, 82}, {95, 101, -108}, {102, 102, 490}, {103, 122, 82}, },
            {{48, 122, -408}, },
            {{48, 77, -32}, {78, 78, 491}, {79, 109, -42}, {110, 110, 492}, {111, 122, 82}, },
            {{48, 84, -38}, {85, 85, 493}, {86, 116, -38}, {117, 117, 494}, {118, 122, 82}, },
            {{48, 122, -410}, },
            {{48, 122, -411}, },
            {{48, 70, -90}, {71, 71, 495}, {72, 102, -90}, {103, 103, 496}, {104, 122, 82}, },
            {{48, 122, -414}, },
            {{48, 68, -39}, {69, 69, 497}, {70, 100, -115}, {101, 101, 498}, {102, 122, 82}, },
            {{48, 122, -416}, },
            {{48, 57, 418}, },
            {{48, 57, 418}, },
            {{48, 57, 499}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 68, -39}, {69, 69, 500}, {70, 100, -115}, {101, 101, 501}, {102, 122, 82}, },
            {{48, 122, -423}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 57, 82}, {65, 65, 502}, {66, 95, -31}, {97, 97, 503}, {98, 122, 82}, },
            {{48, 122, -427}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 68, -39}, {69, 69, 504}, {70, 100, -115}, {101, 101, 505}, {102, 122, 82}, },
            {{48, 122, -431}, },
            {{48, 78, -98}, {79, 79, 506}, {80, 110, -98}, {111, 111, 507}, {112, 122, 82}, },
            {{48, 122, -433}, },
            {{48, 77, -32}, {78, 78, 508}, {79, 109, -42}, {110, 110, 509}, {111, 122, 82}, },
            {{48, 122, -435}, },
            {{48, 68, -39}, {69, 69, 510}, {70, 100, -115}, {101, 101, 511}, {102, 122, 82}, },
            {{48, 122, -437}, },
            {{48, 77, -32}, {78, 78, 512}, {79, 109, -42}, {110, 110, 513}, {111, 122, 82}, },
            {{48, 122, -439}, },
            {{48, 83, -107}, {84, 84, 514}, {85, 115, -107}, {116, 116, 515}, {117, 122, 82}, },
            {{48, 122, -441}, },
            {{48, 82, -85}, {83, 83, 516}, {84, 114, -85}, {115, 115, 517}, {116, 122, 82}, },
            {{48, 122, -443}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 68, -39}, {69, 69, 518}, {70, 100, -115}, {101, 101, 519}, {102, 122, 82}, },
            {{48, 122, -449}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 70, -90}, {71, 71, 520}, {72, 102, -90}, {103, 103, 521}, {104, 122, 82}, },
            {{48, 122, -455}, },
            {{48, 67, -87}, {68, 68, 522}, {69, 99, -147}, {100, 100, 523}, {101, 122, 82}, },
            {{48, 122, -457}, },
            {{48, 77, -32}, {78, 78, 524}, {79, 109, -42}, {110, 110, 525}, {111, 122, 82}, },
            {{48, 122, -459}, },
            {{48, 82, -85}, {83, 83, 526}, {84, 85, 82}, {86, 86, 527}, {87, 95, -24}, {97, 114, 82}, {115, 115, 528}, {116, 117, 82}, {118, 118, 529}, {119, 122, 82}, },
            {{48, 122, -461}, },
            {{48, 69, -108}, {70, 70, 530}, {71, 101, -408}, {102, 102, 531}, {103, 122, 82}, },
            {{48, 122, -463}, },
            {{48, 67, -87}, {68, 68, 532}, {69, 99, -147}, {100, 100, 533}, {101, 122, 82}, },
            {{48, 122, -465}, },
            {{48, 78, -98}, {79, 79, 534}, {80, 110, -98}, {111, 111, 535}, {112, 122, 82}, },
            {{48, 122, -467}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 68, -39}, {69, 69, 536}, {70, 100, -115}, {101, 101, 537}, {102, 122, 82}, },
            {{48, 122, -473}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 77, -32}, {78, 78, 538}, {79, 109, -42}, {110, 110, 539}, {111, 122, 82}, },
            {{48, 122, -477}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 83, -107}, {84, 84, 540}, {85, 115, -107}, {116, 116, 541}, {117, 122, 82}, },
            {{48, 122, -481}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 70, -90}, {71, 71, 542}, {72, 102, -90}, {103, 103, 543}, {104, 122, 82}, },
            {{48, 122, -485}, },
            {{48, 83, -107}, {84, 84, 544}, {85, 115, -107}, {116, 116, 545}, {117, 122, 82}, },
            {{48, 122, -487}, },
            {{48, 83, -107}, {84, 84, 546}, {85, 115, -107}, {116, 116, 547}, {117, 122, 82}, },
            {{48, 122, -489}, },
            {{48, 72, -36}, {73, 73, 548}, {74, 104, -162}, {105, 105, 549}, {106, 122, 82}, },
            {{48, 122, -491}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 68, -39}, {69, 69, 550}, {70, 100, -115}, {101, 101, 551}, {102, 122, 82}, },
            {{48, 122, -495}, },
            {{48, 77, -32}, {78, 78, 552}, {79, 109, -42}, {110, 110, 553}, {111, 122, 82}, },
            {{48, 122, -497}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 57, 499}, },
            {{48, 77, -32}, {78, 78, 554}, {79, 109, -42}, {110, 110, 555}, {111, 122, 82}, },
            {{48, 122, -502}, },
            {{48, 77, -32}, {78, 78, 556}, {79, 109, -42}, {110, 110, 557}, {111, 122, 82}, },
            {{48, 122, -504}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 77, -32}, {78, 78, 558}, {79, 109, -42}, {110, 110, 559}, {111, 122, 82}, },
            {{48, 122, -508}, },
            {{48, 66, -37}, {67, 67, 560}, {68, 98, -89}, {99, 99, 561}, {100, 122, 82}, },
            {{48, 122, -510}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 83, -107}, {84, 84, 562}, {85, 115, -107}, {116, 116, 563}, {117, 122, 82}, },
            {{48, 122, -514}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 77, -32}, {78, 78, 564}, {79, 109, -42}, {110, 110, 565}, {111, 122, 82}, },
            {{48, 122, -520}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 68, -39}, {69, 69, 566}, {70, 100, -115}, {101, 101, 567}, {102, 122, 82}, },
            {{48, 122, -524}, },
            {{48, 66, -37}, {67, 67, 568}, {68, 98, -89}, {99, 99, 569}, {100, 122, 82}, },
            {{48, 122, -526}, },
            {{48, 68, -39}, {69, 69, 570}, {70, 100, -115}, {101, 101, 571}, {102, 122, 82}, },
            {{48, 57, 82}, {65, 65, 572}, {66, 95, -31}, {97, 97, 573}, {98, 122, 82}, },
            {{48, 122, -528}, },
            {{48, 122, -529}, },
            {{48, 72, -36}, {73, 73, 574}, {74, 104, -162}, {105, 105, 575}, {106, 122, 82}, },
            {{48, 122, -532}, },
            {{48, 68, -39}, {69, 69, 576}, {70, 100, -115}, {101, 101, 577}, {102, 122, 82}, },
            {{48, 122, -534}, },
            {{48, 82, -85}, {83, 83, 578}, {84, 114, -85}, {115, 115, 579}, {116, 122, 82}, },
            {{48, 122, -536}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 57, 82}, {65, 65, 580}, {66, 95, -31}, {97, 97, 581}, {98, 122, 82}, },
            {{48, 122, -548}, },
            {{48, 77, -32}, {78, 78, 582}, {79, 109, -42}, {110, 110, 583}, {111, 122, 82}, },
            {{48, 122, -550}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 68, -39}, {69, 69, 584}, {70, 100, -115}, {101, 101, 585}, {102, 122, 82}, },
            {{48, 122, -554}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 57, 82}, {65, 65, 586}, {66, 95, -31}, {97, 97, 587}, {98, 122, 82}, },
            {{48, 122, -560}, },
            {{48, 83, -107}, {84, 84, 588}, {85, 115, -107}, {116, 116, 589}, {117, 122, 82}, },
            {{48, 122, -562}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 68, -39}, {69, 69, 590}, {70, 100, -115}, {101, 101, 591}, {102, 122, 82}, },
            {{48, 122, -570}, },
            {{48, 66, -37}, {67, 67, 592}, {68, 98, -89}, {99, 99, 593}, {100, 122, 82}, },
            {{48, 122, -572}, },
            {{48, 75, -28}, {76, 76, 594}, {77, 107, -121}, {108, 108, 595}, {109, 122, 82}, },
            {{48, 122, -574}, },
            {{48, 77, -32}, {78, 78, 596}, {79, 109, -42}, {110, 110, 597}, {111, 122, 82}, },
            {{48, 122, -576}, },
            {{48, 69, -108}, {70, 70, 598}, {71, 101, -408}, {102, 102, 599}, {103, 122, 82}, },
            {{48, 122, -578}, },
            {{48, 68, -39}, {69, 69, 600}, {70, 100, -115}, {101, 101, 601}, {102, 122, 82}, },
            {{48, 122, -580}, },
            {{48, 76, -167}, {77, 77, 602}, {78, 108, -167}, {109, 109, 603}, {110, 122, 82}, },
            {{48, 122, -582}, },
            {{48, 68, -39}, {69, 69, 604}, {70, 100, -115}, {101, 101, 605}, {102, 122, 82}, },
            {{48, 122, -584}, },
            {{48, 67, -87}, {68, 68, 606}, {69, 99, -147}, {100, 100, 607}, {101, 122, 82}, },
            {{48, 122, -586}, },
            {{48, 81, -30}, {82, 82, 608}, {83, 113, -30}, {114, 114, 609}, {115, 122, 82}, },
            {{48, 122, -588}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 78, -98}, {79, 79, 610}, {80, 110, -98}, {111, 111, 611}, {112, 122, 82}, },
            {{48, 122, -592}, },
            {{48, 83, -107}, {84, 84, 612}, {85, 115, -107}, {116, 116, 613}, {117, 122, 82}, },
            {{48, 122, -594}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 68, -39}, {69, 69, 614}, {70, 100, -115}, {101, 101, 615}, {102, 122, 82}, },
            {{48, 122, -598}, },
            {{48, 72, -36}, {73, 73, 616}, {74, 104, -162}, {105, 105, 617}, {106, 122, 82}, },
            {{48, 122, -600}, },
            {{48, 83, -107}, {84, 84, 618}, {85, 115, -107}, {116, 116, 619}, {117, 122, 82}, },
            {{48, 122, -602}, },
            {{48, 79, -346}, {80, 80, 620}, {81, 111, -346}, {112, 112, 621}, {113, 122, 82}, },
            {{48, 122, -604}, },
            {{48, 67, -87}, {68, 68, 622}, {69, 99, -147}, {100, 100, 623}, {101, 122, 82}, },
            {{48, 122, -606}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 88, -322}, {89, 89, 624}, {90, 120, -322}, {121, 121, 625}, {122, 122, 82}, },
            {{48, 122, -610}, },
            {{48, 69, -108}, {70, 70, 626}, {71, 101, -408}, {102, 102, 627}, {103, 122, 82}, },
            {{48, 122, -612}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 67, -87}, {68, 68, 628}, {69, 99, -147}, {100, 100, 629}, {101, 122, 82}, },
            {{48, 122, -616}, },
            {{48, 77, -32}, {78, 78, 630}, {79, 109, -42}, {110, 110, 631}, {111, 122, 82}, },
            {{48, 122, -618}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
            {{48, 68, -39}, {69, 69, 632}, {70, 100, -115}, {101, 101, 633}, {102, 122, 82}, },
            {{48, 122, -632}, },
            {{48, 67, -87}, {68, 68, 634}, {69, 99, -147}, {100, 100, 635}, {101, 122, 82}, },
            {{48, 122, -634}, },
            {{48, 122, -33}, },
            {{48, 122, -33}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {-1, 0, -1, -1, -1, 9, 20, 4, 5, 24, 19, 7, 17, 11, 8, 101, 6, 21, 16, 12, 14, -1, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 22, 23, 25, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, -1, 18, -1, 103, -1, 104, -1, 2, -1, 10, -1, -1, -1, 101, 99, 15, 13, 99, 99, 99, 99, 99, 99, 33, 99, 99, 99, 99, 99, 33, 99, 99, 99, 38, 99, 99, 38, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 63, 99, 63, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 80, 99, 80, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 3, 102, -1, 1, -1, -1, -1, 104, 100, 26, 26, 99, 28, 99, 28, 30, 31, 30, 31, 99, 99, 34, 34, 35, 35, 36, 36, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 55, 55, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 72, 72, 74, 74, 73, 73, 75, 75, 76, 76, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 84, 99, 84, 99, 99, 99, 99, 99, 99, 89, 89, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 1, 105, 100, -1, -1, 99, 99, 99, 99, 99, 99, 99, 99, 40, 40, 99, 99, 41, 41, 99, 99, 43, 43, 99, 99, 99, 99, 99, 99, 99, 99, 48, 48, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 56, 56, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 66, 66, 67, 67, 70, 70, 71, 71, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 85, 85, 99, 99, 99, 99, 91, 91, 92, 92, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, -1, -1, 100, 27, 27, 99, 99, 32, 32, 99, 99, 39, 39, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 51, 51, 52, 52, 99, 99, 54, 54, 57, 57, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 77, 77, 78, 78, 99, 99, 82, 82, 99, 99, 68, 68, 99, 99, 86, 86, 99, 99, 99, 99, 99, 99, 99, 99, 95, 95, 99, 99, 99, 99, 98, 98, 100, 99, 99, 99, 99, 42, 42, 99, 99, 99, 99, 46, 46, 99, 99, 49, 49, 50, 50, 99, 99, 58, 58, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 79, 79, 81, 81, 83, 83, 87, 87, 88, 88, 99, 99, 99, 99, 96, 96, 99, 99, 29, 29, 37, 37, 99, 99, 99, 99, 47, 47, 53, 53, 59, 59, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 45, 45, 99, 99, 99, 99, 62, 62, 99, 99, 99, 99, 99, 99, 99, 99, 94, 94, 97, 97, 99, 99, 99, 99, 61, 61, 99, 99, 99, 99, 69, 69, 90, 90, 93, 93, 44, 44, 60, 60, 64, 64, 99, 99, 99, 99, 65, 65, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(int id)
        {
            this.id = id;
        }

        public int id()
        {
            return id;
        }
    }
}
