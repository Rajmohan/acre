/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.acre.lang.analysis;

import java.util.*;
import org.acre.lang.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(Node node)
    {
    }

    public void defaultOut(Node node)
    {
    }

    public void caseStart(Start node)
    {
        inStart(node);
        node.getPQueryProgram().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAQueryProgram(AQueryProgram node)
    {
        defaultIn(node);
    }

    public void outAQueryProgram(AQueryProgram node)
    {
        defaultOut(node);
    }

    public void caseAQueryProgram(AQueryProgram node)
    {
        inAQueryProgram(node);
        if(node.getQueryProgram() != null)
        {
            node.getQueryProgram().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getDeclaration() != null)
        {
            node.getDeclaration().apply(this);
        }
        outAQueryProgram(node);
    }

    public void inAFullQueryProgram(AFullQueryProgram node)
    {
        defaultIn(node);
    }

    public void outAFullQueryProgram(AFullQueryProgram node)
    {
        defaultOut(node);
    }

    public void caseAFullQueryProgram(AFullQueryProgram node)
    {
        inAFullQueryProgram(node);
        if(node.getQueryProgram() != null)
        {
            node.getQueryProgram().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getQuery() != null)
        {
            node.getQuery().apply(this);
        }
        outAFullQueryProgram(node);
    }

    public void inAQueryQueryProgram(AQueryQueryProgram node)
    {
        defaultIn(node);
    }

    public void outAQueryQueryProgram(AQueryQueryProgram node)
    {
        defaultOut(node);
    }

    public void caseAQueryQueryProgram(AQueryQueryProgram node)
    {
        inAQueryQueryProgram(node);
        if(node.getQuery() != null)
        {
            node.getQuery().apply(this);
        }
        outAQueryQueryProgram(node);
    }

    public void inADeclarationQueryProgram(ADeclarationQueryProgram node)
    {
        defaultIn(node);
    }

    public void outADeclarationQueryProgram(ADeclarationQueryProgram node)
    {
        defaultOut(node);
    }

    public void caseADeclarationQueryProgram(ADeclarationQueryProgram node)
    {
        inADeclarationQueryProgram(node);
        if(node.getDeclaration() != null)
        {
            node.getDeclaration().apply(this);
        }
        outADeclarationQueryProgram(node);
    }

    public void inAStandaloneSemicolonQueryProgram(AStandaloneSemicolonQueryProgram node)
    {
        defaultIn(node);
    }

    public void outAStandaloneSemicolonQueryProgram(AStandaloneSemicolonQueryProgram node)
    {
        defaultOut(node);
    }

    public void caseAStandaloneSemicolonQueryProgram(AStandaloneSemicolonQueryProgram node)
    {
        inAStandaloneSemicolonQueryProgram(node);
        if(node.getQueryProgram() != null)
        {
            node.getQueryProgram().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAStandaloneSemicolonQueryProgram(node);
    }

    public void inAIncludeDeclaration(AIncludeDeclaration node)
    {
        defaultIn(node);
    }

    public void outAIncludeDeclaration(AIncludeDeclaration node)
    {
        defaultOut(node);
    }

    public void caseAIncludeDeclaration(AIncludeDeclaration node)
    {
        inAIncludeDeclaration(node);
        if(node.getIncludeClause() != null)
        {
            node.getIncludeClause().apply(this);
        }
        outAIncludeDeclaration(node);
    }

    public void inAAliasDeclaration(AAliasDeclaration node)
    {
        defaultIn(node);
    }

    public void outAAliasDeclaration(AAliasDeclaration node)
    {
        defaultOut(node);
    }

    public void caseAAliasDeclaration(AAliasDeclaration node)
    {
        inAAliasDeclaration(node);
        if(node.getAliasClause() != null)
        {
            node.getAliasClause().apply(this);
        }
        outAAliasDeclaration(node);
    }

    public void inAReturnDeclaration(AReturnDeclaration node)
    {
        defaultIn(node);
    }

    public void outAReturnDeclaration(AReturnDeclaration node)
    {
        defaultOut(node);
    }

    public void caseAReturnDeclaration(AReturnDeclaration node)
    {
        inAReturnDeclaration(node);
        if(node.getReturnQuery() != null)
        {
            node.getReturnQuery().apply(this);
        }
        outAReturnDeclaration(node);
    }

    public void inADefineDeclaration(ADefineDeclaration node)
    {
        defaultIn(node);
    }

    public void outADefineDeclaration(ADefineDeclaration node)
    {
        defaultOut(node);
    }

    public void caseADefineDeclaration(ADefineDeclaration node)
    {
        inADefineDeclaration(node);
        if(node.getDefineQuery() != null)
        {
            node.getDefineQuery().apply(this);
        }
        outADefineDeclaration(node);
    }

    public void inAUndefDeclaration(AUndefDeclaration node)
    {
        defaultIn(node);
    }

    public void outAUndefDeclaration(AUndefDeclaration node)
    {
        defaultOut(node);
    }

    public void caseAUndefDeclaration(AUndefDeclaration node)
    {
        inAUndefDeclaration(node);
        if(node.getUndefineQuery() != null)
        {
            node.getUndefineQuery().apply(this);
        }
        outAUndefDeclaration(node);
    }

    public void inASimpleIncludeClause(ASimpleIncludeClause node)
    {
        defaultIn(node);
    }

    public void outASimpleIncludeClause(ASimpleIncludeClause node)
    {
        defaultOut(node);
    }

    public void caseASimpleIncludeClause(ASimpleIncludeClause node)
    {
        inASimpleIncludeClause(node);
        if(node.getInclude() != null)
        {
            node.getInclude().apply(this);
        }
        if(node.getQualifiedName() != null)
        {
            node.getQualifiedName().apply(this);
        }
        outASimpleIncludeClause(node);
    }

    public void inAAliasClause(AAliasClause node)
    {
        defaultIn(node);
    }

    public void outAAliasClause(AAliasClause node)
    {
        defaultOut(node);
    }

    public void caseAAliasClause(AAliasClause node)
    {
        inAAliasClause(node);
        if(node.getAlias() != null)
        {
            node.getAlias().apply(this);
        }
        if(node.getQualifiedName() != null)
        {
            node.getQualifiedName().apply(this);
        }
        if(node.getAsIdentifier() != null)
        {
            node.getAsIdentifier().apply(this);
        }
        outAAliasClause(node);
    }

    public void inAAsIdentifier(AAsIdentifier node)
    {
        defaultIn(node);
    }

    public void outAAsIdentifier(AAsIdentifier node)
    {
        defaultOut(node);
    }

    public void caseAAsIdentifier(AAsIdentifier node)
    {
        inAAsIdentifier(node);
        if(node.getAs() != null)
        {
            node.getAs().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAAsIdentifier(node);
    }

    public void inADefineQuery(ADefineQuery node)
    {
        defaultIn(node);
    }

    public void outADefineQuery(ADefineQuery node)
    {
        defaultOut(node);
    }

    public void caseADefineQuery(ADefineQuery node)
    {
        inADefineQuery(node);
        if(node.getDefine() != null)
        {
            node.getDefine().apply(this);
        }
        if(node.getTquery() != null)
        {
            node.getTquery().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getDefineQueryX() != null)
        {
            node.getDefineQueryX().apply(this);
        }
        if(node.getAs() != null)
        {
            node.getAs().apply(this);
        }
        if(node.getQuery() != null)
        {
            node.getQuery().apply(this);
        }
        outADefineQuery(node);
    }

    public void inADefineQueryX(ADefineQueryX node)
    {
        defaultIn(node);
    }

    public void outADefineQueryX(ADefineQueryX node)
    {
        defaultOut(node);
    }

    public void caseADefineQueryX(ADefineQueryX node)
    {
        inADefineQueryX(node);
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getParameterList() != null)
        {
            node.getParameterList().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outADefineQueryX(node);
    }

    public void inAReturnQuery(AReturnQuery node)
    {
        defaultIn(node);
    }

    public void outAReturnQuery(AReturnQuery node)
    {
        defaultOut(node);
    }

    public void caseAReturnQuery(AReturnQuery node)
    {
        inAReturnQuery(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getQuery() != null)
        {
            node.getQuery().apply(this);
        }
        outAReturnQuery(node);
    }

    public void inATupleListReturnQuery(ATupleListReturnQuery node)
    {
        defaultIn(node);
    }

    public void outATupleListReturnQuery(ATupleListReturnQuery node)
    {
        defaultOut(node);
    }

    public void caseATupleListReturnQuery(ATupleListReturnQuery node)
    {
        inATupleListReturnQuery(node);
        if(node.getTupleList() != null)
        {
            node.getTupleList().apply(this);
        }
        outATupleListReturnQuery(node);
    }

    public void inABracketedTupleListReturnQuery(ABracketedTupleListReturnQuery node)
    {
        defaultIn(node);
    }

    public void outABracketedTupleListReturnQuery(ABracketedTupleListReturnQuery node)
    {
        defaultOut(node);
    }

    public void caseABracketedTupleListReturnQuery(ABracketedTupleListReturnQuery node)
    {
        inABracketedTupleListReturnQuery(node);
        if(node.getBracketedTupleList() != null)
        {
            node.getBracketedTupleList().apply(this);
        }
        outABracketedTupleListReturnQuery(node);
    }

    public void inASingleBracketedTupleList(ASingleBracketedTupleList node)
    {
        defaultIn(node);
    }

    public void outASingleBracketedTupleList(ASingleBracketedTupleList node)
    {
        defaultOut(node);
    }

    public void caseASingleBracketedTupleList(ASingleBracketedTupleList node)
    {
        inASingleBracketedTupleList(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outASingleBracketedTupleList(node);
    }

    public void inAMultipleBracketedTupleList(AMultipleBracketedTupleList node)
    {
        defaultIn(node);
    }

    public void outAMultipleBracketedTupleList(AMultipleBracketedTupleList node)
    {
        defaultOut(node);
    }

    public void caseAMultipleBracketedTupleList(AMultipleBracketedTupleList node)
    {
        inAMultipleBracketedTupleList(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getIdentifierList() != null)
        {
            node.getIdentifierList().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outAMultipleBracketedTupleList(node);
    }

    public void inASingleTupleList(ASingleTupleList node)
    {
        defaultIn(node);
    }

    public void outASingleTupleList(ASingleTupleList node)
    {
        defaultOut(node);
    }

    public void caseASingleTupleList(ASingleTupleList node)
    {
        inASingleTupleList(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outASingleTupleList(node);
    }

    public void inAMultipleTupleList(AMultipleTupleList node)
    {
        defaultIn(node);
    }

    public void outAMultipleTupleList(AMultipleTupleList node)
    {
        defaultOut(node);
    }

    public void caseAMultipleTupleList(AMultipleTupleList node)
    {
        inAMultipleTupleList(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getIdentifierList() != null)
        {
            node.getIdentifierList().apply(this);
        }
        outAMultipleTupleList(node);
    }

    public void inAIdentifierList(AIdentifierList node)
    {
        defaultIn(node);
    }

    public void outAIdentifierList(AIdentifierList node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierList(AIdentifierList node)
    {
        inAIdentifierList(node);
        if(node.getIdentifierList() != null)
        {
            node.getIdentifierList().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierList(node);
    }

    public void inASingleIdentifierList(ASingleIdentifierList node)
    {
        defaultIn(node);
    }

    public void outASingleIdentifierList(ASingleIdentifierList node)
    {
        defaultOut(node);
    }

    public void caseASingleIdentifierList(ASingleIdentifierList node)
    {
        inASingleIdentifierList(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outASingleIdentifierList(node);
    }

    public void inAParameterList(AParameterList node)
    {
        defaultIn(node);
    }

    public void outAParameterList(AParameterList node)
    {
        defaultOut(node);
    }

    public void caseAParameterList(AParameterList node)
    {
        inAParameterList(node);
        if(node.getParameterList() != null)
        {
            node.getParameterList().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAParameterList(node);
    }

    public void inASingleParameterList(ASingleParameterList node)
    {
        defaultIn(node);
    }

    public void outASingleParameterList(ASingleParameterList node)
    {
        defaultOut(node);
    }

    public void caseASingleParameterList(ASingleParameterList node)
    {
        inASingleParameterList(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outASingleParameterList(node);
    }

    public void inAUndefineQuery(AUndefineQuery node)
    {
        defaultIn(node);
    }

    public void outAUndefineQuery(AUndefineQuery node)
    {
        defaultOut(node);
    }

    public void caseAUndefineQuery(AUndefineQuery node)
    {
        inAUndefineQuery(node);
        if(node.getUndefine() != null)
        {
            node.getUndefine().apply(this);
        }
        if(node.getTquery() != null)
        {
            node.getTquery().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAUndefineQuery(node);
    }

    public void inAQualifiedName(AQualifiedName node)
    {
        defaultIn(node);
    }

    public void outAQualifiedName(AQualifiedName node)
    {
        defaultOut(node);
    }

    public void caseAQualifiedName(AQualifiedName node)
    {
        inAQualifiedName(node);
        if(node.getQualifiedName() != null)
        {
            node.getQualifiedName().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAQualifiedName(node);
    }

    public void inASingleQualifiedName(ASingleQualifiedName node)
    {
        defaultIn(node);
    }

    public void outASingleQualifiedName(ASingleQualifiedName node)
    {
        defaultOut(node);
    }

    public void caseASingleQualifiedName(ASingleQualifiedName node)
    {
        inASingleQualifiedName(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outASingleQualifiedName(node);
    }

    public void inAQuery(AQuery node)
    {
        defaultIn(node);
    }

    public void outAQuery(AQuery node)
    {
        defaultOut(node);
    }

    public void caseAQuery(AQuery node)
    {
        inAQuery(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAQuery(node);
    }

    public void inATmpSelectQuery(ATmpSelectQuery node)
    {
        defaultIn(node);
    }

    public void outATmpSelectQuery(ATmpSelectQuery node)
    {
        defaultOut(node);
    }

    public void caseATmpSelectQuery(ATmpSelectQuery node)
    {
        inATmpSelectQuery(node);
        if(node.getSelectX() != null)
        {
            node.getSelectX().apply(this);
        }
        outATmpSelectQuery(node);
    }

    public void inATmpExprQuery(ATmpExprQuery node)
    {
        defaultIn(node);
    }

    public void outATmpExprQuery(ATmpExprQuery node)
    {
        defaultOut(node);
    }

    public void caseATmpExprQuery(ATmpExprQuery node)
    {
        inATmpExprQuery(node);
        if(node.getExprRestricted() != null)
        {
            node.getExprRestricted().apply(this);
        }
        outATmpExprQuery(node);
    }

    public void inAIdentifierQuery(AIdentifierQuery node)
    {
        defaultIn(node);
    }

    public void outAIdentifierQuery(AIdentifierQuery node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierQuery(AIdentifierQuery node)
    {
        inAIdentifierQuery(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierQuery(node);
    }

    public void inADistinctQuery(ADistinctQuery node)
    {
        defaultIn(node);
    }

    public void outADistinctQuery(ADistinctQuery node)
    {
        defaultOut(node);
    }

    public void caseADistinctQuery(ADistinctQuery node)
    {
        inADistinctQuery(node);
        if(node.getDistinct() != null)
        {
            node.getDistinct().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getQueryRestricted() != null)
        {
            node.getQueryRestricted().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outADistinctQuery(node);
    }

    public void inADistinctIdentifierQuery(ADistinctIdentifierQuery node)
    {
        defaultIn(node);
    }

    public void outADistinctIdentifierQuery(ADistinctIdentifierQuery node)
    {
        defaultOut(node);
    }

    public void caseADistinctIdentifierQuery(ADistinctIdentifierQuery node)
    {
        inADistinctIdentifierQuery(node);
        if(node.getDistinct() != null)
        {
            node.getDistinct().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outADistinctIdentifierQuery(node);
    }

    public void inASelectQueryRestricted(ASelectQueryRestricted node)
    {
        defaultIn(node);
    }

    public void outASelectQueryRestricted(ASelectQueryRestricted node)
    {
        defaultOut(node);
    }

    public void caseASelectQueryRestricted(ASelectQueryRestricted node)
    {
        inASelectQueryRestricted(node);
        if(node.getSelectX() != null)
        {
            node.getSelectX().apply(this);
        }
        outASelectQueryRestricted(node);
    }

    public void inAExprQueryRestricted(AExprQueryRestricted node)
    {
        defaultIn(node);
    }

    public void outAExprQueryRestricted(AExprQueryRestricted node)
    {
        defaultOut(node);
    }

    public void caseAExprQueryRestricted(AExprQueryRestricted node)
    {
        inAExprQueryRestricted(node);
        if(node.getExprRestricted() != null)
        {
            node.getExprRestricted().apply(this);
        }
        outAExprQueryRestricted(node);
    }

    public void inASelectX(ASelectX node)
    {
        defaultIn(node);
    }

    public void outASelectX(ASelectX node)
    {
        defaultOut(node);
    }

    public void caseASelectX(ASelectX node)
    {
        inASelectX(node);
        if(node.getSelect() != null)
        {
            node.getSelect().apply(this);
        }
        if(node.getDistinct() != null)
        {
            node.getDistinct().apply(this);
        }
        if(node.getProjectionAttributes() != null)
        {
            node.getProjectionAttributes().apply(this);
        }
        if(node.getFromClause() != null)
        {
            node.getFromClause().apply(this);
        }
        if(node.getWhereClause() != null)
        {
            node.getWhereClause().apply(this);
        }
        if(node.getGroupClause() != null)
        {
            node.getGroupClause().apply(this);
        }
        if(node.getOrderClause() != null)
        {
            node.getOrderClause().apply(this);
        }
        outASelectX(node);
    }

    public void inAListProjectionAttributes(AListProjectionAttributes node)
    {
        defaultIn(node);
    }

    public void outAListProjectionAttributes(AListProjectionAttributes node)
    {
        defaultOut(node);
    }

    public void caseAListProjectionAttributes(AListProjectionAttributes node)
    {
        inAListProjectionAttributes(node);
        if(node.getProjectionList() != null)
        {
            node.getProjectionList().apply(this);
        }
        outAListProjectionAttributes(node);
    }

    public void inAAnyProjectionAttributes(AAnyProjectionAttributes node)
    {
        defaultIn(node);
    }

    public void outAAnyProjectionAttributes(AAnyProjectionAttributes node)
    {
        defaultOut(node);
    }

    public void caseAAnyProjectionAttributes(AAnyProjectionAttributes node)
    {
        inAAnyProjectionAttributes(node);
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        outAAnyProjectionAttributes(node);
    }

    public void inAProjectionList(AProjectionList node)
    {
        defaultIn(node);
    }

    public void outAProjectionList(AProjectionList node)
    {
        defaultOut(node);
    }

    public void caseAProjectionList(AProjectionList node)
    {
        inAProjectionList(node);
        if(node.getProjectionList() != null)
        {
            node.getProjectionList().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getProjection() != null)
        {
            node.getProjection().apply(this);
        }
        outAProjectionList(node);
    }

    public void inASingleProjectionList(ASingleProjectionList node)
    {
        defaultIn(node);
    }

    public void outASingleProjectionList(ASingleProjectionList node)
    {
        defaultOut(node);
    }

    public void caseASingleProjectionList(ASingleProjectionList node)
    {
        inASingleProjectionList(node);
        if(node.getProjection() != null)
        {
            node.getProjection().apply(this);
        }
        outASingleProjectionList(node);
    }

    public void inAFieldProjection(AFieldProjection node)
    {
        defaultIn(node);
    }

    public void outAFieldProjection(AFieldProjection node)
    {
        defaultOut(node);
    }

    public void caseAFieldProjection(AFieldProjection node)
    {
        inAFieldProjection(node);
        if(node.getField() != null)
        {
            node.getField().apply(this);
        }
        outAFieldProjection(node);
    }

    public void inATmpExprProjection(ATmpExprProjection node)
    {
        defaultIn(node);
    }

    public void outATmpExprProjection(ATmpExprProjection node)
    {
        defaultOut(node);
    }

    public void caseATmpExprProjection(ATmpExprProjection node)
    {
        inATmpExprProjection(node);
        if(node.getExprRestricted() != null)
        {
            node.getExprRestricted().apply(this);
        }
        if(node.getAsIdentifier() != null)
        {
            node.getAsIdentifier().apply(this);
        }
        outATmpExprProjection(node);
    }

    public void inATmpIdentifierProjection(ATmpIdentifierProjection node)
    {
        defaultIn(node);
    }

    public void outATmpIdentifierProjection(ATmpIdentifierProjection node)
    {
        defaultOut(node);
    }

    public void caseATmpIdentifierProjection(ATmpIdentifierProjection node)
    {
        inATmpIdentifierProjection(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getAsIdentifier() != null)
        {
            node.getAsIdentifier().apply(this);
        }
        outATmpIdentifierProjection(node);
    }

    public void inAExprProjection(AExprProjection node)
    {
        defaultIn(node);
    }

    public void outAExprProjection(AExprProjection node)
    {
        defaultOut(node);
    }

    public void caseAExprProjection(AExprProjection node)
    {
        inAExprProjection(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getAsIdentifier() != null)
        {
            node.getAsIdentifier().apply(this);
        }
        outAExprProjection(node);
    }

    public void inAFromClause(AFromClause node)
    {
        defaultIn(node);
    }

    public void outAFromClause(AFromClause node)
    {
        defaultOut(node);
    }

    public void caseAFromClause(AFromClause node)
    {
        inAFromClause(node);
        if(node.getFrom() != null)
        {
            node.getFrom().apply(this);
        }
        if(node.getFromClauseList() != null)
        {
            node.getFromClauseList().apply(this);
        }
        outAFromClause(node);
    }

    public void inAFromClauseList(AFromClauseList node)
    {
        defaultIn(node);
    }

    public void outAFromClauseList(AFromClauseList node)
    {
        defaultOut(node);
    }

    public void caseAFromClauseList(AFromClauseList node)
    {
        inAFromClauseList(node);
        if(node.getFromClauseList() != null)
        {
            node.getFromClauseList().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getIteratorDef() != null)
        {
            node.getIteratorDef().apply(this);
        }
        outAFromClauseList(node);
    }

    public void inASingleFromClauseList(ASingleFromClauseList node)
    {
        defaultIn(node);
    }

    public void outASingleFromClauseList(ASingleFromClauseList node)
    {
        defaultOut(node);
    }

    public void caseASingleFromClauseList(ASingleFromClauseList node)
    {
        inASingleFromClauseList(node);
        if(node.getIteratorDef() != null)
        {
            node.getIteratorDef().apply(this);
        }
        outASingleFromClauseList(node);
    }

    public void inAIteratorDef(AIteratorDef node)
    {
        defaultIn(node);
    }

    public void outAIteratorDef(AIteratorDef node)
    {
        defaultOut(node);
    }

    public void caseAIteratorDef(AIteratorDef node)
    {
        inAIteratorDef(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getAsIdentifierOptAs() != null)
        {
            node.getAsIdentifierOptAs().apply(this);
        }
        outAIteratorDef(node);
    }

    public void inADistinctIteratorDef(ADistinctIteratorDef node)
    {
        defaultIn(node);
    }

    public void outADistinctIteratorDef(ADistinctIteratorDef node)
    {
        defaultOut(node);
    }

    public void caseADistinctIteratorDef(ADistinctIteratorDef node)
    {
        inADistinctIteratorDef(node);
        if(node.getDistinct() != null)
        {
            node.getDistinct().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getQueryRestricted() != null)
        {
            node.getQueryRestricted().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        if(node.getAsIdentifierOptAs() != null)
        {
            node.getAsIdentifierOptAs().apply(this);
        }
        outADistinctIteratorDef(node);
    }

    public void inADistinctIdentifierIteratorDef(ADistinctIdentifierIteratorDef node)
    {
        defaultIn(node);
    }

    public void outADistinctIdentifierIteratorDef(ADistinctIdentifierIteratorDef node)
    {
        defaultOut(node);
    }

    public void caseADistinctIdentifierIteratorDef(ADistinctIdentifierIteratorDef node)
    {
        inADistinctIdentifierIteratorDef(node);
        if(node.getDistinct() != null)
        {
            node.getDistinct().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        if(node.getAsIdentifierOptAs() != null)
        {
            node.getAsIdentifierOptAs().apply(this);
        }
        outADistinctIdentifierIteratorDef(node);
    }

    public void inAAsIdentifierOptAs(AAsIdentifierOptAs node)
    {
        defaultIn(node);
    }

    public void outAAsIdentifierOptAs(AAsIdentifierOptAs node)
    {
        defaultOut(node);
    }

    public void caseAAsIdentifierOptAs(AAsIdentifierOptAs node)
    {
        inAAsIdentifierOptAs(node);
        if(node.getAs() != null)
        {
            node.getAs().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAAsIdentifierOptAs(node);
    }

    public void inAWhereClause(AWhereClause node)
    {
        defaultIn(node);
    }

    public void outAWhereClause(AWhereClause node)
    {
        defaultOut(node);
    }

    public void caseAWhereClause(AWhereClause node)
    {
        inAWhereClause(node);
        if(node.getWhere() != null)
        {
            node.getWhere().apply(this);
        }
        if(node.getAll() != null)
        {
            node.getAll().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAWhereClause(node);
    }

    public void inATmpWhereClause(ATmpWhereClause node)
    {
        defaultIn(node);
    }

    public void outATmpWhereClause(ATmpWhereClause node)
    {
        defaultOut(node);
    }

    public void caseATmpWhereClause(ATmpWhereClause node)
    {
        inATmpWhereClause(node);
        if(node.getWhere() != null)
        {
            node.getWhere().apply(this);
        }
        if(node.getAll() != null)
        {
            node.getAll().apply(this);
        }
        if(node.getExprRestricted() != null)
        {
            node.getExprRestricted().apply(this);
        }
        outATmpWhereClause(node);
    }

    public void inAGroupClause(AGroupClause node)
    {
        defaultIn(node);
    }

    public void outAGroupClause(AGroupClause node)
    {
        defaultOut(node);
    }

    public void caseAGroupClause(AGroupClause node)
    {
        inAGroupClause(node);
        if(node.getGroup() != null)
        {
            node.getGroup().apply(this);
        }
        if(node.getBy() != null)
        {
            node.getBy().apply(this);
        }
        if(node.getFieldList() != null)
        {
            node.getFieldList().apply(this);
        }
        if(node.getHavingClause() != null)
        {
            node.getHavingClause().apply(this);
        }
        outAGroupClause(node);
    }

    public void inAHavingClause(AHavingClause node)
    {
        defaultIn(node);
    }

    public void outAHavingClause(AHavingClause node)
    {
        defaultOut(node);
    }

    public void caseAHavingClause(AHavingClause node)
    {
        inAHavingClause(node);
        if(node.getHaving() != null)
        {
            node.getHaving().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAHavingClause(node);
    }

    public void inATmpHavingClause(ATmpHavingClause node)
    {
        defaultIn(node);
    }

    public void outATmpHavingClause(ATmpHavingClause node)
    {
        defaultOut(node);
    }

    public void caseATmpHavingClause(ATmpHavingClause node)
    {
        inATmpHavingClause(node);
        if(node.getHaving() != null)
        {
            node.getHaving().apply(this);
        }
        if(node.getExprRestricted() != null)
        {
            node.getExprRestricted().apply(this);
        }
        outATmpHavingClause(node);
    }

    public void inAOrderClause(AOrderClause node)
    {
        defaultIn(node);
    }

    public void outAOrderClause(AOrderClause node)
    {
        defaultOut(node);
    }

    public void caseAOrderClause(AOrderClause node)
    {
        inAOrderClause(node);
        if(node.getOrder() != null)
        {
            node.getOrder().apply(this);
        }
        if(node.getBy() != null)
        {
            node.getBy().apply(this);
        }
        if(node.getSortCriteria() != null)
        {
            node.getSortCriteria().apply(this);
        }
        outAOrderClause(node);
    }

    public void inASortCriteria(ASortCriteria node)
    {
        defaultIn(node);
    }

    public void outASortCriteria(ASortCriteria node)
    {
        defaultOut(node);
    }

    public void caseASortCriteria(ASortCriteria node)
    {
        inASortCriteria(node);
        if(node.getSortCriterion() != null)
        {
            node.getSortCriterion().apply(this);
        }
        if(node.getSortCriteriaT() != null)
        {
            node.getSortCriteriaT().apply(this);
        }
        outASortCriteria(node);
    }

    public void inASortCriteriaT(ASortCriteriaT node)
    {
        defaultIn(node);
    }

    public void outASortCriteriaT(ASortCriteriaT node)
    {
        defaultOut(node);
    }

    public void caseASortCriteriaT(ASortCriteriaT node)
    {
        inASortCriteriaT(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getSortCriterion() != null)
        {
            node.getSortCriterion().apply(this);
        }
        if(node.getSortCriteriaT() != null)
        {
            node.getSortCriteriaT().apply(this);
        }
        outASortCriteriaT(node);
    }

    public void inASortCriterion(ASortCriterion node)
    {
        defaultIn(node);
    }

    public void outASortCriterion(ASortCriterion node)
    {
        defaultOut(node);
    }

    public void caseASortCriterion(ASortCriterion node)
    {
        inASortCriterion(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getSortCriterionT() != null)
        {
            node.getSortCriterionT().apply(this);
        }
        outASortCriterion(node);
    }

    public void inAAscSortCriterionT(AAscSortCriterionT node)
    {
        defaultIn(node);
    }

    public void outAAscSortCriterionT(AAscSortCriterionT node)
    {
        defaultOut(node);
    }

    public void caseAAscSortCriterionT(AAscSortCriterionT node)
    {
        inAAscSortCriterionT(node);
        if(node.getAsc() != null)
        {
            node.getAsc().apply(this);
        }
        outAAscSortCriterionT(node);
    }

    public void inADescSortCriterionT(ADescSortCriterionT node)
    {
        defaultIn(node);
    }

    public void outADescSortCriterionT(ADescSortCriterionT node)
    {
        defaultOut(node);
    }

    public void caseADescSortCriterionT(ADescSortCriterionT node)
    {
        inADescSortCriterionT(node);
        if(node.getDesc() != null)
        {
            node.getDesc().apply(this);
        }
        outADescSortCriterionT(node);
    }

    public void inAExpr(AExpr node)
    {
        defaultIn(node);
    }

    public void outAExpr(AExpr node)
    {
        defaultOut(node);
    }

    public void caseAExpr(AExpr node)
    {
        inAExpr(node);
        if(node.getExprRestricted() != null)
        {
            node.getExprRestricted().apply(this);
        }
        outAExpr(node);
    }

    public void inAIdentifierExpr(AIdentifierExpr node)
    {
        defaultIn(node);
    }

    public void outAIdentifierExpr(AIdentifierExpr node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierExpr(AIdentifierExpr node)
    {
        inAIdentifierExpr(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierExpr(node);
    }

    public void inALiteralExpr(ALiteralExpr node)
    {
        defaultIn(node);
    }

    public void outALiteralExpr(ALiteralExpr node)
    {
        defaultOut(node);
    }

    public void caseALiteralExpr(ALiteralExpr node)
    {
        inALiteralExpr(node);
        if(node.getLiteral() != null)
        {
            node.getLiteral().apply(this);
        }
        outALiteralExpr(node);
    }

    public void inAStarExpr(AStarExpr node)
    {
        defaultIn(node);
    }

    public void outAStarExpr(AStarExpr node)
    {
        defaultOut(node);
    }

    public void caseAStarExpr(AStarExpr node)
    {
        inAStarExpr(node);
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        outAStarExpr(node);
    }

    public void inALongParamExpr(ALongParamExpr node)
    {
        defaultIn(node);
    }

    public void outALongParamExpr(ALongParamExpr node)
    {
        defaultOut(node);
    }

    public void caseALongParamExpr(ALongParamExpr node)
    {
        inALongParamExpr(node);
        if(node.getDollar() != null)
        {
            node.getDollar().apply(this);
        }
        if(node.getLongLiteral() != null)
        {
            node.getLongLiteral().apply(this);
        }
        outALongParamExpr(node);
    }

    public void inANamedParamExpr(ANamedParamExpr node)
    {
        defaultIn(node);
    }

    public void outANamedParamExpr(ANamedParamExpr node)
    {
        defaultOut(node);
    }

    public void caseANamedParamExpr(ANamedParamExpr node)
    {
        inANamedParamExpr(node);
        if(node.getDollar() != null)
        {
            node.getDollar().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outANamedParamExpr(node);
    }

    public void inASelectExpr(ASelectExpr node)
    {
        defaultIn(node);
    }

    public void outASelectExpr(ASelectExpr node)
    {
        defaultOut(node);
    }

    public void caseASelectExpr(ASelectExpr node)
    {
        inASelectExpr(node);
        if(node.getSelectX() != null)
        {
            node.getSelectX().apply(this);
        }
        outASelectExpr(node);
    }

    public void inANestedExpr(ANestedExpr node)
    {
        defaultIn(node);
    }

    public void outANestedExpr(ANestedExpr node)
    {
        defaultOut(node);
    }

    public void caseANestedExpr(ANestedExpr node)
    {
        inANestedExpr(node);
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getQuery() != null)
        {
            node.getQuery().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outANestedExpr(node);
    }

    public void inACastExpr(ACastExpr node)
    {
        defaultIn(node);
    }

    public void outACastExpr(ACastExpr node)
    {
        defaultOut(node);
    }

    public void caseACastExpr(ACastExpr node)
    {
        inACastExpr(node);
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outACastExpr(node);
    }

    public void inACastPrimitiveExpr(ACastPrimitiveExpr node)
    {
        defaultIn(node);
    }

    public void outACastPrimitiveExpr(ACastPrimitiveExpr node)
    {
        defaultOut(node);
    }

    public void caseACastPrimitiveExpr(ACastPrimitiveExpr node)
    {
        inACastPrimitiveExpr(node);
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outACastPrimitiveExpr(node);
    }

    public void inAOrExpr(AOrExpr node)
    {
        defaultIn(node);
    }

    public void outAOrExpr(AOrExpr node)
    {
        defaultOut(node);
    }

    public void caseAOrExpr(AOrExpr node)
    {
        inAOrExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAOrExpr(node);
    }

    public void inABinorExpr(ABinorExpr node)
    {
        defaultIn(node);
    }

    public void outABinorExpr(ABinorExpr node)
    {
        defaultOut(node);
    }

    public void caseABinorExpr(ABinorExpr node)
    {
        inABinorExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getBinor() != null)
        {
            node.getBinor().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outABinorExpr(node);
    }

    public void inAExceptExpr(AExceptExpr node)
    {
        defaultIn(node);
    }

    public void outAExceptExpr(AExceptExpr node)
    {
        defaultOut(node);
    }

    public void caseAExceptExpr(AExceptExpr node)
    {
        inAExceptExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getExcept() != null)
        {
            node.getExcept().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAExceptExpr(node);
    }

    public void inAOrelseExpr(AOrelseExpr node)
    {
        defaultIn(node);
    }

    public void outAOrelseExpr(AOrelseExpr node)
    {
        defaultOut(node);
    }

    public void caseAOrelseExpr(AOrelseExpr node)
    {
        inAOrelseExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getOrelse() != null)
        {
            node.getOrelse().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAOrelseExpr(node);
    }

    public void inAAndExpr(AAndExpr node)
    {
        defaultIn(node);
    }

    public void outAAndExpr(AAndExpr node)
    {
        defaultOut(node);
    }

    public void caseAAndExpr(AAndExpr node)
    {
        inAAndExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAAndExpr(node);
    }

    public void inAEqualityExpr(AEqualityExpr node)
    {
        defaultIn(node);
    }

    public void outAEqualityExpr(AEqualityExpr node)
    {
        defaultOut(node);
    }

    public void caseAEqualityExpr(AEqualityExpr node)
    {
        inAEqualityExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getEqne() != null)
        {
            node.getEqne().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAEqualityExpr(node);
    }

    public void inAInstanceofExpr(AInstanceofExpr node)
    {
        defaultIn(node);
    }

    public void outAInstanceofExpr(AInstanceofExpr node)
    {
        defaultOut(node);
    }

    public void caseAInstanceofExpr(AInstanceofExpr node)
    {
        inAInstanceofExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getInstanceof() != null)
        {
            node.getInstanceof().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAInstanceofExpr(node);
    }

    public void inALikeExpr(ALikeExpr node)
    {
        defaultIn(node);
    }

    public void outALikeExpr(ALikeExpr node)
    {
        defaultOut(node);
    }

    public void caseALikeExpr(ALikeExpr node)
    {
        inALikeExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getLike() != null)
        {
            node.getLike().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outALikeExpr(node);
    }

    public void inARlikeExpr(ARlikeExpr node)
    {
        defaultIn(node);
    }

    public void outARlikeExpr(ARlikeExpr node)
    {
        defaultOut(node);
    }

    public void caseARlikeExpr(ARlikeExpr node)
    {
        inARlikeExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRlike() != null)
        {
            node.getRlike().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outARlikeExpr(node);
    }

    public void inARelationalExpr(ARelationalExpr node)
    {
        defaultIn(node);
    }

    public void outARelationalExpr(ARelationalExpr node)
    {
        defaultOut(node);
    }

    public void caseARelationalExpr(ARelationalExpr node)
    {
        inARelationalExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getCompareToken() != null)
        {
            node.getCompareToken().apply(this);
        }
        if(node.getCompositePredicate() != null)
        {
            node.getCompositePredicate().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outARelationalExpr(node);
    }

    public void inAAdditionExpr(AAdditionExpr node)
    {
        defaultIn(node);
    }

    public void outAAdditionExpr(AAdditionExpr node)
    {
        defaultOut(node);
    }

    public void caseAAdditionExpr(AAdditionExpr node)
    {
        inAAdditionExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAAdditionExpr(node);
    }

    public void inASubstractionExpr(ASubstractionExpr node)
    {
        defaultIn(node);
    }

    public void outASubstractionExpr(ASubstractionExpr node)
    {
        defaultOut(node);
    }

    public void caseASubstractionExpr(ASubstractionExpr node)
    {
        inASubstractionExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outASubstractionExpr(node);
    }

    public void inAMultiplicationExpr(AMultiplicationExpr node)
    {
        defaultIn(node);
    }

    public void outAMultiplicationExpr(AMultiplicationExpr node)
    {
        defaultOut(node);
    }

    public void caseAMultiplicationExpr(AMultiplicationExpr node)
    {
        inAMultiplicationExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAMultiplicationExpr(node);
    }

    public void inAIntersectionExpr(AIntersectionExpr node)
    {
        defaultIn(node);
    }

    public void outAIntersectionExpr(AIntersectionExpr node)
    {
        defaultOut(node);
    }

    public void caseAIntersectionExpr(AIntersectionExpr node)
    {
        inAIntersectionExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getSetAnd() != null)
        {
            node.getSetAnd().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAIntersectionExpr(node);
    }

    public void inADivisionExpr(ADivisionExpr node)
    {
        defaultIn(node);
    }

    public void outADivisionExpr(ADivisionExpr node)
    {
        defaultOut(node);
    }

    public void caseADivisionExpr(ADivisionExpr node)
    {
        inADivisionExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getDivide() != null)
        {
            node.getDivide().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outADivisionExpr(node);
    }

    public void inAModuloExpr(AModuloExpr node)
    {
        defaultIn(node);
    }

    public void outAModuloExpr(AModuloExpr node)
    {
        defaultOut(node);
    }

    public void caseAModuloExpr(AModuloExpr node)
    {
        inAModuloExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAModuloExpr(node);
    }

    public void inAIntersectExpr(AIntersectExpr node)
    {
        defaultIn(node);
    }

    public void outAIntersectExpr(AIntersectExpr node)
    {
        defaultOut(node);
    }

    public void caseAIntersectExpr(AIntersectExpr node)
    {
        inAIntersectExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getIntersect() != null)
        {
            node.getIntersect().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAIntersectExpr(node);
    }

    public void inAInExpr(AInExpr node)
    {
        defaultIn(node);
    }

    public void outAInExpr(AInExpr node)
    {
        defaultOut(node);
    }

    public void caseAInExpr(AInExpr node)
    {
        inAInExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        if(node.getIn() != null)
        {
            node.getIn().apply(this);
        }
        {
            Object temp[] = node.getRight().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PExpr) temp[i]).apply(this);
            }
        }
        outAInExpr(node);
    }

    public void inAForallExpr(AForallExpr node)
    {
        defaultIn(node);
    }

    public void outAForallExpr(AForallExpr node)
    {
        defaultOut(node);
    }

    public void caseAForallExpr(AForallExpr node)
    {
        inAForallExpr(node);
        if(node.getFor() != null)
        {
            node.getFor().apply(this);
        }
        if(node.getAll() != null)
        {
            node.getAll().apply(this);
        }
        if(node.getInClause() != null)
        {
            node.getInClause().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAForallExpr(node);
    }

    public void inAExistsExpr(AExistsExpr node)
    {
        defaultIn(node);
    }

    public void outAExistsExpr(AExistsExpr node)
    {
        defaultOut(node);
    }

    public void caseAExistsExpr(AExistsExpr node)
    {
        inAExistsExpr(node);
        if(node.getExists() != null)
        {
            node.getExists().apply(this);
        }
        if(node.getInClause() != null)
        {
            node.getInClause().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAExistsExpr(node);
    }

    public void inAUnaryPlusExpr(AUnaryPlusExpr node)
    {
        defaultIn(node);
    }

    public void outAUnaryPlusExpr(AUnaryPlusExpr node)
    {
        defaultOut(node);
    }

    public void caseAUnaryPlusExpr(AUnaryPlusExpr node)
    {
        inAUnaryPlusExpr(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAUnaryPlusExpr(node);
    }

    public void inAUnaryMinusExpr(AUnaryMinusExpr node)
    {
        defaultIn(node);
    }

    public void outAUnaryMinusExpr(AUnaryMinusExpr node)
    {
        defaultOut(node);
    }

    public void caseAUnaryMinusExpr(AUnaryMinusExpr node)
    {
        inAUnaryMinusExpr(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAUnaryMinusExpr(node);
    }

    public void inAUnaryAbsExpr(AUnaryAbsExpr node)
    {
        defaultIn(node);
    }

    public void outAUnaryAbsExpr(AUnaryAbsExpr node)
    {
        defaultOut(node);
    }

    public void caseAUnaryAbsExpr(AUnaryAbsExpr node)
    {
        inAUnaryAbsExpr(node);
        if(node.getAbs() != null)
        {
            node.getAbs().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAUnaryAbsExpr(node);
    }

    public void inAUnaryNotExpr(AUnaryNotExpr node)
    {
        defaultIn(node);
    }

    public void outAUnaryNotExpr(AUnaryNotExpr node)
    {
        defaultOut(node);
    }

    public void caseAUnaryNotExpr(AUnaryNotExpr node)
    {
        inAUnaryNotExpr(node);
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAUnaryNotExpr(node);
    }

    public void inANewObjectExpr(ANewObjectExpr node)
    {
        defaultIn(node);
    }

    public void outANewObjectExpr(ANewObjectExpr node)
    {
        defaultOut(node);
    }

    public void caseANewObjectExpr(ANewObjectExpr node)
    {
        inANewObjectExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getFieldList() != null)
        {
            node.getFieldList().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outANewObjectExpr(node);
    }

    public void inANewArrayExpr(ANewArrayExpr node)
    {
        defaultIn(node);
    }

    public void outANewArrayExpr(ANewArrayExpr node)
    {
        defaultOut(node);
    }

    public void caseANewArrayExpr(ANewArrayExpr node)
    {
        inANewArrayExpr(node);
        if(node.getArray() != null)
        {
            node.getArray().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getValueList() != null)
        {
            node.getValueList().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outANewArrayExpr(node);
    }

    public void inANewSetExpr(ANewSetExpr node)
    {
        defaultIn(node);
    }

    public void outANewSetExpr(ANewSetExpr node)
    {
        defaultOut(node);
    }

    public void caseANewSetExpr(ANewSetExpr node)
    {
        inANewSetExpr(node);
        if(node.getSet() != null)
        {
            node.getSet().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getValueList() != null)
        {
            node.getValueList().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outANewSetExpr(node);
    }

    public void inANewBagExpr(ANewBagExpr node)
    {
        defaultIn(node);
    }

    public void outANewBagExpr(ANewBagExpr node)
    {
        defaultOut(node);
    }

    public void caseANewBagExpr(ANewBagExpr node)
    {
        inANewBagExpr(node);
        if(node.getBag() != null)
        {
            node.getBag().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getValueList() != null)
        {
            node.getValueList().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outANewBagExpr(node);
    }

    public void inANewListExpr(ANewListExpr node)
    {
        defaultIn(node);
    }

    public void outANewListExpr(ANewListExpr node)
    {
        defaultOut(node);
    }

    public void caseANewListExpr(ANewListExpr node)
    {
        inANewListExpr(node);
        if(node.getList() != null)
        {
            node.getList().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getValueOrRange() != null)
        {
            node.getValueOrRange().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outANewListExpr(node);
    }

    public void inANewStructExpr(ANewStructExpr node)
    {
        defaultIn(node);
    }

    public void outANewStructExpr(ANewStructExpr node)
    {
        defaultOut(node);
    }

    public void caseANewStructExpr(ANewStructExpr node)
    {
        inANewStructExpr(node);
        if(node.getStruct() != null)
        {
            node.getStruct().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getFieldList() != null)
        {
            node.getFieldList().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outANewStructExpr(node);
    }

    public void inAPathExpr(APathExpr node)
    {
        defaultIn(node);
    }

    public void outAPathExpr(APathExpr node)
    {
        defaultOut(node);
    }

    public void caseAPathExpr(APathExpr node)
    {
        inAPathExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getDotarrow() != null)
        {
            node.getDotarrow().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAPathExpr(node);
    }

    public void inAMethodExpr(AMethodExpr node)
    {
        defaultIn(node);
    }

    public void outAMethodExpr(AMethodExpr node)
    {
        defaultOut(node);
    }

    public void caseAMethodExpr(AMethodExpr node)
    {
        inAMethodExpr(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getValueList() != null)
        {
            node.getValueList().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outAMethodExpr(node);
    }

    public void inAIndexExpr(AIndexExpr node)
    {
        defaultIn(node);
    }

    public void outAIndexExpr(AIndexExpr node)
    {
        defaultOut(node);
    }

    public void caseAIndexExpr(AIndexExpr node)
    {
        inAIndexExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getSqBracketL() != null)
        {
            node.getSqBracketL().apply(this);
        }
        if(node.getIndex() != null)
        {
            node.getIndex().apply(this);
        }
        if(node.getSqBracketR() != null)
        {
            node.getSqBracketR().apply(this);
        }
        outAIndexExpr(node);
    }

    public void inAConversionListtosetExpr(AConversionListtosetExpr node)
    {
        defaultIn(node);
    }

    public void outAConversionListtosetExpr(AConversionListtosetExpr node)
    {
        defaultOut(node);
    }

    public void caseAConversionListtosetExpr(AConversionListtosetExpr node)
    {
        inAConversionListtosetExpr(node);
        if(node.getListtoset() != null)
        {
            node.getListtoset().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getQuery() != null)
        {
            node.getQuery().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outAConversionListtosetExpr(node);
    }

    public void inAConversionElementExpr(AConversionElementExpr node)
    {
        defaultIn(node);
    }

    public void outAConversionElementExpr(AConversionElementExpr node)
    {
        defaultOut(node);
    }

    public void caseAConversionElementExpr(AConversionElementExpr node)
    {
        inAConversionElementExpr(node);
        if(node.getElement() != null)
        {
            node.getElement().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getQuery() != null)
        {
            node.getQuery().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outAConversionElementExpr(node);
    }

    public void inAConversionDistinctExpr(AConversionDistinctExpr node)
    {
        defaultIn(node);
    }

    public void outAConversionDistinctExpr(AConversionDistinctExpr node)
    {
        defaultOut(node);
    }

    public void caseAConversionDistinctExpr(AConversionDistinctExpr node)
    {
        inAConversionDistinctExpr(node);
        if(node.getDistinct() != null)
        {
            node.getDistinct().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getQuery() != null)
        {
            node.getQuery().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outAConversionDistinctExpr(node);
    }

    public void inAConversionFlattenExpr(AConversionFlattenExpr node)
    {
        defaultIn(node);
    }

    public void outAConversionFlattenExpr(AConversionFlattenExpr node)
    {
        defaultOut(node);
    }

    public void caseAConversionFlattenExpr(AConversionFlattenExpr node)
    {
        inAConversionFlattenExpr(node);
        if(node.getFlatten() != null)
        {
            node.getFlatten().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getQuery() != null)
        {
            node.getQuery().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outAConversionFlattenExpr(node);
    }

    public void inACollectionFirstExpr(ACollectionFirstExpr node)
    {
        defaultIn(node);
    }

    public void outACollectionFirstExpr(ACollectionFirstExpr node)
    {
        defaultOut(node);
    }

    public void caseACollectionFirstExpr(ACollectionFirstExpr node)
    {
        inACollectionFirstExpr(node);
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getQuery() != null)
        {
            node.getQuery().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outACollectionFirstExpr(node);
    }

    public void inACollectionLastExpr(ACollectionLastExpr node)
    {
        defaultIn(node);
    }

    public void outACollectionLastExpr(ACollectionLastExpr node)
    {
        defaultOut(node);
    }

    public void caseACollectionLastExpr(ACollectionLastExpr node)
    {
        inACollectionLastExpr(node);
        if(node.getLast() != null)
        {
            node.getLast().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getQuery() != null)
        {
            node.getQuery().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outACollectionLastExpr(node);
    }

    public void inACollectionUniqueExpr(ACollectionUniqueExpr node)
    {
        defaultIn(node);
    }

    public void outACollectionUniqueExpr(ACollectionUniqueExpr node)
    {
        defaultOut(node);
    }

    public void caseACollectionUniqueExpr(ACollectionUniqueExpr node)
    {
        inACollectionUniqueExpr(node);
        if(node.getUnique() != null)
        {
            node.getUnique().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getQuery() != null)
        {
            node.getQuery().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outACollectionUniqueExpr(node);
    }

    public void inACollectionExistsExpr(ACollectionExistsExpr node)
    {
        defaultIn(node);
    }

    public void outACollectionExistsExpr(ACollectionExistsExpr node)
    {
        defaultOut(node);
    }

    public void caseACollectionExistsExpr(ACollectionExistsExpr node)
    {
        inACollectionExistsExpr(node);
        if(node.getExists() != null)
        {
            node.getExists().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getQuery() != null)
        {
            node.getQuery().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outACollectionExistsExpr(node);
    }

    public void inAAggregateSumExpr(AAggregateSumExpr node)
    {
        defaultIn(node);
    }

    public void outAAggregateSumExpr(AAggregateSumExpr node)
    {
        defaultOut(node);
    }

    public void caseAAggregateSumExpr(AAggregateSumExpr node)
    {
        inAAggregateSumExpr(node);
        if(node.getSum() != null)
        {
            node.getSum().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getQuery() != null)
        {
            node.getQuery().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outAAggregateSumExpr(node);
    }

    public void inAAggregateMinExpr(AAggregateMinExpr node)
    {
        defaultIn(node);
    }

    public void outAAggregateMinExpr(AAggregateMinExpr node)
    {
        defaultOut(node);
    }

    public void caseAAggregateMinExpr(AAggregateMinExpr node)
    {
        inAAggregateMinExpr(node);
        if(node.getMin() != null)
        {
            node.getMin().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getQuery() != null)
        {
            node.getQuery().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outAAggregateMinExpr(node);
    }

    public void inAAggregateMaxExpr(AAggregateMaxExpr node)
    {
        defaultIn(node);
    }

    public void outAAggregateMaxExpr(AAggregateMaxExpr node)
    {
        defaultOut(node);
    }

    public void caseAAggregateMaxExpr(AAggregateMaxExpr node)
    {
        inAAggregateMaxExpr(node);
        if(node.getMax() != null)
        {
            node.getMax().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getQuery() != null)
        {
            node.getQuery().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outAAggregateMaxExpr(node);
    }

    public void inAAggregateAvgExpr(AAggregateAvgExpr node)
    {
        defaultIn(node);
    }

    public void outAAggregateAvgExpr(AAggregateAvgExpr node)
    {
        defaultOut(node);
    }

    public void caseAAggregateAvgExpr(AAggregateAvgExpr node)
    {
        inAAggregateAvgExpr(node);
        if(node.getAvg() != null)
        {
            node.getAvg().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getQuery() != null)
        {
            node.getQuery().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outAAggregateAvgExpr(node);
    }

    public void inAIsundefExpr(AIsundefExpr node)
    {
        defaultIn(node);
    }

    public void outAIsundefExpr(AIsundefExpr node)
    {
        defaultOut(node);
    }

    public void caseAIsundefExpr(AIsundefExpr node)
    {
        inAIsundefExpr(node);
        if(node.getIsUndefined() != null)
        {
            node.getIsUndefined().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getQuery() != null)
        {
            node.getQuery().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outAIsundefExpr(node);
    }

    public void inAIsdefExpr(AIsdefExpr node)
    {
        defaultIn(node);
    }

    public void outAIsdefExpr(AIsdefExpr node)
    {
        defaultOut(node);
    }

    public void caseAIsdefExpr(AIsdefExpr node)
    {
        inAIsdefExpr(node);
        if(node.getIsDefined() != null)
        {
            node.getIsDefined().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getQuery() != null)
        {
            node.getQuery().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outAIsdefExpr(node);
    }

    public void inAAggregateCountExpr(AAggregateCountExpr node)
    {
        defaultIn(node);
    }

    public void outAAggregateCountExpr(AAggregateCountExpr node)
    {
        defaultOut(node);
    }

    public void caseAAggregateCountExpr(AAggregateCountExpr node)
    {
        inAAggregateCountExpr(node);
        if(node.getCount() != null)
        {
            node.getCount().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getQuery() != null)
        {
            node.getQuery().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outAAggregateCountExpr(node);
    }

    public void inAExprRestricted(AExprRestricted node)
    {
        defaultIn(node);
    }

    public void outAExprRestricted(AExprRestricted node)
    {
        defaultOut(node);
    }

    public void caseAExprRestricted(AExprRestricted node)
    {
        inAExprRestricted(node);
        if(node.getTmpCastExpr() != null)
        {
            node.getTmpCastExpr().apply(this);
        }
        outAExprRestricted(node);
    }

    public void inATmpCastExpr(ATmpCastExpr node)
    {
        defaultIn(node);
    }

    public void outATmpCastExpr(ATmpCastExpr node)
    {
        defaultOut(node);
    }

    public void caseATmpCastExpr(ATmpCastExpr node)
    {
        inATmpCastExpr(node);
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        if(node.getTmpOrExpr() != null)
        {
            node.getTmpOrExpr().apply(this);
        }
        outATmpCastExpr(node);
    }

    public void inAIdentifierTmpCastExpr(AIdentifierTmpCastExpr node)
    {
        defaultIn(node);
    }

    public void outAIdentifierTmpCastExpr(AIdentifierTmpCastExpr node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierTmpCastExpr(AIdentifierTmpCastExpr node)
    {
        inAIdentifierTmpCastExpr(node);
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAIdentifierTmpCastExpr(node);
    }

    public void inAPrimitiveTmpCastExpr(APrimitiveTmpCastExpr node)
    {
        defaultIn(node);
    }

    public void outAPrimitiveTmpCastExpr(APrimitiveTmpCastExpr node)
    {
        defaultOut(node);
    }

    public void caseAPrimitiveTmpCastExpr(APrimitiveTmpCastExpr node)
    {
        inAPrimitiveTmpCastExpr(node);
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        if(node.getTmpOrExpr() != null)
        {
            node.getTmpOrExpr().apply(this);
        }
        outAPrimitiveTmpCastExpr(node);
    }

    public void inAPrimitiveIdentifierTmpCastExpr(APrimitiveIdentifierTmpCastExpr node)
    {
        defaultIn(node);
    }

    public void outAPrimitiveIdentifierTmpCastExpr(APrimitiveIdentifierTmpCastExpr node)
    {
        defaultOut(node);
    }

    public void caseAPrimitiveIdentifierTmpCastExpr(APrimitiveIdentifierTmpCastExpr node)
    {
        inAPrimitiveIdentifierTmpCastExpr(node);
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAPrimitiveIdentifierTmpCastExpr(node);
    }

    public void inAOrTmpCastExpr(AOrTmpCastExpr node)
    {
        defaultIn(node);
    }

    public void outAOrTmpCastExpr(AOrTmpCastExpr node)
    {
        defaultOut(node);
    }

    public void caseAOrTmpCastExpr(AOrTmpCastExpr node)
    {
        inAOrTmpCastExpr(node);
        if(node.getTmpOrExpr() != null)
        {
            node.getTmpOrExpr().apply(this);
        }
        outAOrTmpCastExpr(node);
    }

    public void inATmpOrExpr(ATmpOrExpr node)
    {
        defaultIn(node);
    }

    public void outATmpOrExpr(ATmpOrExpr node)
    {
        defaultOut(node);
    }

    public void caseATmpOrExpr(ATmpOrExpr node)
    {
        inATmpOrExpr(node);
        if(node.getTmpOrExpr() != null)
        {
            node.getTmpOrExpr().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getTmpOrelseExpr() != null)
        {
            node.getTmpOrelseExpr().apply(this);
        }
        outATmpOrExpr(node);
    }

    public void inALastTmpOrExpr(ALastTmpOrExpr node)
    {
        defaultIn(node);
    }

    public void outALastTmpOrExpr(ALastTmpOrExpr node)
    {
        defaultOut(node);
    }

    public void caseALastTmpOrExpr(ALastTmpOrExpr node)
    {
        inALastTmpOrExpr(node);
        if(node.getTmpOrExpr() != null)
        {
            node.getTmpOrExpr().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outALastTmpOrExpr(node);
    }

    public void inAFirstTmpOrExpr(AFirstTmpOrExpr node)
    {
        defaultIn(node);
    }

    public void outAFirstTmpOrExpr(AFirstTmpOrExpr node)
    {
        defaultOut(node);
    }

    public void caseAFirstTmpOrExpr(AFirstTmpOrExpr node)
    {
        inAFirstTmpOrExpr(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getTmpOrelseExpr() != null)
        {
            node.getTmpOrelseExpr().apply(this);
        }
        outAFirstTmpOrExpr(node);
    }

    public void inABothTmpOrExpr(ABothTmpOrExpr node)
    {
        defaultIn(node);
    }

    public void outABothTmpOrExpr(ABothTmpOrExpr node)
    {
        defaultOut(node);
    }

    public void caseABothTmpOrExpr(ABothTmpOrExpr node)
    {
        inABothTmpOrExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outABothTmpOrExpr(node);
    }

    public void inAOrelseTmpOrExpr(AOrelseTmpOrExpr node)
    {
        defaultIn(node);
    }

    public void outAOrelseTmpOrExpr(AOrelseTmpOrExpr node)
    {
        defaultOut(node);
    }

    public void caseAOrelseTmpOrExpr(AOrelseTmpOrExpr node)
    {
        inAOrelseTmpOrExpr(node);
        if(node.getTmpOrelseExpr() != null)
        {
            node.getTmpOrelseExpr().apply(this);
        }
        outAOrelseTmpOrExpr(node);
    }

    public void inATmpOrelseExpr(ATmpOrelseExpr node)
    {
        defaultIn(node);
    }

    public void outATmpOrelseExpr(ATmpOrelseExpr node)
    {
        defaultOut(node);
    }

    public void caseATmpOrelseExpr(ATmpOrelseExpr node)
    {
        inATmpOrelseExpr(node);
        if(node.getTmpOrelseExpr() != null)
        {
            node.getTmpOrelseExpr().apply(this);
        }
        if(node.getOrelse() != null)
        {
            node.getOrelse().apply(this);
        }
        if(node.getTmpAndExpr() != null)
        {
            node.getTmpAndExpr().apply(this);
        }
        outATmpOrelseExpr(node);
    }

    public void inALastTmpOrelseExpr(ALastTmpOrelseExpr node)
    {
        defaultIn(node);
    }

    public void outALastTmpOrelseExpr(ALastTmpOrelseExpr node)
    {
        defaultOut(node);
    }

    public void caseALastTmpOrelseExpr(ALastTmpOrelseExpr node)
    {
        inALastTmpOrelseExpr(node);
        if(node.getTmpOrelseExpr() != null)
        {
            node.getTmpOrelseExpr().apply(this);
        }
        if(node.getOrelse() != null)
        {
            node.getOrelse().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outALastTmpOrelseExpr(node);
    }

    public void inAFirstTmpOrelseExpr(AFirstTmpOrelseExpr node)
    {
        defaultIn(node);
    }

    public void outAFirstTmpOrelseExpr(AFirstTmpOrelseExpr node)
    {
        defaultOut(node);
    }

    public void caseAFirstTmpOrelseExpr(AFirstTmpOrelseExpr node)
    {
        inAFirstTmpOrelseExpr(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getOrelse() != null)
        {
            node.getOrelse().apply(this);
        }
        if(node.getTmpAndExpr() != null)
        {
            node.getTmpAndExpr().apply(this);
        }
        outAFirstTmpOrelseExpr(node);
    }

    public void inABothTmpOrelseExpr(ABothTmpOrelseExpr node)
    {
        defaultIn(node);
    }

    public void outABothTmpOrelseExpr(ABothTmpOrelseExpr node)
    {
        defaultOut(node);
    }

    public void caseABothTmpOrelseExpr(ABothTmpOrelseExpr node)
    {
        inABothTmpOrelseExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getOrelse() != null)
        {
            node.getOrelse().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outABothTmpOrelseExpr(node);
    }

    public void inAAndExprTmpOrelseExpr(AAndExprTmpOrelseExpr node)
    {
        defaultIn(node);
    }

    public void outAAndExprTmpOrelseExpr(AAndExprTmpOrelseExpr node)
    {
        defaultOut(node);
    }

    public void caseAAndExprTmpOrelseExpr(AAndExprTmpOrelseExpr node)
    {
        inAAndExprTmpOrelseExpr(node);
        if(node.getTmpAndExpr() != null)
        {
            node.getTmpAndExpr().apply(this);
        }
        outAAndExprTmpOrelseExpr(node);
    }

    public void inATmpAndExpr(ATmpAndExpr node)
    {
        defaultIn(node);
    }

    public void outATmpAndExpr(ATmpAndExpr node)
    {
        defaultOut(node);
    }

    public void caseATmpAndExpr(ATmpAndExpr node)
    {
        inATmpAndExpr(node);
        if(node.getTmpAndExpr() != null)
        {
            node.getTmpAndExpr().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getQuantifierExpr() != null)
        {
            node.getQuantifierExpr().apply(this);
        }
        outATmpAndExpr(node);
    }

    public void inALastTmpAndExpr(ALastTmpAndExpr node)
    {
        defaultIn(node);
    }

    public void outALastTmpAndExpr(ALastTmpAndExpr node)
    {
        defaultOut(node);
    }

    public void caseALastTmpAndExpr(ALastTmpAndExpr node)
    {
        inALastTmpAndExpr(node);
        if(node.getTmpAndExpr() != null)
        {
            node.getTmpAndExpr().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outALastTmpAndExpr(node);
    }

    public void inAFirstTmpAndExpr(AFirstTmpAndExpr node)
    {
        defaultIn(node);
    }

    public void outAFirstTmpAndExpr(AFirstTmpAndExpr node)
    {
        defaultOut(node);
    }

    public void caseAFirstTmpAndExpr(AFirstTmpAndExpr node)
    {
        inAFirstTmpAndExpr(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getQuantifierExpr() != null)
        {
            node.getQuantifierExpr().apply(this);
        }
        outAFirstTmpAndExpr(node);
    }

    public void inABothTmpAndExpr(ABothTmpAndExpr node)
    {
        defaultIn(node);
    }

    public void outABothTmpAndExpr(ABothTmpAndExpr node)
    {
        defaultOut(node);
    }

    public void caseABothTmpAndExpr(ABothTmpAndExpr node)
    {
        inABothTmpAndExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outABothTmpAndExpr(node);
    }

    public void inAQuantifierExprTmpAndExpr(AQuantifierExprTmpAndExpr node)
    {
        defaultIn(node);
    }

    public void outAQuantifierExprTmpAndExpr(AQuantifierExprTmpAndExpr node)
    {
        defaultOut(node);
    }

    public void caseAQuantifierExprTmpAndExpr(AQuantifierExprTmpAndExpr node)
    {
        inAQuantifierExprTmpAndExpr(node);
        if(node.getQuantifierExpr() != null)
        {
            node.getQuantifierExpr().apply(this);
        }
        outAQuantifierExprTmpAndExpr(node);
    }

    public void inAForallQuantifierExpr(AForallQuantifierExpr node)
    {
        defaultIn(node);
    }

    public void outAForallQuantifierExpr(AForallQuantifierExpr node)
    {
        defaultOut(node);
    }

    public void caseAForallQuantifierExpr(AForallQuantifierExpr node)
    {
        inAForallQuantifierExpr(node);
        if(node.getFor() != null)
        {
            node.getFor().apply(this);
        }
        if(node.getAll() != null)
        {
            node.getAll().apply(this);
        }
        if(node.getInClause() != null)
        {
            node.getInClause().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getAndthenExpr() != null)
        {
            node.getAndthenExpr().apply(this);
        }
        outAForallQuantifierExpr(node);
    }

    public void inAIdentifierForallQuantifierExpr(AIdentifierForallQuantifierExpr node)
    {
        defaultIn(node);
    }

    public void outAIdentifierForallQuantifierExpr(AIdentifierForallQuantifierExpr node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierForallQuantifierExpr(AIdentifierForallQuantifierExpr node)
    {
        inAIdentifierForallQuantifierExpr(node);
        if(node.getFor() != null)
        {
            node.getFor().apply(this);
        }
        if(node.getAll() != null)
        {
            node.getAll().apply(this);
        }
        if(node.getInClause() != null)
        {
            node.getInClause().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierForallQuantifierExpr(node);
    }

    public void inAExistsQuantifierExpr(AExistsQuantifierExpr node)
    {
        defaultIn(node);
    }

    public void outAExistsQuantifierExpr(AExistsQuantifierExpr node)
    {
        defaultOut(node);
    }

    public void caseAExistsQuantifierExpr(AExistsQuantifierExpr node)
    {
        inAExistsQuantifierExpr(node);
        if(node.getExists() != null)
        {
            node.getExists().apply(this);
        }
        if(node.getInClause() != null)
        {
            node.getInClause().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getAndthenExpr() != null)
        {
            node.getAndthenExpr().apply(this);
        }
        outAExistsQuantifierExpr(node);
    }

    public void inAIdentifierExistsQuantifierExpr(AIdentifierExistsQuantifierExpr node)
    {
        defaultIn(node);
    }

    public void outAIdentifierExistsQuantifierExpr(AIdentifierExistsQuantifierExpr node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierExistsQuantifierExpr(AIdentifierExistsQuantifierExpr node)
    {
        inAIdentifierExistsQuantifierExpr(node);
        if(node.getExists() != null)
        {
            node.getExists().apply(this);
        }
        if(node.getInClause() != null)
        {
            node.getInClause().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierExistsQuantifierExpr(node);
    }

    public void inAAndthenQuantifierExpr(AAndthenQuantifierExpr node)
    {
        defaultIn(node);
    }

    public void outAAndthenQuantifierExpr(AAndthenQuantifierExpr node)
    {
        defaultOut(node);
    }

    public void caseAAndthenQuantifierExpr(AAndthenQuantifierExpr node)
    {
        inAAndthenQuantifierExpr(node);
        if(node.getAndthenExpr() != null)
        {
            node.getAndthenExpr().apply(this);
        }
        outAAndthenQuantifierExpr(node);
    }

    public void inAInClause(AInClause node)
    {
        defaultIn(node);
    }

    public void outAInClause(AInClause node)
    {
        defaultOut(node);
    }

    public void caseAInClause(AInClause node)
    {
        inAInClause(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        if(node.getIn() != null)
        {
            node.getIn().apply(this);
        }
        if(node.getExprRestricted() != null)
        {
            node.getExprRestricted().apply(this);
        }
        outAInClause(node);
    }

    public void inAIdentifierInClause(AIdentifierInClause node)
    {
        defaultIn(node);
    }

    public void outAIdentifierInClause(AIdentifierInClause node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierInClause(AIdentifierInClause node)
    {
        inAIdentifierInClause(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        if(node.getIn() != null)
        {
            node.getIn().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAIdentifierInClause(node);
    }

    public void inADistinctInClause(ADistinctInClause node)
    {
        defaultIn(node);
    }

    public void outADistinctInClause(ADistinctInClause node)
    {
        defaultOut(node);
    }

    public void caseADistinctInClause(ADistinctInClause node)
    {
        inADistinctInClause(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        if(node.getIn() != null)
        {
            node.getIn().apply(this);
        }
        if(node.getDistinct() != null)
        {
            node.getDistinct().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getQueryRestricted() != null)
        {
            node.getQueryRestricted().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outADistinctInClause(node);
    }

    public void inADistinctIdentifierInClause(ADistinctIdentifierInClause node)
    {
        defaultIn(node);
    }

    public void outADistinctIdentifierInClause(ADistinctIdentifierInClause node)
    {
        defaultOut(node);
    }

    public void caseADistinctIdentifierInClause(ADistinctIdentifierInClause node)
    {
        inADistinctIdentifierInClause(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        if(node.getIn() != null)
        {
            node.getIn().apply(this);
        }
        if(node.getDistinct() != null)
        {
            node.getDistinct().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outADistinctIdentifierInClause(node);
    }

    public void inAAndthenExpr(AAndthenExpr node)
    {
        defaultIn(node);
    }

    public void outAAndthenExpr(AAndthenExpr node)
    {
        defaultOut(node);
    }

    public void caseAAndthenExpr(AAndthenExpr node)
    {
        inAAndthenExpr(node);
        if(node.getAndthenExpr() != null)
        {
            node.getAndthenExpr().apply(this);
        }
        if(node.getAndthen() != null)
        {
            node.getAndthen().apply(this);
        }
        if(node.getTmpEqualityExpr() != null)
        {
            node.getTmpEqualityExpr().apply(this);
        }
        outAAndthenExpr(node);
    }

    public void inALastAndthenExpr(ALastAndthenExpr node)
    {
        defaultIn(node);
    }

    public void outALastAndthenExpr(ALastAndthenExpr node)
    {
        defaultOut(node);
    }

    public void caseALastAndthenExpr(ALastAndthenExpr node)
    {
        inALastAndthenExpr(node);
        if(node.getAndthenExpr() != null)
        {
            node.getAndthenExpr().apply(this);
        }
        if(node.getAndthen() != null)
        {
            node.getAndthen().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outALastAndthenExpr(node);
    }

    public void inAFirstAndthenExpr(AFirstAndthenExpr node)
    {
        defaultIn(node);
    }

    public void outAFirstAndthenExpr(AFirstAndthenExpr node)
    {
        defaultOut(node);
    }

    public void caseAFirstAndthenExpr(AFirstAndthenExpr node)
    {
        inAFirstAndthenExpr(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getAndthen() != null)
        {
            node.getAndthen().apply(this);
        }
        if(node.getTmpEqualityExpr() != null)
        {
            node.getTmpEqualityExpr().apply(this);
        }
        outAFirstAndthenExpr(node);
    }

    public void inABothAndthenExpr(ABothAndthenExpr node)
    {
        defaultIn(node);
    }

    public void outABothAndthenExpr(ABothAndthenExpr node)
    {
        defaultOut(node);
    }

    public void caseABothAndthenExpr(ABothAndthenExpr node)
    {
        inABothAndthenExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getAndthen() != null)
        {
            node.getAndthen().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outABothAndthenExpr(node);
    }

    public void inAEqualityExprAndthenExpr(AEqualityExprAndthenExpr node)
    {
        defaultIn(node);
    }

    public void outAEqualityExprAndthenExpr(AEqualityExprAndthenExpr node)
    {
        defaultOut(node);
    }

    public void caseAEqualityExprAndthenExpr(AEqualityExprAndthenExpr node)
    {
        inAEqualityExprAndthenExpr(node);
        if(node.getTmpEqualityExpr() != null)
        {
            node.getTmpEqualityExpr().apply(this);
        }
        outAEqualityExprAndthenExpr(node);
    }

    public void inAEqneTmpEqualityExpr(AEqneTmpEqualityExpr node)
    {
        defaultIn(node);
    }

    public void outAEqneTmpEqualityExpr(AEqneTmpEqualityExpr node)
    {
        defaultOut(node);
    }

    public void caseAEqneTmpEqualityExpr(AEqneTmpEqualityExpr node)
    {
        inAEqneTmpEqualityExpr(node);
        if(node.getTmpEqualityExpr() != null)
        {
            node.getTmpEqualityExpr().apply(this);
        }
        if(node.getEqne() != null)
        {
            node.getEqne().apply(this);
        }
        if(node.getCompositePredicate() != null)
        {
            node.getCompositePredicate().apply(this);
        }
        if(node.getTmpRelationalExpr() != null)
        {
            node.getTmpRelationalExpr().apply(this);
        }
        outAEqneTmpEqualityExpr(node);
    }

    public void inALastEqneTmpEqualityExpr(ALastEqneTmpEqualityExpr node)
    {
        defaultIn(node);
    }

    public void outALastEqneTmpEqualityExpr(ALastEqneTmpEqualityExpr node)
    {
        defaultOut(node);
    }

    public void caseALastEqneTmpEqualityExpr(ALastEqneTmpEqualityExpr node)
    {
        inALastEqneTmpEqualityExpr(node);
        if(node.getTmpEqualityExpr() != null)
        {
            node.getTmpEqualityExpr().apply(this);
        }
        if(node.getEqne() != null)
        {
            node.getEqne().apply(this);
        }
        if(node.getCompositePredicate() != null)
        {
            node.getCompositePredicate().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outALastEqneTmpEqualityExpr(node);
    }

    public void inAFirstEqneTmpEqualityExpr(AFirstEqneTmpEqualityExpr node)
    {
        defaultIn(node);
    }

    public void outAFirstEqneTmpEqualityExpr(AFirstEqneTmpEqualityExpr node)
    {
        defaultOut(node);
    }

    public void caseAFirstEqneTmpEqualityExpr(AFirstEqneTmpEqualityExpr node)
    {
        inAFirstEqneTmpEqualityExpr(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getEqne() != null)
        {
            node.getEqne().apply(this);
        }
        if(node.getCompositePredicate() != null)
        {
            node.getCompositePredicate().apply(this);
        }
        if(node.getTmpRelationalExpr() != null)
        {
            node.getTmpRelationalExpr().apply(this);
        }
        outAFirstEqneTmpEqualityExpr(node);
    }

    public void inABothEqneTmpEqualityExpr(ABothEqneTmpEqualityExpr node)
    {
        defaultIn(node);
    }

    public void outABothEqneTmpEqualityExpr(ABothEqneTmpEqualityExpr node)
    {
        defaultOut(node);
    }

    public void caseABothEqneTmpEqualityExpr(ABothEqneTmpEqualityExpr node)
    {
        inABothEqneTmpEqualityExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getEqne() != null)
        {
            node.getEqne().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outABothEqneTmpEqualityExpr(node);
    }

    public void inADistinctTmpEqualityExpr(ADistinctTmpEqualityExpr node)
    {
        defaultIn(node);
    }

    public void outADistinctTmpEqualityExpr(ADistinctTmpEqualityExpr node)
    {
        defaultOut(node);
    }

    public void caseADistinctTmpEqualityExpr(ADistinctTmpEqualityExpr node)
    {
        inADistinctTmpEqualityExpr(node);
        if(node.getTmpEqualityExpr() != null)
        {
            node.getTmpEqualityExpr().apply(this);
        }
        if(node.getEqne() != null)
        {
            node.getEqne().apply(this);
        }
        if(node.getCompositePredicate() != null)
        {
            node.getCompositePredicate().apply(this);
        }
        if(node.getDistinct() != null)
        {
            node.getDistinct().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getQueryRestricted() != null)
        {
            node.getQueryRestricted().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outADistinctTmpEqualityExpr(node);
    }

    public void inADistinctIdentifierTmpEqualityExpr(ADistinctIdentifierTmpEqualityExpr node)
    {
        defaultIn(node);
    }

    public void outADistinctIdentifierTmpEqualityExpr(ADistinctIdentifierTmpEqualityExpr node)
    {
        defaultOut(node);
    }

    public void caseADistinctIdentifierTmpEqualityExpr(ADistinctIdentifierTmpEqualityExpr node)
    {
        inADistinctIdentifierTmpEqualityExpr(node);
        if(node.getTmpEqualityExpr() != null)
        {
            node.getTmpEqualityExpr().apply(this);
        }
        if(node.getEqne() != null)
        {
            node.getEqne().apply(this);
        }
        if(node.getCompositePredicate() != null)
        {
            node.getCompositePredicate().apply(this);
        }
        if(node.getDistinct() != null)
        {
            node.getDistinct().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outADistinctIdentifierTmpEqualityExpr(node);
    }

    public void inAFirstDistinctTmpEqualityExpr(AFirstDistinctTmpEqualityExpr node)
    {
        defaultIn(node);
    }

    public void outAFirstDistinctTmpEqualityExpr(AFirstDistinctTmpEqualityExpr node)
    {
        defaultOut(node);
    }

    public void caseAFirstDistinctTmpEqualityExpr(AFirstDistinctTmpEqualityExpr node)
    {
        inAFirstDistinctTmpEqualityExpr(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getEqne() != null)
        {
            node.getEqne().apply(this);
        }
        if(node.getCompositePredicate() != null)
        {
            node.getCompositePredicate().apply(this);
        }
        if(node.getDistinct() != null)
        {
            node.getDistinct().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getQueryRestricted() != null)
        {
            node.getQueryRestricted().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outAFirstDistinctTmpEqualityExpr(node);
    }

    public void inAFirstDistinctIdentifierTmpEqualityExpr(AFirstDistinctIdentifierTmpEqualityExpr node)
    {
        defaultIn(node);
    }

    public void outAFirstDistinctIdentifierTmpEqualityExpr(AFirstDistinctIdentifierTmpEqualityExpr node)
    {
        defaultOut(node);
    }

    public void caseAFirstDistinctIdentifierTmpEqualityExpr(AFirstDistinctIdentifierTmpEqualityExpr node)
    {
        inAFirstDistinctIdentifierTmpEqualityExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getEqne() != null)
        {
            node.getEqne().apply(this);
        }
        if(node.getCompositePredicate() != null)
        {
            node.getCompositePredicate().apply(this);
        }
        if(node.getDistinct() != null)
        {
            node.getDistinct().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outAFirstDistinctIdentifierTmpEqualityExpr(node);
    }

    public void inARlikeTmpEqualityExpr(ARlikeTmpEqualityExpr node)
    {
        defaultIn(node);
    }

    public void outARlikeTmpEqualityExpr(ARlikeTmpEqualityExpr node)
    {
        defaultOut(node);
    }

    public void caseARlikeTmpEqualityExpr(ARlikeTmpEqualityExpr node)
    {
        inARlikeTmpEqualityExpr(node);
        if(node.getTmpEqualityExpr() != null)
        {
            node.getTmpEqualityExpr().apply(this);
        }
        if(node.getRlike() != null)
        {
            node.getRlike().apply(this);
        }
        if(node.getTmpRelationalExpr() != null)
        {
            node.getTmpRelationalExpr().apply(this);
        }
        outARlikeTmpEqualityExpr(node);
    }

    public void inALastRlikeTmpEqualityExpr(ALastRlikeTmpEqualityExpr node)
    {
        defaultIn(node);
    }

    public void outALastRlikeTmpEqualityExpr(ALastRlikeTmpEqualityExpr node)
    {
        defaultOut(node);
    }

    public void caseALastRlikeTmpEqualityExpr(ALastRlikeTmpEqualityExpr node)
    {
        inALastRlikeTmpEqualityExpr(node);
        if(node.getTmpEqualityExpr() != null)
        {
            node.getTmpEqualityExpr().apply(this);
        }
        if(node.getRlike() != null)
        {
            node.getRlike().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outALastRlikeTmpEqualityExpr(node);
    }

    public void inAFirstRlikeTmpEqualityExpr(AFirstRlikeTmpEqualityExpr node)
    {
        defaultIn(node);
    }

    public void outAFirstRlikeTmpEqualityExpr(AFirstRlikeTmpEqualityExpr node)
    {
        defaultOut(node);
    }

    public void caseAFirstRlikeTmpEqualityExpr(AFirstRlikeTmpEqualityExpr node)
    {
        inAFirstRlikeTmpEqualityExpr(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getRlike() != null)
        {
            node.getRlike().apply(this);
        }
        if(node.getTmpRelationalExpr() != null)
        {
            node.getTmpRelationalExpr().apply(this);
        }
        outAFirstRlikeTmpEqualityExpr(node);
    }

    public void inABothRlikeTmpEqualityExpr(ABothRlikeTmpEqualityExpr node)
    {
        defaultIn(node);
    }

    public void outABothRlikeTmpEqualityExpr(ABothRlikeTmpEqualityExpr node)
    {
        defaultOut(node);
    }

    public void caseABothRlikeTmpEqualityExpr(ABothRlikeTmpEqualityExpr node)
    {
        inABothRlikeTmpEqualityExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRlike() != null)
        {
            node.getRlike().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outABothRlikeTmpEqualityExpr(node);
    }

    public void inALikeTmpEqualityExpr(ALikeTmpEqualityExpr node)
    {
        defaultIn(node);
    }

    public void outALikeTmpEqualityExpr(ALikeTmpEqualityExpr node)
    {
        defaultOut(node);
    }

    public void caseALikeTmpEqualityExpr(ALikeTmpEqualityExpr node)
    {
        inALikeTmpEqualityExpr(node);
        if(node.getTmpEqualityExpr() != null)
        {
            node.getTmpEqualityExpr().apply(this);
        }
        if(node.getLike() != null)
        {
            node.getLike().apply(this);
        }
        if(node.getTmpRelationalExpr() != null)
        {
            node.getTmpRelationalExpr().apply(this);
        }
        outALikeTmpEqualityExpr(node);
    }

    public void inALastLikeTmpEqualityExpr(ALastLikeTmpEqualityExpr node)
    {
        defaultIn(node);
    }

    public void outALastLikeTmpEqualityExpr(ALastLikeTmpEqualityExpr node)
    {
        defaultOut(node);
    }

    public void caseALastLikeTmpEqualityExpr(ALastLikeTmpEqualityExpr node)
    {
        inALastLikeTmpEqualityExpr(node);
        if(node.getTmpEqualityExpr() != null)
        {
            node.getTmpEqualityExpr().apply(this);
        }
        if(node.getLike() != null)
        {
            node.getLike().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outALastLikeTmpEqualityExpr(node);
    }

    public void inAFirstLikeTmpEqualityExpr(AFirstLikeTmpEqualityExpr node)
    {
        defaultIn(node);
    }

    public void outAFirstLikeTmpEqualityExpr(AFirstLikeTmpEqualityExpr node)
    {
        defaultOut(node);
    }

    public void caseAFirstLikeTmpEqualityExpr(AFirstLikeTmpEqualityExpr node)
    {
        inAFirstLikeTmpEqualityExpr(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLike() != null)
        {
            node.getLike().apply(this);
        }
        if(node.getTmpRelationalExpr() != null)
        {
            node.getTmpRelationalExpr().apply(this);
        }
        outAFirstLikeTmpEqualityExpr(node);
    }

    public void inABothLikeTmpEqualityExpr(ABothLikeTmpEqualityExpr node)
    {
        defaultIn(node);
    }

    public void outABothLikeTmpEqualityExpr(ABothLikeTmpEqualityExpr node)
    {
        defaultOut(node);
    }

    public void caseABothLikeTmpEqualityExpr(ABothLikeTmpEqualityExpr node)
    {
        inABothLikeTmpEqualityExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getLike() != null)
        {
            node.getLike().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outABothLikeTmpEqualityExpr(node);
    }

    public void inAInstanceofTmpEqualityExpr(AInstanceofTmpEqualityExpr node)
    {
        defaultIn(node);
    }

    public void outAInstanceofTmpEqualityExpr(AInstanceofTmpEqualityExpr node)
    {
        defaultOut(node);
    }

    public void caseAInstanceofTmpEqualityExpr(AInstanceofTmpEqualityExpr node)
    {
        inAInstanceofTmpEqualityExpr(node);
        if(node.getTmpEqualityExpr() != null)
        {
            node.getTmpEqualityExpr().apply(this);
        }
        if(node.getInstanceof() != null)
        {
            node.getInstanceof().apply(this);
        }
        if(node.getTmpRelationalExpr() != null)
        {
            node.getTmpRelationalExpr().apply(this);
        }
        outAInstanceofTmpEqualityExpr(node);
    }

    public void inALastInstanceofTmpEqualityExpr(ALastInstanceofTmpEqualityExpr node)
    {
        defaultIn(node);
    }

    public void outALastInstanceofTmpEqualityExpr(ALastInstanceofTmpEqualityExpr node)
    {
        defaultOut(node);
    }

    public void caseALastInstanceofTmpEqualityExpr(ALastInstanceofTmpEqualityExpr node)
    {
        inALastInstanceofTmpEqualityExpr(node);
        if(node.getTmpEqualityExpr() != null)
        {
            node.getTmpEqualityExpr().apply(this);
        }
        if(node.getInstanceof() != null)
        {
            node.getInstanceof().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outALastInstanceofTmpEqualityExpr(node);
    }

    public void inAFirstInstanceofTmpEqualityExpr(AFirstInstanceofTmpEqualityExpr node)
    {
        defaultIn(node);
    }

    public void outAFirstInstanceofTmpEqualityExpr(AFirstInstanceofTmpEqualityExpr node)
    {
        defaultOut(node);
    }

    public void caseAFirstInstanceofTmpEqualityExpr(AFirstInstanceofTmpEqualityExpr node)
    {
        inAFirstInstanceofTmpEqualityExpr(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getInstanceof() != null)
        {
            node.getInstanceof().apply(this);
        }
        if(node.getTmpRelationalExpr() != null)
        {
            node.getTmpRelationalExpr().apply(this);
        }
        outAFirstInstanceofTmpEqualityExpr(node);
    }

    public void inABothInstanceofTmpEqualityExpr(ABothInstanceofTmpEqualityExpr node)
    {
        defaultIn(node);
    }

    public void outABothInstanceofTmpEqualityExpr(ABothInstanceofTmpEqualityExpr node)
    {
        defaultOut(node);
    }

    public void caseABothInstanceofTmpEqualityExpr(ABothInstanceofTmpEqualityExpr node)
    {
        inABothInstanceofTmpEqualityExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getInstanceof() != null)
        {
            node.getInstanceof().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outABothInstanceofTmpEqualityExpr(node);
    }

    public void inARelationalExprTmpEqualityExpr(ARelationalExprTmpEqualityExpr node)
    {
        defaultIn(node);
    }

    public void outARelationalExprTmpEqualityExpr(ARelationalExprTmpEqualityExpr node)
    {
        defaultOut(node);
    }

    public void caseARelationalExprTmpEqualityExpr(ARelationalExprTmpEqualityExpr node)
    {
        inARelationalExprTmpEqualityExpr(node);
        if(node.getTmpRelationalExpr() != null)
        {
            node.getTmpRelationalExpr().apply(this);
        }
        outARelationalExprTmpEqualityExpr(node);
    }

    public void inATmpRelationalExpr(ATmpRelationalExpr node)
    {
        defaultIn(node);
    }

    public void outATmpRelationalExpr(ATmpRelationalExpr node)
    {
        defaultOut(node);
    }

    public void caseATmpRelationalExpr(ATmpRelationalExpr node)
    {
        inATmpRelationalExpr(node);
        if(node.getTmpRelationalExpr() != null)
        {
            node.getTmpRelationalExpr().apply(this);
        }
        if(node.getCompareToken() != null)
        {
            node.getCompareToken().apply(this);
        }
        if(node.getCompositePredicate() != null)
        {
            node.getCompositePredicate().apply(this);
        }
        if(node.getAdditiveExpr() != null)
        {
            node.getAdditiveExpr().apply(this);
        }
        outATmpRelationalExpr(node);
    }

    public void inALastTmpRelationalExpr(ALastTmpRelationalExpr node)
    {
        defaultIn(node);
    }

    public void outALastTmpRelationalExpr(ALastTmpRelationalExpr node)
    {
        defaultOut(node);
    }

    public void caseALastTmpRelationalExpr(ALastTmpRelationalExpr node)
    {
        inALastTmpRelationalExpr(node);
        if(node.getTmpRelationalExpr() != null)
        {
            node.getTmpRelationalExpr().apply(this);
        }
        if(node.getCompareToken() != null)
        {
            node.getCompareToken().apply(this);
        }
        if(node.getCompositePredicate() != null)
        {
            node.getCompositePredicate().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outALastTmpRelationalExpr(node);
    }

    public void inAFirstTmpRelationalExpr(AFirstTmpRelationalExpr node)
    {
        defaultIn(node);
    }

    public void outAFirstTmpRelationalExpr(AFirstTmpRelationalExpr node)
    {
        defaultOut(node);
    }

    public void caseAFirstTmpRelationalExpr(AFirstTmpRelationalExpr node)
    {
        inAFirstTmpRelationalExpr(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getCompareToken() != null)
        {
            node.getCompareToken().apply(this);
        }
        if(node.getCompositePredicate() != null)
        {
            node.getCompositePredicate().apply(this);
        }
        if(node.getAdditiveExpr() != null)
        {
            node.getAdditiveExpr().apply(this);
        }
        outAFirstTmpRelationalExpr(node);
    }

    public void inABothTmpRelationalExpr(ABothTmpRelationalExpr node)
    {
        defaultIn(node);
    }

    public void outABothTmpRelationalExpr(ABothTmpRelationalExpr node)
    {
        defaultOut(node);
    }

    public void caseABothTmpRelationalExpr(ABothTmpRelationalExpr node)
    {
        inABothTmpRelationalExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getCompareToken() != null)
        {
            node.getCompareToken().apply(this);
        }
        if(node.getCompositePredicate() != null)
        {
            node.getCompositePredicate().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outABothTmpRelationalExpr(node);
    }

    public void inAAdditiveExprTmpRelationalExpr(AAdditiveExprTmpRelationalExpr node)
    {
        defaultIn(node);
    }

    public void outAAdditiveExprTmpRelationalExpr(AAdditiveExprTmpRelationalExpr node)
    {
        defaultOut(node);
    }

    public void caseAAdditiveExprTmpRelationalExpr(AAdditiveExprTmpRelationalExpr node)
    {
        inAAdditiveExprTmpRelationalExpr(node);
        if(node.getAdditiveExpr() != null)
        {
            node.getAdditiveExpr().apply(this);
        }
        outAAdditiveExprTmpRelationalExpr(node);
    }

    public void inAEqEqne(AEqEqne node)
    {
        defaultIn(node);
    }

    public void outAEqEqne(AEqEqne node)
    {
        defaultOut(node);
    }

    public void caseAEqEqne(AEqEqne node)
    {
        inAEqEqne(node);
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        outAEqEqne(node);
    }

    public void inANeEqne(ANeEqne node)
    {
        defaultIn(node);
    }

    public void outANeEqne(ANeEqne node)
    {
        defaultOut(node);
    }

    public void caseANeEqne(ANeEqne node)
    {
        inANeEqne(node);
        if(node.getNe() != null)
        {
            node.getNe().apply(this);
        }
        outANeEqne(node);
    }

    public void inALtCompareToken(ALtCompareToken node)
    {
        defaultIn(node);
    }

    public void outALtCompareToken(ALtCompareToken node)
    {
        defaultOut(node);
    }

    public void caseALtCompareToken(ALtCompareToken node)
    {
        inALtCompareToken(node);
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        outALtCompareToken(node);
    }

    public void inALeCompareToken(ALeCompareToken node)
    {
        defaultIn(node);
    }

    public void outALeCompareToken(ALeCompareToken node)
    {
        defaultOut(node);
    }

    public void caseALeCompareToken(ALeCompareToken node)
    {
        inALeCompareToken(node);
        if(node.getLe() != null)
        {
            node.getLe().apply(this);
        }
        outALeCompareToken(node);
    }

    public void inAGtCompareToken(AGtCompareToken node)
    {
        defaultIn(node);
    }

    public void outAGtCompareToken(AGtCompareToken node)
    {
        defaultOut(node);
    }

    public void caseAGtCompareToken(AGtCompareToken node)
    {
        inAGtCompareToken(node);
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        outAGtCompareToken(node);
    }

    public void inAGeCompareToken(AGeCompareToken node)
    {
        defaultIn(node);
    }

    public void outAGeCompareToken(AGeCompareToken node)
    {
        defaultOut(node);
    }

    public void caseAGeCompareToken(AGeCompareToken node)
    {
        inAGeCompareToken(node);
        if(node.getGe() != null)
        {
            node.getGe().apply(this);
        }
        outAGeCompareToken(node);
    }

    public void inASomeCompositePredicate(ASomeCompositePredicate node)
    {
        defaultIn(node);
    }

    public void outASomeCompositePredicate(ASomeCompositePredicate node)
    {
        defaultOut(node);
    }

    public void caseASomeCompositePredicate(ASomeCompositePredicate node)
    {
        inASomeCompositePredicate(node);
        if(node.getSome() != null)
        {
            node.getSome().apply(this);
        }
        outASomeCompositePredicate(node);
    }

    public void inAAnyCompositePredicate(AAnyCompositePredicate node)
    {
        defaultIn(node);
    }

    public void outAAnyCompositePredicate(AAnyCompositePredicate node)
    {
        defaultOut(node);
    }

    public void caseAAnyCompositePredicate(AAnyCompositePredicate node)
    {
        inAAnyCompositePredicate(node);
        if(node.getAny() != null)
        {
            node.getAny().apply(this);
        }
        outAAnyCompositePredicate(node);
    }

    public void inAAllCompositePredicate(AAllCompositePredicate node)
    {
        defaultIn(node);
    }

    public void outAAllCompositePredicate(AAllCompositePredicate node)
    {
        defaultOut(node);
    }

    public void caseAAllCompositePredicate(AAllCompositePredicate node)
    {
        inAAllCompositePredicate(node);
        if(node.getAll() != null)
        {
            node.getAll().apply(this);
        }
        outAAllCompositePredicate(node);
    }

    public void inAPlusAdditiveExpr(APlusAdditiveExpr node)
    {
        defaultIn(node);
    }

    public void outAPlusAdditiveExpr(APlusAdditiveExpr node)
    {
        defaultOut(node);
    }

    public void caseAPlusAdditiveExpr(APlusAdditiveExpr node)
    {
        inAPlusAdditiveExpr(node);
        if(node.getAdditiveExpr() != null)
        {
            node.getAdditiveExpr().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getMultiplicativeExpr() != null)
        {
            node.getMultiplicativeExpr().apply(this);
        }
        outAPlusAdditiveExpr(node);
    }

    public void inALastPlusAdditiveExpr(ALastPlusAdditiveExpr node)
    {
        defaultIn(node);
    }

    public void outALastPlusAdditiveExpr(ALastPlusAdditiveExpr node)
    {
        defaultOut(node);
    }

    public void caseALastPlusAdditiveExpr(ALastPlusAdditiveExpr node)
    {
        inALastPlusAdditiveExpr(node);
        if(node.getAdditiveExpr() != null)
        {
            node.getAdditiveExpr().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outALastPlusAdditiveExpr(node);
    }

    public void inAFirstPlusAdditiveExpr(AFirstPlusAdditiveExpr node)
    {
        defaultIn(node);
    }

    public void outAFirstPlusAdditiveExpr(AFirstPlusAdditiveExpr node)
    {
        defaultOut(node);
    }

    public void caseAFirstPlusAdditiveExpr(AFirstPlusAdditiveExpr node)
    {
        inAFirstPlusAdditiveExpr(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getMultiplicativeExpr() != null)
        {
            node.getMultiplicativeExpr().apply(this);
        }
        outAFirstPlusAdditiveExpr(node);
    }

    public void inABothPlusAdditiveExpr(ABothPlusAdditiveExpr node)
    {
        defaultIn(node);
    }

    public void outABothPlusAdditiveExpr(ABothPlusAdditiveExpr node)
    {
        defaultOut(node);
    }

    public void caseABothPlusAdditiveExpr(ABothPlusAdditiveExpr node)
    {
        inABothPlusAdditiveExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outABothPlusAdditiveExpr(node);
    }

    public void inAMinusAdditiveExpr(AMinusAdditiveExpr node)
    {
        defaultIn(node);
    }

    public void outAMinusAdditiveExpr(AMinusAdditiveExpr node)
    {
        defaultOut(node);
    }

    public void caseAMinusAdditiveExpr(AMinusAdditiveExpr node)
    {
        inAMinusAdditiveExpr(node);
        if(node.getAdditiveExpr() != null)
        {
            node.getAdditiveExpr().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getMultiplicativeExpr() != null)
        {
            node.getMultiplicativeExpr().apply(this);
        }
        outAMinusAdditiveExpr(node);
    }

    public void inALastMinusAdditiveExpr(ALastMinusAdditiveExpr node)
    {
        defaultIn(node);
    }

    public void outALastMinusAdditiveExpr(ALastMinusAdditiveExpr node)
    {
        defaultOut(node);
    }

    public void caseALastMinusAdditiveExpr(ALastMinusAdditiveExpr node)
    {
        inALastMinusAdditiveExpr(node);
        if(node.getAdditiveExpr() != null)
        {
            node.getAdditiveExpr().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outALastMinusAdditiveExpr(node);
    }

    public void inAFirstMinusAdditiveExpr(AFirstMinusAdditiveExpr node)
    {
        defaultIn(node);
    }

    public void outAFirstMinusAdditiveExpr(AFirstMinusAdditiveExpr node)
    {
        defaultOut(node);
    }

    public void caseAFirstMinusAdditiveExpr(AFirstMinusAdditiveExpr node)
    {
        inAFirstMinusAdditiveExpr(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getMultiplicativeExpr() != null)
        {
            node.getMultiplicativeExpr().apply(this);
        }
        outAFirstMinusAdditiveExpr(node);
    }

    public void inABothMinusAdditiveExpr(ABothMinusAdditiveExpr node)
    {
        defaultIn(node);
    }

    public void outABothMinusAdditiveExpr(ABothMinusAdditiveExpr node)
    {
        defaultOut(node);
    }

    public void caseABothMinusAdditiveExpr(ABothMinusAdditiveExpr node)
    {
        inABothMinusAdditiveExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outABothMinusAdditiveExpr(node);
    }

    public void inAUnionAdditiveExpr(AUnionAdditiveExpr node)
    {
        defaultIn(node);
    }

    public void outAUnionAdditiveExpr(AUnionAdditiveExpr node)
    {
        defaultOut(node);
    }

    public void caseAUnionAdditiveExpr(AUnionAdditiveExpr node)
    {
        inAUnionAdditiveExpr(node);
        if(node.getAdditiveExpr() != null)
        {
            node.getAdditiveExpr().apply(this);
        }
        if(node.getUnion() != null)
        {
            node.getUnion().apply(this);
        }
        if(node.getMultiplicativeExpr() != null)
        {
            node.getMultiplicativeExpr().apply(this);
        }
        outAUnionAdditiveExpr(node);
    }

    public void inALastUnionAdditiveExpr(ALastUnionAdditiveExpr node)
    {
        defaultIn(node);
    }

    public void outALastUnionAdditiveExpr(ALastUnionAdditiveExpr node)
    {
        defaultOut(node);
    }

    public void caseALastUnionAdditiveExpr(ALastUnionAdditiveExpr node)
    {
        inALastUnionAdditiveExpr(node);
        if(node.getAdditiveExpr() != null)
        {
            node.getAdditiveExpr().apply(this);
        }
        if(node.getUnion() != null)
        {
            node.getUnion().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outALastUnionAdditiveExpr(node);
    }

    public void inAFirstUnionAdditiveExpr(AFirstUnionAdditiveExpr node)
    {
        defaultIn(node);
    }

    public void outAFirstUnionAdditiveExpr(AFirstUnionAdditiveExpr node)
    {
        defaultOut(node);
    }

    public void caseAFirstUnionAdditiveExpr(AFirstUnionAdditiveExpr node)
    {
        inAFirstUnionAdditiveExpr(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getUnion() != null)
        {
            node.getUnion().apply(this);
        }
        if(node.getMultiplicativeExpr() != null)
        {
            node.getMultiplicativeExpr().apply(this);
        }
        outAFirstUnionAdditiveExpr(node);
    }

    public void inABothUnionAdditiveExpr(ABothUnionAdditiveExpr node)
    {
        defaultIn(node);
    }

    public void outABothUnionAdditiveExpr(ABothUnionAdditiveExpr node)
    {
        defaultOut(node);
    }

    public void caseABothUnionAdditiveExpr(ABothUnionAdditiveExpr node)
    {
        inABothUnionAdditiveExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getUnion() != null)
        {
            node.getUnion().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outABothUnionAdditiveExpr(node);
    }

    public void inAExceptAdditiveExpr(AExceptAdditiveExpr node)
    {
        defaultIn(node);
    }

    public void outAExceptAdditiveExpr(AExceptAdditiveExpr node)
    {
        defaultOut(node);
    }

    public void caseAExceptAdditiveExpr(AExceptAdditiveExpr node)
    {
        inAExceptAdditiveExpr(node);
        if(node.getAdditiveExpr() != null)
        {
            node.getAdditiveExpr().apply(this);
        }
        if(node.getExcept() != null)
        {
            node.getExcept().apply(this);
        }
        if(node.getMultiplicativeExpr() != null)
        {
            node.getMultiplicativeExpr().apply(this);
        }
        outAExceptAdditiveExpr(node);
    }

    public void inALastExceptAdditiveExpr(ALastExceptAdditiveExpr node)
    {
        defaultIn(node);
    }

    public void outALastExceptAdditiveExpr(ALastExceptAdditiveExpr node)
    {
        defaultOut(node);
    }

    public void caseALastExceptAdditiveExpr(ALastExceptAdditiveExpr node)
    {
        inALastExceptAdditiveExpr(node);
        if(node.getAdditiveExpr() != null)
        {
            node.getAdditiveExpr().apply(this);
        }
        if(node.getExcept() != null)
        {
            node.getExcept().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outALastExceptAdditiveExpr(node);
    }

    public void inAFirstExceptAdditiveExpr(AFirstExceptAdditiveExpr node)
    {
        defaultIn(node);
    }

    public void outAFirstExceptAdditiveExpr(AFirstExceptAdditiveExpr node)
    {
        defaultOut(node);
    }

    public void caseAFirstExceptAdditiveExpr(AFirstExceptAdditiveExpr node)
    {
        inAFirstExceptAdditiveExpr(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getExcept() != null)
        {
            node.getExcept().apply(this);
        }
        if(node.getMultiplicativeExpr() != null)
        {
            node.getMultiplicativeExpr().apply(this);
        }
        outAFirstExceptAdditiveExpr(node);
    }

    public void inABothExceptAdditiveExpr(ABothExceptAdditiveExpr node)
    {
        defaultIn(node);
    }

    public void outABothExceptAdditiveExpr(ABothExceptAdditiveExpr node)
    {
        defaultOut(node);
    }

    public void caseABothExceptAdditiveExpr(ABothExceptAdditiveExpr node)
    {
        inABothExceptAdditiveExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getExcept() != null)
        {
            node.getExcept().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outABothExceptAdditiveExpr(node);
    }

    public void inABinorAdditiveExpr(ABinorAdditiveExpr node)
    {
        defaultIn(node);
    }

    public void outABinorAdditiveExpr(ABinorAdditiveExpr node)
    {
        defaultOut(node);
    }

    public void caseABinorAdditiveExpr(ABinorAdditiveExpr node)
    {
        inABinorAdditiveExpr(node);
        if(node.getAdditiveExpr() != null)
        {
            node.getAdditiveExpr().apply(this);
        }
        if(node.getBinor() != null)
        {
            node.getBinor().apply(this);
        }
        if(node.getMultiplicativeExpr() != null)
        {
            node.getMultiplicativeExpr().apply(this);
        }
        outABinorAdditiveExpr(node);
    }

    public void inALastBinorAdditiveExpr(ALastBinorAdditiveExpr node)
    {
        defaultIn(node);
    }

    public void outALastBinorAdditiveExpr(ALastBinorAdditiveExpr node)
    {
        defaultOut(node);
    }

    public void caseALastBinorAdditiveExpr(ALastBinorAdditiveExpr node)
    {
        inALastBinorAdditiveExpr(node);
        if(node.getAdditiveExpr() != null)
        {
            node.getAdditiveExpr().apply(this);
        }
        if(node.getBinor() != null)
        {
            node.getBinor().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outALastBinorAdditiveExpr(node);
    }

    public void inAFirstBinorAdditiveExpr(AFirstBinorAdditiveExpr node)
    {
        defaultIn(node);
    }

    public void outAFirstBinorAdditiveExpr(AFirstBinorAdditiveExpr node)
    {
        defaultOut(node);
    }

    public void caseAFirstBinorAdditiveExpr(AFirstBinorAdditiveExpr node)
    {
        inAFirstBinorAdditiveExpr(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getBinor() != null)
        {
            node.getBinor().apply(this);
        }
        if(node.getMultiplicativeExpr() != null)
        {
            node.getMultiplicativeExpr().apply(this);
        }
        outAFirstBinorAdditiveExpr(node);
    }

    public void inABothBinorAdditiveExpr(ABothBinorAdditiveExpr node)
    {
        defaultIn(node);
    }

    public void outABothBinorAdditiveExpr(ABothBinorAdditiveExpr node)
    {
        defaultOut(node);
    }

    public void caseABothBinorAdditiveExpr(ABothBinorAdditiveExpr node)
    {
        inABothBinorAdditiveExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getBinor() != null)
        {
            node.getBinor().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outABothBinorAdditiveExpr(node);
    }

    public void inAMultiplicativeExprAdditiveExpr(AMultiplicativeExprAdditiveExpr node)
    {
        defaultIn(node);
    }

    public void outAMultiplicativeExprAdditiveExpr(AMultiplicativeExprAdditiveExpr node)
    {
        defaultOut(node);
    }

    public void caseAMultiplicativeExprAdditiveExpr(AMultiplicativeExprAdditiveExpr node)
    {
        inAMultiplicativeExprAdditiveExpr(node);
        if(node.getMultiplicativeExpr() != null)
        {
            node.getMultiplicativeExpr().apply(this);
        }
        outAMultiplicativeExprAdditiveExpr(node);
    }

    public void inATimesMultiplicativeExpr(ATimesMultiplicativeExpr node)
    {
        defaultIn(node);
    }

    public void outATimesMultiplicativeExpr(ATimesMultiplicativeExpr node)
    {
        defaultOut(node);
    }

    public void caseATimesMultiplicativeExpr(ATimesMultiplicativeExpr node)
    {
        inATimesMultiplicativeExpr(node);
        if(node.getMultiplicativeExpr() != null)
        {
            node.getMultiplicativeExpr().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        if(node.getTmpInExpr() != null)
        {
            node.getTmpInExpr().apply(this);
        }
        outATimesMultiplicativeExpr(node);
    }

    public void inALastTimesMultiplicativeExpr(ALastTimesMultiplicativeExpr node)
    {
        defaultIn(node);
    }

    public void outALastTimesMultiplicativeExpr(ALastTimesMultiplicativeExpr node)
    {
        defaultOut(node);
    }

    public void caseALastTimesMultiplicativeExpr(ALastTimesMultiplicativeExpr node)
    {
        inALastTimesMultiplicativeExpr(node);
        if(node.getMultiplicativeExpr() != null)
        {
            node.getMultiplicativeExpr().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outALastTimesMultiplicativeExpr(node);
    }

    public void inAFirstTimesMultiplicativeExpr(AFirstTimesMultiplicativeExpr node)
    {
        defaultIn(node);
    }

    public void outAFirstTimesMultiplicativeExpr(AFirstTimesMultiplicativeExpr node)
    {
        defaultOut(node);
    }

    public void caseAFirstTimesMultiplicativeExpr(AFirstTimesMultiplicativeExpr node)
    {
        inAFirstTimesMultiplicativeExpr(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        if(node.getTmpInExpr() != null)
        {
            node.getTmpInExpr().apply(this);
        }
        outAFirstTimesMultiplicativeExpr(node);
    }

    public void inABothTimesMultiplicativeExpr(ABothTimesMultiplicativeExpr node)
    {
        defaultIn(node);
    }

    public void outABothTimesMultiplicativeExpr(ABothTimesMultiplicativeExpr node)
    {
        defaultOut(node);
    }

    public void caseABothTimesMultiplicativeExpr(ABothTimesMultiplicativeExpr node)
    {
        inABothTimesMultiplicativeExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outABothTimesMultiplicativeExpr(node);
    }

    public void inAIntersectionMultiplicativeExpr(AIntersectionMultiplicativeExpr node)
    {
        defaultIn(node);
    }

    public void outAIntersectionMultiplicativeExpr(AIntersectionMultiplicativeExpr node)
    {
        defaultOut(node);
    }

    public void caseAIntersectionMultiplicativeExpr(AIntersectionMultiplicativeExpr node)
    {
        inAIntersectionMultiplicativeExpr(node);
        if(node.getMultiplicativeExpr() != null)
        {
            node.getMultiplicativeExpr().apply(this);
        }
        if(node.getSetAnd() != null)
        {
            node.getSetAnd().apply(this);
        }
        if(node.getTmpInExpr() != null)
        {
            node.getTmpInExpr().apply(this);
        }
        outAIntersectionMultiplicativeExpr(node);
    }

    public void inALastIntersectionMultiplicativeExpr(ALastIntersectionMultiplicativeExpr node)
    {
        defaultIn(node);
    }

    public void outALastIntersectionMultiplicativeExpr(ALastIntersectionMultiplicativeExpr node)
    {
        defaultOut(node);
    }

    public void caseALastIntersectionMultiplicativeExpr(ALastIntersectionMultiplicativeExpr node)
    {
        inALastIntersectionMultiplicativeExpr(node);
        if(node.getMultiplicativeExpr() != null)
        {
            node.getMultiplicativeExpr().apply(this);
        }
        if(node.getSetAnd() != null)
        {
            node.getSetAnd().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outALastIntersectionMultiplicativeExpr(node);
    }

    public void inAFirstIntersectionMultiplicativeExpr(AFirstIntersectionMultiplicativeExpr node)
    {
        defaultIn(node);
    }

    public void outAFirstIntersectionMultiplicativeExpr(AFirstIntersectionMultiplicativeExpr node)
    {
        defaultOut(node);
    }

    public void caseAFirstIntersectionMultiplicativeExpr(AFirstIntersectionMultiplicativeExpr node)
    {
        inAFirstIntersectionMultiplicativeExpr(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getSetAnd() != null)
        {
            node.getSetAnd().apply(this);
        }
        if(node.getTmpInExpr() != null)
        {
            node.getTmpInExpr().apply(this);
        }
        outAFirstIntersectionMultiplicativeExpr(node);
    }

    public void inABothIntersectionMultiplicativeExpr(ABothIntersectionMultiplicativeExpr node)
    {
        defaultIn(node);
    }

    public void outABothIntersectionMultiplicativeExpr(ABothIntersectionMultiplicativeExpr node)
    {
        defaultOut(node);
    }

    public void caseABothIntersectionMultiplicativeExpr(ABothIntersectionMultiplicativeExpr node)
    {
        inABothIntersectionMultiplicativeExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getSetAnd() != null)
        {
            node.getSetAnd().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outABothIntersectionMultiplicativeExpr(node);
    }

    public void inADivideMultiplicativeExpr(ADivideMultiplicativeExpr node)
    {
        defaultIn(node);
    }

    public void outADivideMultiplicativeExpr(ADivideMultiplicativeExpr node)
    {
        defaultOut(node);
    }

    public void caseADivideMultiplicativeExpr(ADivideMultiplicativeExpr node)
    {
        inADivideMultiplicativeExpr(node);
        if(node.getMultiplicativeExpr() != null)
        {
            node.getMultiplicativeExpr().apply(this);
        }
        if(node.getDivide() != null)
        {
            node.getDivide().apply(this);
        }
        if(node.getTmpInExpr() != null)
        {
            node.getTmpInExpr().apply(this);
        }
        outADivideMultiplicativeExpr(node);
    }

    public void inALastDivideMultiplicativeExpr(ALastDivideMultiplicativeExpr node)
    {
        defaultIn(node);
    }

    public void outALastDivideMultiplicativeExpr(ALastDivideMultiplicativeExpr node)
    {
        defaultOut(node);
    }

    public void caseALastDivideMultiplicativeExpr(ALastDivideMultiplicativeExpr node)
    {
        inALastDivideMultiplicativeExpr(node);
        if(node.getMultiplicativeExpr() != null)
        {
            node.getMultiplicativeExpr().apply(this);
        }
        if(node.getDivide() != null)
        {
            node.getDivide().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outALastDivideMultiplicativeExpr(node);
    }

    public void inAFirstDivideMultiplicativeExpr(AFirstDivideMultiplicativeExpr node)
    {
        defaultIn(node);
    }

    public void outAFirstDivideMultiplicativeExpr(AFirstDivideMultiplicativeExpr node)
    {
        defaultOut(node);
    }

    public void caseAFirstDivideMultiplicativeExpr(AFirstDivideMultiplicativeExpr node)
    {
        inAFirstDivideMultiplicativeExpr(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getDivide() != null)
        {
            node.getDivide().apply(this);
        }
        if(node.getTmpInExpr() != null)
        {
            node.getTmpInExpr().apply(this);
        }
        outAFirstDivideMultiplicativeExpr(node);
    }

    public void inABothDivideMultiplicativeExpr(ABothDivideMultiplicativeExpr node)
    {
        defaultIn(node);
    }

    public void outABothDivideMultiplicativeExpr(ABothDivideMultiplicativeExpr node)
    {
        defaultOut(node);
    }

    public void caseABothDivideMultiplicativeExpr(ABothDivideMultiplicativeExpr node)
    {
        inABothDivideMultiplicativeExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getDivide() != null)
        {
            node.getDivide().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outABothDivideMultiplicativeExpr(node);
    }

    public void inAModMultiplicativeExpr(AModMultiplicativeExpr node)
    {
        defaultIn(node);
    }

    public void outAModMultiplicativeExpr(AModMultiplicativeExpr node)
    {
        defaultOut(node);
    }

    public void caseAModMultiplicativeExpr(AModMultiplicativeExpr node)
    {
        inAModMultiplicativeExpr(node);
        if(node.getMultiplicativeExpr() != null)
        {
            node.getMultiplicativeExpr().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getTmpInExpr() != null)
        {
            node.getTmpInExpr().apply(this);
        }
        outAModMultiplicativeExpr(node);
    }

    public void inALastModMultiplicativeExpr(ALastModMultiplicativeExpr node)
    {
        defaultIn(node);
    }

    public void outALastModMultiplicativeExpr(ALastModMultiplicativeExpr node)
    {
        defaultOut(node);
    }

    public void caseALastModMultiplicativeExpr(ALastModMultiplicativeExpr node)
    {
        inALastModMultiplicativeExpr(node);
        if(node.getMultiplicativeExpr() != null)
        {
            node.getMultiplicativeExpr().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outALastModMultiplicativeExpr(node);
    }

    public void inAFirstModMultiplicativeExpr(AFirstModMultiplicativeExpr node)
    {
        defaultIn(node);
    }

    public void outAFirstModMultiplicativeExpr(AFirstModMultiplicativeExpr node)
    {
        defaultOut(node);
    }

    public void caseAFirstModMultiplicativeExpr(AFirstModMultiplicativeExpr node)
    {
        inAFirstModMultiplicativeExpr(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getTmpInExpr() != null)
        {
            node.getTmpInExpr().apply(this);
        }
        outAFirstModMultiplicativeExpr(node);
    }

    public void inABothModMultiplicativeExpr(ABothModMultiplicativeExpr node)
    {
        defaultIn(node);
    }

    public void outABothModMultiplicativeExpr(ABothModMultiplicativeExpr node)
    {
        defaultOut(node);
    }

    public void caseABothModMultiplicativeExpr(ABothModMultiplicativeExpr node)
    {
        inABothModMultiplicativeExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outABothModMultiplicativeExpr(node);
    }

    public void inAIntersectMultiplicativeExpr(AIntersectMultiplicativeExpr node)
    {
        defaultIn(node);
    }

    public void outAIntersectMultiplicativeExpr(AIntersectMultiplicativeExpr node)
    {
        defaultOut(node);
    }

    public void caseAIntersectMultiplicativeExpr(AIntersectMultiplicativeExpr node)
    {
        inAIntersectMultiplicativeExpr(node);
        if(node.getMultiplicativeExpr() != null)
        {
            node.getMultiplicativeExpr().apply(this);
        }
        if(node.getIntersect() != null)
        {
            node.getIntersect().apply(this);
        }
        if(node.getTmpInExpr() != null)
        {
            node.getTmpInExpr().apply(this);
        }
        outAIntersectMultiplicativeExpr(node);
    }

    public void inALastIntersectMultiplicativeExpr(ALastIntersectMultiplicativeExpr node)
    {
        defaultIn(node);
    }

    public void outALastIntersectMultiplicativeExpr(ALastIntersectMultiplicativeExpr node)
    {
        defaultOut(node);
    }

    public void caseALastIntersectMultiplicativeExpr(ALastIntersectMultiplicativeExpr node)
    {
        inALastIntersectMultiplicativeExpr(node);
        if(node.getMultiplicativeExpr() != null)
        {
            node.getMultiplicativeExpr().apply(this);
        }
        if(node.getIntersect() != null)
        {
            node.getIntersect().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outALastIntersectMultiplicativeExpr(node);
    }

    public void inAFirstIntersectMultiplicativeExpr(AFirstIntersectMultiplicativeExpr node)
    {
        defaultIn(node);
    }

    public void outAFirstIntersectMultiplicativeExpr(AFirstIntersectMultiplicativeExpr node)
    {
        defaultOut(node);
    }

    public void caseAFirstIntersectMultiplicativeExpr(AFirstIntersectMultiplicativeExpr node)
    {
        inAFirstIntersectMultiplicativeExpr(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getIntersect() != null)
        {
            node.getIntersect().apply(this);
        }
        if(node.getTmpInExpr() != null)
        {
            node.getTmpInExpr().apply(this);
        }
        outAFirstIntersectMultiplicativeExpr(node);
    }

    public void inABothIntersectMultiplicativeExpr(ABothIntersectMultiplicativeExpr node)
    {
        defaultIn(node);
    }

    public void outABothIntersectMultiplicativeExpr(ABothIntersectMultiplicativeExpr node)
    {
        defaultOut(node);
    }

    public void caseABothIntersectMultiplicativeExpr(ABothIntersectMultiplicativeExpr node)
    {
        inABothIntersectMultiplicativeExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getIntersect() != null)
        {
            node.getIntersect().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outABothIntersectMultiplicativeExpr(node);
    }

    public void inAInExprMultiplicativeExpr(AInExprMultiplicativeExpr node)
    {
        defaultIn(node);
    }

    public void outAInExprMultiplicativeExpr(AInExprMultiplicativeExpr node)
    {
        defaultOut(node);
    }

    public void caseAInExprMultiplicativeExpr(AInExprMultiplicativeExpr node)
    {
        inAInExprMultiplicativeExpr(node);
        if(node.getTmpInExpr() != null)
        {
            node.getTmpInExpr().apply(this);
        }
        outAInExprMultiplicativeExpr(node);
    }

    public void inATmpInExpr(ATmpInExpr node)
    {
        defaultIn(node);
    }

    public void outATmpInExpr(ATmpInExpr node)
    {
        defaultOut(node);
    }

    public void caseATmpInExpr(ATmpInExpr node)
    {
        inATmpInExpr(node);
        if(node.getTmpInExpr() != null)
        {
            node.getTmpInExpr().apply(this);
        }
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        if(node.getIn() != null)
        {
            node.getIn().apply(this);
        }
        if(node.getCommaExpr() != null)
        {
            node.getCommaExpr().apply(this);
        }
        outATmpInExpr(node);
    }

    public void inAListTmpInExpr(AListTmpInExpr node)
    {
        defaultIn(node);
    }

    public void outAListTmpInExpr(AListTmpInExpr node)
    {
        defaultOut(node);
    }

    public void caseAListTmpInExpr(AListTmpInExpr node)
    {
        inAListTmpInExpr(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        if(node.getIn() != null)
        {
            node.getIn().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getUnaryExpr() != null)
        {
            node.getUnaryExpr().apply(this);
        }
        {
            Object temp[] = node.getInlist().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PInlist) temp[i]).apply(this);
            }
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outAListTmpInExpr(node);
    }

    public void inALastTmpInExpr(ALastTmpInExpr node)
    {
        defaultIn(node);
    }

    public void outALastTmpInExpr(ALastTmpInExpr node)
    {
        defaultOut(node);
    }

    public void caseALastTmpInExpr(ALastTmpInExpr node)
    {
        inALastTmpInExpr(node);
        if(node.getTmpInExpr() != null)
        {
            node.getTmpInExpr().apply(this);
        }
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        if(node.getIn() != null)
        {
            node.getIn().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outALastTmpInExpr(node);
    }

    public void inAFirstTmpInExpr(AFirstTmpInExpr node)
    {
        defaultIn(node);
    }

    public void outAFirstTmpInExpr(AFirstTmpInExpr node)
    {
        defaultOut(node);
    }

    public void caseAFirstTmpInExpr(AFirstTmpInExpr node)
    {
        inAFirstTmpInExpr(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        if(node.getIn() != null)
        {
            node.getIn().apply(this);
        }
        if(node.getUnaryExpr() != null)
        {
            node.getUnaryExpr().apply(this);
        }
        outAFirstTmpInExpr(node);
    }

    public void inABothTmpInExpr(ABothTmpInExpr node)
    {
        defaultIn(node);
    }

    public void outABothTmpInExpr(ABothTmpInExpr node)
    {
        defaultOut(node);
    }

    public void caseABothTmpInExpr(ABothTmpInExpr node)
    {
        inABothTmpInExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        if(node.getIn() != null)
        {
            node.getIn().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outABothTmpInExpr(node);
    }

    public void inADistinctTmpInExpr(ADistinctTmpInExpr node)
    {
        defaultIn(node);
    }

    public void outADistinctTmpInExpr(ADistinctTmpInExpr node)
    {
        defaultOut(node);
    }

    public void caseADistinctTmpInExpr(ADistinctTmpInExpr node)
    {
        inADistinctTmpInExpr(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        if(node.getIn() != null)
        {
            node.getIn().apply(this);
        }
        if(node.getDistinct() != null)
        {
            node.getDistinct().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getQueryRestricted() != null)
        {
            node.getQueryRestricted().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outADistinctTmpInExpr(node);
    }

    public void inADistinctIdentifierTmpInExpr(ADistinctIdentifierTmpInExpr node)
    {
        defaultIn(node);
    }

    public void outADistinctIdentifierTmpInExpr(ADistinctIdentifierTmpInExpr node)
    {
        defaultOut(node);
    }

    public void caseADistinctIdentifierTmpInExpr(ADistinctIdentifierTmpInExpr node)
    {
        inADistinctIdentifierTmpInExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        if(node.getIn() != null)
        {
            node.getIn().apply(this);
        }
        if(node.getDistinct() != null)
        {
            node.getDistinct().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outADistinctIdentifierTmpInExpr(node);
    }

    public void inAUnaryExprTmpInExpr(AUnaryExprTmpInExpr node)
    {
        defaultIn(node);
    }

    public void outAUnaryExprTmpInExpr(AUnaryExprTmpInExpr node)
    {
        defaultOut(node);
    }

    public void caseAUnaryExprTmpInExpr(AUnaryExprTmpInExpr node)
    {
        inAUnaryExprTmpInExpr(node);
        if(node.getUnaryExpr() != null)
        {
            node.getUnaryExpr().apply(this);
        }
        outAUnaryExprTmpInExpr(node);
    }

    public void inACommaExpr(ACommaExpr node)
    {
        defaultIn(node);
    }

    public void outACommaExpr(ACommaExpr node)
    {
        defaultOut(node);
    }

    public void caseACommaExpr(ACommaExpr node)
    {
        inACommaExpr(node);
        if(node.getUnaryExpr() != null)
        {
            node.getUnaryExpr().apply(this);
        }
        outACommaExpr(node);
    }

    public void inACommaSeparatedExprCommaExpr(ACommaSeparatedExprCommaExpr node)
    {
        defaultIn(node);
    }

    public void outACommaSeparatedExprCommaExpr(ACommaSeparatedExprCommaExpr node)
    {
        defaultOut(node);
    }

    public void caseACommaSeparatedExprCommaExpr(ACommaSeparatedExprCommaExpr node)
    {
        inACommaSeparatedExprCommaExpr(node);
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getUnaryExpr() != null)
        {
            node.getUnaryExpr().apply(this);
        }
        {
            Object temp[] = node.getInlist().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PInlist) temp[i]).apply(this);
            }
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outACommaSeparatedExprCommaExpr(node);
    }

    public void inAInlist(AInlist node)
    {
        defaultIn(node);
    }

    public void outAInlist(AInlist node)
    {
        defaultOut(node);
    }

    public void caseAInlist(AInlist node)
    {
        inAInlist(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getUnaryExpr() != null)
        {
            node.getUnaryExpr().apply(this);
        }
        outAInlist(node);
    }

    public void inAPlusUnaryExpr(APlusUnaryExpr node)
    {
        defaultIn(node);
    }

    public void outAPlusUnaryExpr(APlusUnaryExpr node)
    {
        defaultOut(node);
    }

    public void caseAPlusUnaryExpr(APlusUnaryExpr node)
    {
        inAPlusUnaryExpr(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getUnaryExpr() != null)
        {
            node.getUnaryExpr().apply(this);
        }
        outAPlusUnaryExpr(node);
    }

    public void inAIdentifierPlusUnaryExpr(AIdentifierPlusUnaryExpr node)
    {
        defaultIn(node);
    }

    public void outAIdentifierPlusUnaryExpr(AIdentifierPlusUnaryExpr node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierPlusUnaryExpr(AIdentifierPlusUnaryExpr node)
    {
        inAIdentifierPlusUnaryExpr(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierPlusUnaryExpr(node);
    }

    public void inAMinusUnaryExpr(AMinusUnaryExpr node)
    {
        defaultIn(node);
    }

    public void outAMinusUnaryExpr(AMinusUnaryExpr node)
    {
        defaultOut(node);
    }

    public void caseAMinusUnaryExpr(AMinusUnaryExpr node)
    {
        inAMinusUnaryExpr(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getUnaryExpr() != null)
        {
            node.getUnaryExpr().apply(this);
        }
        outAMinusUnaryExpr(node);
    }

    public void inAIdentifierMinusUnaryExpr(AIdentifierMinusUnaryExpr node)
    {
        defaultIn(node);
    }

    public void outAIdentifierMinusUnaryExpr(AIdentifierMinusUnaryExpr node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierMinusUnaryExpr(AIdentifierMinusUnaryExpr node)
    {
        inAIdentifierMinusUnaryExpr(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierMinusUnaryExpr(node);
    }

    public void inAAbsUnaryExpr(AAbsUnaryExpr node)
    {
        defaultIn(node);
    }

    public void outAAbsUnaryExpr(AAbsUnaryExpr node)
    {
        defaultOut(node);
    }

    public void caseAAbsUnaryExpr(AAbsUnaryExpr node)
    {
        inAAbsUnaryExpr(node);
        if(node.getAbs() != null)
        {
            node.getAbs().apply(this);
        }
        if(node.getUnaryExpr() != null)
        {
            node.getUnaryExpr().apply(this);
        }
        outAAbsUnaryExpr(node);
    }

    public void inAIdentifierAbsUnaryExpr(AIdentifierAbsUnaryExpr node)
    {
        defaultIn(node);
    }

    public void outAIdentifierAbsUnaryExpr(AIdentifierAbsUnaryExpr node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierAbsUnaryExpr(AIdentifierAbsUnaryExpr node)
    {
        inAIdentifierAbsUnaryExpr(node);
        if(node.getAbs() != null)
        {
            node.getAbs().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierAbsUnaryExpr(node);
    }

    public void inANotUnaryExpr(ANotUnaryExpr node)
    {
        defaultIn(node);
    }

    public void outANotUnaryExpr(ANotUnaryExpr node)
    {
        defaultOut(node);
    }

    public void caseANotUnaryExpr(ANotUnaryExpr node)
    {
        inANotUnaryExpr(node);
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        if(node.getUnaryExpr() != null)
        {
            node.getUnaryExpr().apply(this);
        }
        outANotUnaryExpr(node);
    }

    public void inAIdentifierNotUnaryExpr(AIdentifierNotUnaryExpr node)
    {
        defaultIn(node);
    }

    public void outAIdentifierNotUnaryExpr(AIdentifierNotUnaryExpr node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierNotUnaryExpr(AIdentifierNotUnaryExpr node)
    {
        inAIdentifierNotUnaryExpr(node);
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierNotUnaryExpr(node);
    }

    public void inAPostfixUnaryExpr(APostfixUnaryExpr node)
    {
        defaultIn(node);
    }

    public void outAPostfixUnaryExpr(APostfixUnaryExpr node)
    {
        defaultOut(node);
    }

    public void caseAPostfixUnaryExpr(APostfixUnaryExpr node)
    {
        inAPostfixUnaryExpr(node);
        if(node.getPostfixExpr() != null)
        {
            node.getPostfixExpr().apply(this);
        }
        outAPostfixUnaryExpr(node);
    }

    public void inAIndexPostfixExpr(AIndexPostfixExpr node)
    {
        defaultIn(node);
    }

    public void outAIndexPostfixExpr(AIndexPostfixExpr node)
    {
        defaultOut(node);
    }

    public void caseAIndexPostfixExpr(AIndexPostfixExpr node)
    {
        inAIndexPostfixExpr(node);
        if(node.getPostfixExpr() != null)
        {
            node.getPostfixExpr().apply(this);
        }
        if(node.getSqBracketL() != null)
        {
            node.getSqBracketL().apply(this);
        }
        if(node.getIndex() != null)
        {
            node.getIndex().apply(this);
        }
        if(node.getSqBracketR() != null)
        {
            node.getSqBracketR().apply(this);
        }
        outAIndexPostfixExpr(node);
    }

    public void inAIdentifierIndexPostfixExpr(AIdentifierIndexPostfixExpr node)
    {
        defaultIn(node);
    }

    public void outAIdentifierIndexPostfixExpr(AIdentifierIndexPostfixExpr node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierIndexPostfixExpr(AIdentifierIndexPostfixExpr node)
    {
        inAIdentifierIndexPostfixExpr(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getSqBracketL() != null)
        {
            node.getSqBracketL().apply(this);
        }
        if(node.getIndex() != null)
        {
            node.getIndex().apply(this);
        }
        if(node.getSqBracketR() != null)
        {
            node.getSqBracketR().apply(this);
        }
        outAIdentifierIndexPostfixExpr(node);
    }

    public void inAFieldPostfixExpr(AFieldPostfixExpr node)
    {
        defaultIn(node);
    }

    public void outAFieldPostfixExpr(AFieldPostfixExpr node)
    {
        defaultOut(node);
    }

    public void caseAFieldPostfixExpr(AFieldPostfixExpr node)
    {
        inAFieldPostfixExpr(node);
        if(node.getPostfixExpr() != null)
        {
            node.getPostfixExpr().apply(this);
        }
        if(node.getDotarrow() != null)
        {
            node.getDotarrow().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAFieldPostfixExpr(node);
    }

    public void inAIdentifierFieldPostfixExpr(AIdentifierFieldPostfixExpr node)
    {
        defaultIn(node);
    }

    public void outAIdentifierFieldPostfixExpr(AIdentifierFieldPostfixExpr node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierFieldPostfixExpr(AIdentifierFieldPostfixExpr node)
    {
        inAIdentifierFieldPostfixExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getDotarrow() != null)
        {
            node.getDotarrow().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAIdentifierFieldPostfixExpr(node);
    }

    public void inAMethodPostfixExpr(AMethodPostfixExpr node)
    {
        defaultIn(node);
    }

    public void outAMethodPostfixExpr(AMethodPostfixExpr node)
    {
        defaultOut(node);
    }

    public void caseAMethodPostfixExpr(AMethodPostfixExpr node)
    {
        inAMethodPostfixExpr(node);
        if(node.getPostfixExpr() != null)
        {
            node.getPostfixExpr().apply(this);
        }
        if(node.getDotarrow() != null)
        {
            node.getDotarrow().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getValueList() != null)
        {
            node.getValueList().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outAMethodPostfixExpr(node);
    }

    public void inAIdentifierMethodPostfixExpr(AIdentifierMethodPostfixExpr node)
    {
        defaultIn(node);
    }

    public void outAIdentifierMethodPostfixExpr(AIdentifierMethodPostfixExpr node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierMethodPostfixExpr(AIdentifierMethodPostfixExpr node)
    {
        inAIdentifierMethodPostfixExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getDotarrow() != null)
        {
            node.getDotarrow().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getValueList() != null)
        {
            node.getValueList().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outAIdentifierMethodPostfixExpr(node);
    }

    public void inAPrimaryExprPostfixExpr(APrimaryExprPostfixExpr node)
    {
        defaultIn(node);
    }

    public void outAPrimaryExprPostfixExpr(APrimaryExprPostfixExpr node)
    {
        defaultOut(node);
    }

    public void caseAPrimaryExprPostfixExpr(APrimaryExprPostfixExpr node)
    {
        inAPrimaryExprPostfixExpr(node);
        if(node.getPrimaryExpr() != null)
        {
            node.getPrimaryExpr().apply(this);
        }
        outAPrimaryExprPostfixExpr(node);
    }

    public void inATransitivedotDotarrow(ATransitivedotDotarrow node)
    {
        defaultIn(node);
    }

    public void outATransitivedotDotarrow(ATransitivedotDotarrow node)
    {
        defaultOut(node);
    }

    public void caseATransitivedotDotarrow(ATransitivedotDotarrow node)
    {
        inATransitivedotDotarrow(node);
        if(node.getDotdotdot() != null)
        {
            node.getDotdotdot().apply(this);
        }
        outATransitivedotDotarrow(node);
    }

    public void inADotDotarrow(ADotDotarrow node)
    {
        defaultIn(node);
    }

    public void outADotDotarrow(ADotDotarrow node)
    {
        defaultOut(node);
    }

    public void caseADotDotarrow(ADotDotarrow node)
    {
        inADotDotarrow(node);
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        outADotDotarrow(node);
    }

    public void inAArrowDotarrow(AArrowDotarrow node)
    {
        defaultIn(node);
    }

    public void outAArrowDotarrow(AArrowDotarrow node)
    {
        defaultOut(node);
    }

    public void caseAArrowDotarrow(AArrowDotarrow node)
    {
        inAArrowDotarrow(node);
        if(node.getArrow() != null)
        {
            node.getArrow().apply(this);
        }
        outAArrowDotarrow(node);
    }

    public void inAIndex(AIndex node)
    {
        defaultIn(node);
    }

    public void outAIndex(AIndex node)
    {
        defaultOut(node);
    }

    public void caseAIndex(AIndex node)
    {
        inAIndex(node);
        if(node.getIndexAll() != null)
        {
            node.getIndexAll().apply(this);
        }
        outAIndex(node);
    }

    public void inAIndexAll(AIndexAll node)
    {
        defaultIn(node);
    }

    public void outAIndexAll(AIndexAll node)
    {
        defaultOut(node);
    }

    public void caseAIndexAll(AIndexAll node)
    {
        inAIndexAll(node);
        if(node.getExprRestricted() != null)
        {
            node.getExprRestricted().apply(this);
        }
        outAIndexAll(node);
    }

    public void inASimpleIndexAll(ASimpleIndexAll node)
    {
        defaultIn(node);
    }

    public void outASimpleIndexAll(ASimpleIndexAll node)
    {
        defaultOut(node);
    }

    public void caseASimpleIndexAll(ASimpleIndexAll node)
    {
        inASimpleIndexAll(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outASimpleIndexAll(node);
    }

    public void inAColonIndexAll(AColonIndexAll node)
    {
        defaultIn(node);
    }

    public void outAColonIndexAll(AColonIndexAll node)
    {
        defaultOut(node);
    }

    public void caseAColonIndexAll(AColonIndexAll node)
    {
        inAColonIndexAll(node);
        if(node.getIndex() != null)
        {
            node.getIndex().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getExprRestricted() != null)
        {
            node.getExprRestricted().apply(this);
        }
        outAColonIndexAll(node);
    }

    public void inALastIdentifierIndexAll(ALastIdentifierIndexAll node)
    {
        defaultIn(node);
    }

    public void outALastIdentifierIndexAll(ALastIdentifierIndexAll node)
    {
        defaultOut(node);
    }

    public void caseALastIdentifierIndexAll(ALastIdentifierIndexAll node)
    {
        inALastIdentifierIndexAll(node);
        if(node.getIndex() != null)
        {
            node.getIndex().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outALastIdentifierIndexAll(node);
    }

    public void inAIdentifierIndexAll(AIdentifierIndexAll node)
    {
        defaultIn(node);
    }

    public void outAIdentifierIndexAll(AIdentifierIndexAll node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierIndexAll(AIdentifierIndexAll node)
    {
        inAIdentifierIndexAll(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierIndexAll(node);
    }

    public void inACommaIndexAll(ACommaIndexAll node)
    {
        defaultIn(node);
    }

    public void outACommaIndexAll(ACommaIndexAll node)
    {
        defaultOut(node);
    }

    public void caseACommaIndexAll(ACommaIndexAll node)
    {
        inACommaIndexAll(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outACommaIndexAll(node);
    }

    public void inAFirstCommaIndexAll(AFirstCommaIndexAll node)
    {
        defaultIn(node);
    }

    public void outAFirstCommaIndexAll(AFirstCommaIndexAll node)
    {
        defaultOut(node);
    }

    public void caseAFirstCommaIndexAll(AFirstCommaIndexAll node)
    {
        inAFirstCommaIndexAll(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExprRestricted() != null)
        {
            node.getExprRestricted().apply(this);
        }
        outAFirstCommaIndexAll(node);
    }

    public void inALastCommaIndexAll(ALastCommaIndexAll node)
    {
        defaultIn(node);
    }

    public void outALastCommaIndexAll(ALastCommaIndexAll node)
    {
        defaultOut(node);
    }

    public void caseALastCommaIndexAll(ALastCommaIndexAll node)
    {
        inALastCommaIndexAll(node);
        if(node.getExprRestricted() != null)
        {
            node.getExprRestricted().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outALastCommaIndexAll(node);
    }

    public void inABothCommaIndexAll(ABothCommaIndexAll node)
    {
        defaultIn(node);
    }

    public void outABothCommaIndexAll(ABothCommaIndexAll node)
    {
        defaultOut(node);
    }

    public void caseABothCommaIndexAll(ABothCommaIndexAll node)
    {
        inABothCommaIndexAll(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outABothCommaIndexAll(node);
    }

    public void inAConversionPrimaryExpr(AConversionPrimaryExpr node)
    {
        defaultIn(node);
    }

    public void outAConversionPrimaryExpr(AConversionPrimaryExpr node)
    {
        defaultOut(node);
    }

    public void caseAConversionPrimaryExpr(AConversionPrimaryExpr node)
    {
        inAConversionPrimaryExpr(node);
        if(node.getConversionExpr() != null)
        {
            node.getConversionExpr().apply(this);
        }
        outAConversionPrimaryExpr(node);
    }

    public void inACollectionPrimaryExpr(ACollectionPrimaryExpr node)
    {
        defaultIn(node);
    }

    public void outACollectionPrimaryExpr(ACollectionPrimaryExpr node)
    {
        defaultOut(node);
    }

    public void caseACollectionPrimaryExpr(ACollectionPrimaryExpr node)
    {
        inACollectionPrimaryExpr(node);
        if(node.getCollectionExpr() != null)
        {
            node.getCollectionExpr().apply(this);
        }
        outACollectionPrimaryExpr(node);
    }

    public void inAAggregatePrimaryExpr(AAggregatePrimaryExpr node)
    {
        defaultIn(node);
    }

    public void outAAggregatePrimaryExpr(AAggregatePrimaryExpr node)
    {
        defaultOut(node);
    }

    public void caseAAggregatePrimaryExpr(AAggregatePrimaryExpr node)
    {
        inAAggregatePrimaryExpr(node);
        if(node.getAggregateExpr() != null)
        {
            node.getAggregateExpr().apply(this);
        }
        outAAggregatePrimaryExpr(node);
    }

    public void inAUndefinedPrimaryExpr(AUndefinedPrimaryExpr node)
    {
        defaultIn(node);
    }

    public void outAUndefinedPrimaryExpr(AUndefinedPrimaryExpr node)
    {
        defaultOut(node);
    }

    public void caseAUndefinedPrimaryExpr(AUndefinedPrimaryExpr node)
    {
        inAUndefinedPrimaryExpr(node);
        if(node.getUndefinedExpr() != null)
        {
            node.getUndefinedExpr().apply(this);
        }
        outAUndefinedPrimaryExpr(node);
    }

    public void inAObjconstrPrimaryExpr(AObjconstrPrimaryExpr node)
    {
        defaultIn(node);
    }

    public void outAObjconstrPrimaryExpr(AObjconstrPrimaryExpr node)
    {
        defaultOut(node);
    }

    public void caseAObjconstrPrimaryExpr(AObjconstrPrimaryExpr node)
    {
        inAObjconstrPrimaryExpr(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getFieldList() != null)
        {
            node.getFieldList().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outAObjconstrPrimaryExpr(node);
    }

    public void inAStructconstrPrimaryExpr(AStructconstrPrimaryExpr node)
    {
        defaultIn(node);
    }

    public void outAStructconstrPrimaryExpr(AStructconstrPrimaryExpr node)
    {
        defaultOut(node);
    }

    public void caseAStructconstrPrimaryExpr(AStructconstrPrimaryExpr node)
    {
        inAStructconstrPrimaryExpr(node);
        if(node.getStructConstruction() != null)
        {
            node.getStructConstruction().apply(this);
        }
        outAStructconstrPrimaryExpr(node);
    }

    public void inACollconstrPrimaryExpr(ACollconstrPrimaryExpr node)
    {
        defaultIn(node);
    }

    public void outACollconstrPrimaryExpr(ACollconstrPrimaryExpr node)
    {
        defaultOut(node);
    }

    public void caseACollconstrPrimaryExpr(ACollconstrPrimaryExpr node)
    {
        inACollconstrPrimaryExpr(node);
        if(node.getCollectionConstruction() != null)
        {
            node.getCollectionConstruction().apply(this);
        }
        outACollconstrPrimaryExpr(node);
    }

    public void inAMethodPrimaryExpr(AMethodPrimaryExpr node)
    {
        defaultIn(node);
    }

    public void outAMethodPrimaryExpr(AMethodPrimaryExpr node)
    {
        defaultOut(node);
    }

    public void caseAMethodPrimaryExpr(AMethodPrimaryExpr node)
    {
        inAMethodPrimaryExpr(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getValueList() != null)
        {
            node.getValueList().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outAMethodPrimaryExpr(node);
    }

    public void inAQueryparamPrimaryExpr(AQueryparamPrimaryExpr node)
    {
        defaultIn(node);
    }

    public void outAQueryparamPrimaryExpr(AQueryparamPrimaryExpr node)
    {
        defaultOut(node);
    }

    public void caseAQueryparamPrimaryExpr(AQueryparamPrimaryExpr node)
    {
        inAQueryparamPrimaryExpr(node);
        if(node.getQueryParam() != null)
        {
            node.getQueryParam().apply(this);
        }
        outAQueryparamPrimaryExpr(node);
    }

    public void inALiteralPrimaryExpr(ALiteralPrimaryExpr node)
    {
        defaultIn(node);
    }

    public void outALiteralPrimaryExpr(ALiteralPrimaryExpr node)
    {
        defaultOut(node);
    }

    public void caseALiteralPrimaryExpr(ALiteralPrimaryExpr node)
    {
        inALiteralPrimaryExpr(node);
        if(node.getLiteral() != null)
        {
            node.getLiteral().apply(this);
        }
        outALiteralPrimaryExpr(node);
    }

    public void inATmpQueryPrimaryExpr(ATmpQueryPrimaryExpr node)
    {
        defaultIn(node);
    }

    public void outATmpQueryPrimaryExpr(ATmpQueryPrimaryExpr node)
    {
        defaultOut(node);
    }

    public void caseATmpQueryPrimaryExpr(ATmpQueryPrimaryExpr node)
    {
        inATmpQueryPrimaryExpr(node);
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getQueryRestricted() != null)
        {
            node.getQueryRestricted().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outATmpQueryPrimaryExpr(node);
    }

    public void inAListtosetConversionExpr(AListtosetConversionExpr node)
    {
        defaultIn(node);
    }

    public void outAListtosetConversionExpr(AListtosetConversionExpr node)
    {
        defaultOut(node);
    }

    public void caseAListtosetConversionExpr(AListtosetConversionExpr node)
    {
        inAListtosetConversionExpr(node);
        if(node.getListtoset() != null)
        {
            node.getListtoset().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getQueryRestricted() != null)
        {
            node.getQueryRestricted().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outAListtosetConversionExpr(node);
    }

    public void inAIdentifierListtosetConversionExpr(AIdentifierListtosetConversionExpr node)
    {
        defaultIn(node);
    }

    public void outAIdentifierListtosetConversionExpr(AIdentifierListtosetConversionExpr node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierListtosetConversionExpr(AIdentifierListtosetConversionExpr node)
    {
        inAIdentifierListtosetConversionExpr(node);
        if(node.getListtoset() != null)
        {
            node.getListtoset().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outAIdentifierListtosetConversionExpr(node);
    }

    public void inAElementConversionExpr(AElementConversionExpr node)
    {
        defaultIn(node);
    }

    public void outAElementConversionExpr(AElementConversionExpr node)
    {
        defaultOut(node);
    }

    public void caseAElementConversionExpr(AElementConversionExpr node)
    {
        inAElementConversionExpr(node);
        if(node.getElement() != null)
        {
            node.getElement().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getQueryRestricted() != null)
        {
            node.getQueryRestricted().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outAElementConversionExpr(node);
    }

    public void inAIdentifierElementConversionExpr(AIdentifierElementConversionExpr node)
    {
        defaultIn(node);
    }

    public void outAIdentifierElementConversionExpr(AIdentifierElementConversionExpr node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierElementConversionExpr(AIdentifierElementConversionExpr node)
    {
        inAIdentifierElementConversionExpr(node);
        if(node.getElement() != null)
        {
            node.getElement().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outAIdentifierElementConversionExpr(node);
    }

    public void inAFlattenConversionExpr(AFlattenConversionExpr node)
    {
        defaultIn(node);
    }

    public void outAFlattenConversionExpr(AFlattenConversionExpr node)
    {
        defaultOut(node);
    }

    public void caseAFlattenConversionExpr(AFlattenConversionExpr node)
    {
        inAFlattenConversionExpr(node);
        if(node.getFlatten() != null)
        {
            node.getFlatten().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getQueryRestricted() != null)
        {
            node.getQueryRestricted().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outAFlattenConversionExpr(node);
    }

    public void inAIdentifierFlattenConversionExpr(AIdentifierFlattenConversionExpr node)
    {
        defaultIn(node);
    }

    public void outAIdentifierFlattenConversionExpr(AIdentifierFlattenConversionExpr node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierFlattenConversionExpr(AIdentifierFlattenConversionExpr node)
    {
        inAIdentifierFlattenConversionExpr(node);
        if(node.getFlatten() != null)
        {
            node.getFlatten().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outAIdentifierFlattenConversionExpr(node);
    }

    public void inAFirstCollectionExpr(AFirstCollectionExpr node)
    {
        defaultIn(node);
    }

    public void outAFirstCollectionExpr(AFirstCollectionExpr node)
    {
        defaultOut(node);
    }

    public void caseAFirstCollectionExpr(AFirstCollectionExpr node)
    {
        inAFirstCollectionExpr(node);
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getQueryRestricted() != null)
        {
            node.getQueryRestricted().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outAFirstCollectionExpr(node);
    }

    public void inAIdentifierFirstCollectionExpr(AIdentifierFirstCollectionExpr node)
    {
        defaultIn(node);
    }

    public void outAIdentifierFirstCollectionExpr(AIdentifierFirstCollectionExpr node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierFirstCollectionExpr(AIdentifierFirstCollectionExpr node)
    {
        inAIdentifierFirstCollectionExpr(node);
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outAIdentifierFirstCollectionExpr(node);
    }

    public void inALastCollectionExpr(ALastCollectionExpr node)
    {
        defaultIn(node);
    }

    public void outALastCollectionExpr(ALastCollectionExpr node)
    {
        defaultOut(node);
    }

    public void caseALastCollectionExpr(ALastCollectionExpr node)
    {
        inALastCollectionExpr(node);
        if(node.getLast() != null)
        {
            node.getLast().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getQueryRestricted() != null)
        {
            node.getQueryRestricted().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outALastCollectionExpr(node);
    }

    public void inAIdentifierLastCollectionExpr(AIdentifierLastCollectionExpr node)
    {
        defaultIn(node);
    }

    public void outAIdentifierLastCollectionExpr(AIdentifierLastCollectionExpr node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierLastCollectionExpr(AIdentifierLastCollectionExpr node)
    {
        inAIdentifierLastCollectionExpr(node);
        if(node.getLast() != null)
        {
            node.getLast().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outAIdentifierLastCollectionExpr(node);
    }

    public void inAUniqueCollectionExpr(AUniqueCollectionExpr node)
    {
        defaultIn(node);
    }

    public void outAUniqueCollectionExpr(AUniqueCollectionExpr node)
    {
        defaultOut(node);
    }

    public void caseAUniqueCollectionExpr(AUniqueCollectionExpr node)
    {
        inAUniqueCollectionExpr(node);
        if(node.getUnique() != null)
        {
            node.getUnique().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getQueryRestricted() != null)
        {
            node.getQueryRestricted().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outAUniqueCollectionExpr(node);
    }

    public void inAIdentifierUniqueCollectionExpr(AIdentifierUniqueCollectionExpr node)
    {
        defaultIn(node);
    }

    public void outAIdentifierUniqueCollectionExpr(AIdentifierUniqueCollectionExpr node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierUniqueCollectionExpr(AIdentifierUniqueCollectionExpr node)
    {
        inAIdentifierUniqueCollectionExpr(node);
        if(node.getUnique() != null)
        {
            node.getUnique().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outAIdentifierUniqueCollectionExpr(node);
    }

    public void inAExistsCollectionExpr(AExistsCollectionExpr node)
    {
        defaultIn(node);
    }

    public void outAExistsCollectionExpr(AExistsCollectionExpr node)
    {
        defaultOut(node);
    }

    public void caseAExistsCollectionExpr(AExistsCollectionExpr node)
    {
        inAExistsCollectionExpr(node);
        if(node.getExists() != null)
        {
            node.getExists().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getQueryRestricted() != null)
        {
            node.getQueryRestricted().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outAExistsCollectionExpr(node);
    }

    public void inAIdentifierExistsCollectionExpr(AIdentifierExistsCollectionExpr node)
    {
        defaultIn(node);
    }

    public void outAIdentifierExistsCollectionExpr(AIdentifierExistsCollectionExpr node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierExistsCollectionExpr(AIdentifierExistsCollectionExpr node)
    {
        inAIdentifierExistsCollectionExpr(node);
        if(node.getExists() != null)
        {
            node.getExists().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outAIdentifierExistsCollectionExpr(node);
    }

    public void inASumAggregateExpr(ASumAggregateExpr node)
    {
        defaultIn(node);
    }

    public void outASumAggregateExpr(ASumAggregateExpr node)
    {
        defaultOut(node);
    }

    public void caseASumAggregateExpr(ASumAggregateExpr node)
    {
        inASumAggregateExpr(node);
        if(node.getSum() != null)
        {
            node.getSum().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getQueryRestricted() != null)
        {
            node.getQueryRestricted().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outASumAggregateExpr(node);
    }

    public void inAIdentifierSumAggregateExpr(AIdentifierSumAggregateExpr node)
    {
        defaultIn(node);
    }

    public void outAIdentifierSumAggregateExpr(AIdentifierSumAggregateExpr node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierSumAggregateExpr(AIdentifierSumAggregateExpr node)
    {
        inAIdentifierSumAggregateExpr(node);
        if(node.getSum() != null)
        {
            node.getSum().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outAIdentifierSumAggregateExpr(node);
    }

    public void inAMinAggregateExpr(AMinAggregateExpr node)
    {
        defaultIn(node);
    }

    public void outAMinAggregateExpr(AMinAggregateExpr node)
    {
        defaultOut(node);
    }

    public void caseAMinAggregateExpr(AMinAggregateExpr node)
    {
        inAMinAggregateExpr(node);
        if(node.getMin() != null)
        {
            node.getMin().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getQueryRestricted() != null)
        {
            node.getQueryRestricted().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outAMinAggregateExpr(node);
    }

    public void inAIdentifierMinAggregateExpr(AIdentifierMinAggregateExpr node)
    {
        defaultIn(node);
    }

    public void outAIdentifierMinAggregateExpr(AIdentifierMinAggregateExpr node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierMinAggregateExpr(AIdentifierMinAggregateExpr node)
    {
        inAIdentifierMinAggregateExpr(node);
        if(node.getMin() != null)
        {
            node.getMin().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outAIdentifierMinAggregateExpr(node);
    }

    public void inAMaxAggregateExpr(AMaxAggregateExpr node)
    {
        defaultIn(node);
    }

    public void outAMaxAggregateExpr(AMaxAggregateExpr node)
    {
        defaultOut(node);
    }

    public void caseAMaxAggregateExpr(AMaxAggregateExpr node)
    {
        inAMaxAggregateExpr(node);
        if(node.getMax() != null)
        {
            node.getMax().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getQueryRestricted() != null)
        {
            node.getQueryRestricted().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outAMaxAggregateExpr(node);
    }

    public void inAIdentifierMaxAggregateExpr(AIdentifierMaxAggregateExpr node)
    {
        defaultIn(node);
    }

    public void outAIdentifierMaxAggregateExpr(AIdentifierMaxAggregateExpr node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierMaxAggregateExpr(AIdentifierMaxAggregateExpr node)
    {
        inAIdentifierMaxAggregateExpr(node);
        if(node.getMax() != null)
        {
            node.getMax().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outAIdentifierMaxAggregateExpr(node);
    }

    public void inAAvgAggregateExpr(AAvgAggregateExpr node)
    {
        defaultIn(node);
    }

    public void outAAvgAggregateExpr(AAvgAggregateExpr node)
    {
        defaultOut(node);
    }

    public void caseAAvgAggregateExpr(AAvgAggregateExpr node)
    {
        inAAvgAggregateExpr(node);
        if(node.getAvg() != null)
        {
            node.getAvg().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getQueryRestricted() != null)
        {
            node.getQueryRestricted().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outAAvgAggregateExpr(node);
    }

    public void inAIdentifierAvgAggregateExpr(AIdentifierAvgAggregateExpr node)
    {
        defaultIn(node);
    }

    public void outAIdentifierAvgAggregateExpr(AIdentifierAvgAggregateExpr node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierAvgAggregateExpr(AIdentifierAvgAggregateExpr node)
    {
        inAIdentifierAvgAggregateExpr(node);
        if(node.getAvg() != null)
        {
            node.getAvg().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outAIdentifierAvgAggregateExpr(node);
    }

    public void inACountAggregateExpr(ACountAggregateExpr node)
    {
        defaultIn(node);
    }

    public void outACountAggregateExpr(ACountAggregateExpr node)
    {
        defaultOut(node);
    }

    public void caseACountAggregateExpr(ACountAggregateExpr node)
    {
        inACountAggregateExpr(node);
        if(node.getCount() != null)
        {
            node.getCount().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getQueryStar() != null)
        {
            node.getQueryStar().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outACountAggregateExpr(node);
    }

    public void inAQueryStar(AQueryStar node)
    {
        defaultIn(node);
    }

    public void outAQueryStar(AQueryStar node)
    {
        defaultOut(node);
    }

    public void caseAQueryStar(AQueryStar node)
    {
        inAQueryStar(node);
        if(node.getQueryRestricted() != null)
        {
            node.getQueryRestricted().apply(this);
        }
        outAQueryStar(node);
    }

    public void inAIdentifierQueryStar(AIdentifierQueryStar node)
    {
        defaultIn(node);
    }

    public void outAIdentifierQueryStar(AIdentifierQueryStar node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierQueryStar(AIdentifierQueryStar node)
    {
        inAIdentifierQueryStar(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierQueryStar(node);
    }

    public void inAStarQueryStar(AStarQueryStar node)
    {
        defaultIn(node);
    }

    public void outAStarQueryStar(AStarQueryStar node)
    {
        defaultOut(node);
    }

    public void caseAStarQueryStar(AStarQueryStar node)
    {
        inAStarQueryStar(node);
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        outAStarQueryStar(node);
    }

    public void inAUndefUndefinedExpr(AUndefUndefinedExpr node)
    {
        defaultIn(node);
    }

    public void outAUndefUndefinedExpr(AUndefUndefinedExpr node)
    {
        defaultOut(node);
    }

    public void caseAUndefUndefinedExpr(AUndefUndefinedExpr node)
    {
        inAUndefUndefinedExpr(node);
        if(node.getIsUndefined() != null)
        {
            node.getIsUndefined().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getQueryRestricted() != null)
        {
            node.getQueryRestricted().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outAUndefUndefinedExpr(node);
    }

    public void inAIdentifierUndefUndefinedExpr(AIdentifierUndefUndefinedExpr node)
    {
        defaultIn(node);
    }

    public void outAIdentifierUndefUndefinedExpr(AIdentifierUndefUndefinedExpr node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierUndefUndefinedExpr(AIdentifierUndefUndefinedExpr node)
    {
        inAIdentifierUndefUndefinedExpr(node);
        if(node.getIsUndefined() != null)
        {
            node.getIsUndefined().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outAIdentifierUndefUndefinedExpr(node);
    }

    public void inADefUndefinedExpr(ADefUndefinedExpr node)
    {
        defaultIn(node);
    }

    public void outADefUndefinedExpr(ADefUndefinedExpr node)
    {
        defaultOut(node);
    }

    public void caseADefUndefinedExpr(ADefUndefinedExpr node)
    {
        inADefUndefinedExpr(node);
        if(node.getIsDefined() != null)
        {
            node.getIsDefined().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getQueryRestricted() != null)
        {
            node.getQueryRestricted().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outADefUndefinedExpr(node);
    }

    public void inAIdentifierDefUndefinedExpr(AIdentifierDefUndefinedExpr node)
    {
        defaultIn(node);
    }

    public void outAIdentifierDefUndefinedExpr(AIdentifierDefUndefinedExpr node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierDefUndefinedExpr(AIdentifierDefUndefinedExpr node)
    {
        inAIdentifierDefUndefinedExpr(node);
        if(node.getIsDefined() != null)
        {
            node.getIsDefined().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outAIdentifierDefUndefinedExpr(node);
    }

    public void inAStructConstruction(AStructConstruction node)
    {
        defaultIn(node);
    }

    public void outAStructConstruction(AStructConstruction node)
    {
        defaultOut(node);
    }

    public void caseAStructConstruction(AStructConstruction node)
    {
        inAStructConstruction(node);
        if(node.getStruct() != null)
        {
            node.getStruct().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getFieldList() != null)
        {
            node.getFieldList().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outAStructConstruction(node);
    }

    public void inAFieldList(AFieldList node)
    {
        defaultIn(node);
    }

    public void outAFieldList(AFieldList node)
    {
        defaultOut(node);
    }

    public void caseAFieldList(AFieldList node)
    {
        inAFieldList(node);
        if(node.getFieldList() != null)
        {
            node.getFieldList().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getField() != null)
        {
            node.getField().apply(this);
        }
        outAFieldList(node);
    }

    public void inASingleFieldList(ASingleFieldList node)
    {
        defaultIn(node);
    }

    public void outASingleFieldList(ASingleFieldList node)
    {
        defaultOut(node);
    }

    public void caseASingleFieldList(ASingleFieldList node)
    {
        inASingleFieldList(node);
        if(node.getField() != null)
        {
            node.getField().apply(this);
        }
        outASingleFieldList(node);
    }

    public void inAField(AField node)
    {
        defaultIn(node);
    }

    public void outAField(AField node)
    {
        defaultOut(node);
    }

    public void caseAField(AField node)
    {
        inAField(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAField(node);
    }

    public void inATmpField(ATmpField node)
    {
        defaultIn(node);
    }

    public void outATmpField(ATmpField node)
    {
        defaultOut(node);
    }

    public void caseATmpField(ATmpField node)
    {
        inATmpField(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getExprRestricted() != null)
        {
            node.getExprRestricted().apply(this);
        }
        outATmpField(node);
    }

    public void inATmpIdentifierField(ATmpIdentifierField node)
    {
        defaultIn(node);
    }

    public void outATmpIdentifierField(ATmpIdentifierField node)
    {
        defaultOut(node);
    }

    public void caseATmpIdentifierField(ATmpIdentifierField node)
    {
        inATmpIdentifierField(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outATmpIdentifierField(node);
    }

    public void inAArrayCollectionConstruction(AArrayCollectionConstruction node)
    {
        defaultIn(node);
    }

    public void outAArrayCollectionConstruction(AArrayCollectionConstruction node)
    {
        defaultOut(node);
    }

    public void caseAArrayCollectionConstruction(AArrayCollectionConstruction node)
    {
        inAArrayCollectionConstruction(node);
        if(node.getArray() != null)
        {
            node.getArray().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getValueList() != null)
        {
            node.getValueList().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outAArrayCollectionConstruction(node);
    }

    public void inASetCollectionConstruction(ASetCollectionConstruction node)
    {
        defaultIn(node);
    }

    public void outASetCollectionConstruction(ASetCollectionConstruction node)
    {
        defaultOut(node);
    }

    public void caseASetCollectionConstruction(ASetCollectionConstruction node)
    {
        inASetCollectionConstruction(node);
        if(node.getSet() != null)
        {
            node.getSet().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getValueList() != null)
        {
            node.getValueList().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outASetCollectionConstruction(node);
    }

    public void inABagCollectionConstruction(ABagCollectionConstruction node)
    {
        defaultIn(node);
    }

    public void outABagCollectionConstruction(ABagCollectionConstruction node)
    {
        defaultOut(node);
    }

    public void caseABagCollectionConstruction(ABagCollectionConstruction node)
    {
        inABagCollectionConstruction(node);
        if(node.getBag() != null)
        {
            node.getBag().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getValueList() != null)
        {
            node.getValueList().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outABagCollectionConstruction(node);
    }

    public void inAListCollectionConstruction(AListCollectionConstruction node)
    {
        defaultIn(node);
    }

    public void outAListCollectionConstruction(AListCollectionConstruction node)
    {
        defaultOut(node);
    }

    public void caseAListCollectionConstruction(AListCollectionConstruction node)
    {
        inAListCollectionConstruction(node);
        if(node.getList() != null)
        {
            node.getList().apply(this);
        }
        if(node.getBracketL() != null)
        {
            node.getBracketL().apply(this);
        }
        if(node.getValueOrRange() != null)
        {
            node.getValueOrRange().apply(this);
        }
        if(node.getBracketR() != null)
        {
            node.getBracketR().apply(this);
        }
        outAListCollectionConstruction(node);
    }

    public void inAValueValueOrRange(AValueValueOrRange node)
    {
        defaultIn(node);
    }

    public void outAValueValueOrRange(AValueValueOrRange node)
    {
        defaultOut(node);
    }

    public void caseAValueValueOrRange(AValueValueOrRange node)
    {
        inAValueValueOrRange(node);
        if(node.getValueList() != null)
        {
            node.getValueList().apply(this);
        }
        outAValueValueOrRange(node);
    }

    public void inARangeValueOrRange(ARangeValueOrRange node)
    {
        defaultIn(node);
    }

    public void outARangeValueOrRange(ARangeValueOrRange node)
    {
        defaultOut(node);
    }

    public void caseARangeValueOrRange(ARangeValueOrRange node)
    {
        inARangeValueOrRange(node);
        if(node.getListRange() != null)
        {
            node.getListRange().apply(this);
        }
        outARangeValueOrRange(node);
    }

    public void inAValueList(AValueList node)
    {
        defaultIn(node);
    }

    public void outAValueList(AValueList node)
    {
        defaultOut(node);
    }

    public void caseAValueList(AValueList node)
    {
        inAValueList(node);
        if(node.getValueList() != null)
        {
            node.getValueList().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAValueList(node);
    }

    public void inATmpValueList(ATmpValueList node)
    {
        defaultIn(node);
    }

    public void outATmpValueList(ATmpValueList node)
    {
        defaultOut(node);
    }

    public void caseATmpValueList(ATmpValueList node)
    {
        inATmpValueList(node);
        if(node.getValueList() != null)
        {
            node.getValueList().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExprRestricted() != null)
        {
            node.getExprRestricted().apply(this);
        }
        outATmpValueList(node);
    }

    public void inASingleValueList(ASingleValueList node)
    {
        defaultIn(node);
    }

    public void outASingleValueList(ASingleValueList node)
    {
        defaultOut(node);
    }

    public void caseASingleValueList(ASingleValueList node)
    {
        inASingleValueList(node);
        if(node.getExprRestricted() != null)
        {
            node.getExprRestricted().apply(this);
        }
        outASingleValueList(node);
    }

    public void inALastValueList(ALastValueList node)
    {
        defaultIn(node);
    }

    public void outALastValueList(ALastValueList node)
    {
        defaultOut(node);
    }

    public void caseALastValueList(ALastValueList node)
    {
        inALastValueList(node);
        if(node.getValueList() != null)
        {
            node.getValueList().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outALastValueList(node);
    }

    public void inAIdentifierValueList(AIdentifierValueList node)
    {
        defaultIn(node);
    }

    public void outAIdentifierValueList(AIdentifierValueList node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierValueList(AIdentifierValueList node)
    {
        inAIdentifierValueList(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierValueList(node);
    }

    public void inAListRange(AListRange node)
    {
        defaultIn(node);
    }

    public void outAListRange(AListRange node)
    {
        defaultOut(node);
    }

    public void caseAListRange(AListRange node)
    {
        inAListRange(node);
        if(node.getE1() != null)
        {
            node.getE1().apply(this);
        }
        if(node.getDotdot() != null)
        {
            node.getDotdot().apply(this);
        }
        if(node.getE2() != null)
        {
            node.getE2().apply(this);
        }
        outAListRange(node);
    }

    public void inAQueryParam(AQueryParam node)
    {
        defaultIn(node);
    }

    public void outAQueryParam(AQueryParam node)
    {
        defaultOut(node);
    }

    public void caseAQueryParam(AQueryParam node)
    {
        inAQueryParam(node);
        if(node.getDollar() != null)
        {
            node.getDollar().apply(this);
        }
        if(node.getLongLiteral() != null)
        {
            node.getLongLiteral().apply(this);
        }
        outAQueryParam(node);
    }

    public void inANamedQueryParam(ANamedQueryParam node)
    {
        defaultIn(node);
    }

    public void outANamedQueryParam(ANamedQueryParam node)
    {
        defaultOut(node);
    }

    public void caseANamedQueryParam(ANamedQueryParam node)
    {
        inANamedQueryParam(node);
        if(node.getDollar() != null)
        {
            node.getDollar().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outANamedQueryParam(node);
    }

    public void inAShortType(AShortType node)
    {
        defaultIn(node);
    }

    public void outAShortType(AShortType node)
    {
        defaultOut(node);
    }

    public void caseAShortType(AShortType node)
    {
        inAShortType(node);
        if(node.getUnsigned() != null)
        {
            node.getUnsigned().apply(this);
        }
        if(node.getShort() != null)
        {
            node.getShort().apply(this);
        }
        outAShortType(node);
    }

    public void inALongType(ALongType node)
    {
        defaultIn(node);
    }

    public void outALongType(ALongType node)
    {
        defaultOut(node);
    }

    public void caseALongType(ALongType node)
    {
        inALongType(node);
        if(node.getUnsigned() != null)
        {
            node.getUnsigned().apply(this);
        }
        if(node.getLong() != null)
        {
            node.getLong().apply(this);
        }
        outALongType(node);
    }

    public void inALonglongType(ALonglongType node)
    {
        defaultIn(node);
    }

    public void outALonglongType(ALonglongType node)
    {
        defaultOut(node);
    }

    public void caseALonglongType(ALonglongType node)
    {
        inALonglongType(node);
        if(node.getL1() != null)
        {
            node.getL1().apply(this);
        }
        if(node.getL2() != null)
        {
            node.getL2().apply(this);
        }
        outALonglongType(node);
    }

    public void inAFloatType(AFloatType node)
    {
        defaultIn(node);
    }

    public void outAFloatType(AFloatType node)
    {
        defaultOut(node);
    }

    public void caseAFloatType(AFloatType node)
    {
        inAFloatType(node);
        if(node.getFloat() != null)
        {
            node.getFloat().apply(this);
        }
        outAFloatType(node);
    }

    public void inADoubleType(ADoubleType node)
    {
        defaultIn(node);
    }

    public void outADoubleType(ADoubleType node)
    {
        defaultOut(node);
    }

    public void caseADoubleType(ADoubleType node)
    {
        inADoubleType(node);
        if(node.getDouble() != null)
        {
            node.getDouble().apply(this);
        }
        outADoubleType(node);
    }

    public void inACharType(ACharType node)
    {
        defaultIn(node);
    }

    public void outACharType(ACharType node)
    {
        defaultOut(node);
    }

    public void caseACharType(ACharType node)
    {
        inACharType(node);
        if(node.getChar() != null)
        {
            node.getChar().apply(this);
        }
        outACharType(node);
    }

    public void inAStringType(AStringType node)
    {
        defaultIn(node);
    }

    public void outAStringType(AStringType node)
    {
        defaultOut(node);
    }

    public void caseAStringType(AStringType node)
    {
        inAStringType(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringType(node);
    }

    public void inABooleanType(ABooleanType node)
    {
        defaultIn(node);
    }

    public void outABooleanType(ABooleanType node)
    {
        defaultOut(node);
    }

    public void caseABooleanType(ABooleanType node)
    {
        inABooleanType(node);
        if(node.getBoolean() != null)
        {
            node.getBoolean().apply(this);
        }
        outABooleanType(node);
    }

    public void inAOctetType(AOctetType node)
    {
        defaultIn(node);
    }

    public void outAOctetType(AOctetType node)
    {
        defaultOut(node);
    }

    public void caseAOctetType(AOctetType node)
    {
        inAOctetType(node);
        if(node.getOctet() != null)
        {
            node.getOctet().apply(this);
        }
        outAOctetType(node);
    }

    public void inAEnumType(AEnumType node)
    {
        defaultIn(node);
    }

    public void outAEnumType(AEnumType node)
    {
        defaultOut(node);
    }

    public void caseAEnumType(AEnumType node)
    {
        inAEnumType(node);
        if(node.getEnum() != null)
        {
            node.getEnum().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getTypeX() != null)
        {
            node.getTypeX().apply(this);
        }
        outAEnumType(node);
    }

    public void inADateType(ADateType node)
    {
        defaultIn(node);
    }

    public void outADateType(ADateType node)
    {
        defaultOut(node);
    }

    public void caseADateType(ADateType node)
    {
        inADateType(node);
        if(node.getDate() != null)
        {
            node.getDate().apply(this);
        }
        outADateType(node);
    }

    public void inATimeType(ATimeType node)
    {
        defaultIn(node);
    }

    public void outATimeType(ATimeType node)
    {
        defaultOut(node);
    }

    public void caseATimeType(ATimeType node)
    {
        inATimeType(node);
        if(node.getTime() != null)
        {
            node.getTime().apply(this);
        }
        outATimeType(node);
    }

    public void inAIntervalType(AIntervalType node)
    {
        defaultIn(node);
    }

    public void outAIntervalType(AIntervalType node)
    {
        defaultOut(node);
    }

    public void caseAIntervalType(AIntervalType node)
    {
        inAIntervalType(node);
        if(node.getInterval() != null)
        {
            node.getInterval().apply(this);
        }
        outAIntervalType(node);
    }

    public void inATimestampType(ATimestampType node)
    {
        defaultIn(node);
    }

    public void outATimestampType(ATimestampType node)
    {
        defaultOut(node);
    }

    public void caseATimestampType(ATimestampType node)
    {
        inATimestampType(node);
        if(node.getTimestamp() != null)
        {
            node.getTimestamp().apply(this);
        }
        outATimestampType(node);
    }

    public void inASetType(ASetType node)
    {
        defaultIn(node);
    }

    public void outASetType(ASetType node)
    {
        defaultOut(node);
    }

    public void caseASetType(ASetType node)
    {
        inASetType(node);
        if(node.getSet() != null)
        {
            node.getSet().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        outASetType(node);
    }

    public void inABagType(ABagType node)
    {
        defaultIn(node);
    }

    public void outABagType(ABagType node)
    {
        defaultOut(node);
    }

    public void caseABagType(ABagType node)
    {
        inABagType(node);
        if(node.getBag() != null)
        {
            node.getBag().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        outABagType(node);
    }

    public void inAListType(AListType node)
    {
        defaultIn(node);
    }

    public void outAListType(AListType node)
    {
        defaultOut(node);
    }

    public void caseAListType(AListType node)
    {
        inAListType(node);
        if(node.getList() != null)
        {
            node.getList().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        outAListType(node);
    }

    public void inAArrayType(AArrayType node)
    {
        defaultIn(node);
    }

    public void outAArrayType(AArrayType node)
    {
        defaultOut(node);
    }

    public void caseAArrayType(AArrayType node)
    {
        inAArrayType(node);
        if(node.getArray() != null)
        {
            node.getArray().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        outAArrayType(node);
    }

    public void inADictionaryType(ADictionaryType node)
    {
        defaultIn(node);
    }

    public void outADictionaryType(ADictionaryType node)
    {
        defaultOut(node);
    }

    public void caseADictionaryType(ADictionaryType node)
    {
        inADictionaryType(node);
        if(node.getDictionary() != null)
        {
            node.getDictionary().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getT1() != null)
        {
            node.getT1().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getT2() != null)
        {
            node.getT2().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        outADictionaryType(node);
    }

    public void inATypeX(ATypeX node)
    {
        defaultIn(node);
    }

    public void outATypeX(ATypeX node)
    {
        defaultOut(node);
    }

    public void caseATypeX(ATypeX node)
    {
        inATypeX(node);
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outATypeX(node);
    }

    public void inABooleanLiteral(ABooleanLiteral node)
    {
        defaultIn(node);
    }

    public void outABooleanLiteral(ABooleanLiteral node)
    {
        defaultOut(node);
    }

    public void caseABooleanLiteral(ABooleanLiteral node)
    {
        inABooleanLiteral(node);
        if(node.getPBoolean() != null)
        {
            node.getPBoolean().apply(this);
        }
        outABooleanLiteral(node);
    }

    public void inALongLiteral(ALongLiteral node)
    {
        defaultIn(node);
    }

    public void outALongLiteral(ALongLiteral node)
    {
        defaultOut(node);
    }

    public void caseALongLiteral(ALongLiteral node)
    {
        inALongLiteral(node);
        if(node.getLongLiteral() != null)
        {
            node.getLongLiteral().apply(this);
        }
        outALongLiteral(node);
    }

    public void inADoubleLiteral(ADoubleLiteral node)
    {
        defaultIn(node);
    }

    public void outADoubleLiteral(ADoubleLiteral node)
    {
        defaultOut(node);
    }

    public void caseADoubleLiteral(ADoubleLiteral node)
    {
        inADoubleLiteral(node);
        if(node.getDoubleLiteral() != null)
        {
            node.getDoubleLiteral().apply(this);
        }
        outADoubleLiteral(node);
    }

    public void inACharLiteral(ACharLiteral node)
    {
        defaultIn(node);
    }

    public void outACharLiteral(ACharLiteral node)
    {
        defaultOut(node);
    }

    public void caseACharLiteral(ACharLiteral node)
    {
        inACharLiteral(node);
        if(node.getCharLiteral() != null)
        {
            node.getCharLiteral().apply(this);
        }
        outACharLiteral(node);
    }

    public void inAStringLiteral(AStringLiteral node)
    {
        defaultIn(node);
    }

    public void outAStringLiteral(AStringLiteral node)
    {
        defaultOut(node);
    }

    public void caseAStringLiteral(AStringLiteral node)
    {
        inAStringLiteral(node);
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outAStringLiteral(node);
    }

    public void inADateLiteral(ADateLiteral node)
    {
        defaultIn(node);
    }

    public void outADateLiteral(ADateLiteral node)
    {
        defaultOut(node);
    }

    public void caseADateLiteral(ADateLiteral node)
    {
        inADateLiteral(node);
        if(node.getPDate() != null)
        {
            node.getPDate().apply(this);
        }
        outADateLiteral(node);
    }

    public void inATimeLiteral(ATimeLiteral node)
    {
        defaultIn(node);
    }

    public void outATimeLiteral(ATimeLiteral node)
    {
        defaultOut(node);
    }

    public void caseATimeLiteral(ATimeLiteral node)
    {
        inATimeLiteral(node);
        if(node.getPTime() != null)
        {
            node.getPTime().apply(this);
        }
        outATimeLiteral(node);
    }

    public void inATimestampLiteral(ATimestampLiteral node)
    {
        defaultIn(node);
    }

    public void outATimestampLiteral(ATimestampLiteral node)
    {
        defaultOut(node);
    }

    public void caseATimestampLiteral(ATimestampLiteral node)
    {
        inATimestampLiteral(node);
        if(node.getPTimestamp() != null)
        {
            node.getPTimestamp().apply(this);
        }
        outATimestampLiteral(node);
    }

    public void inANilLiteral(ANilLiteral node)
    {
        defaultIn(node);
    }

    public void outANilLiteral(ANilLiteral node)
    {
        defaultOut(node);
    }

    public void caseANilLiteral(ANilLiteral node)
    {
        inANilLiteral(node);
        if(node.getNil() != null)
        {
            node.getNil().apply(this);
        }
        outANilLiteral(node);
    }

    public void inAUndefinedLiteral(AUndefinedLiteral node)
    {
        defaultIn(node);
    }

    public void outAUndefinedLiteral(AUndefinedLiteral node)
    {
        defaultOut(node);
    }

    public void caseAUndefinedLiteral(AUndefinedLiteral node)
    {
        inAUndefinedLiteral(node);
        if(node.getUndefined() != null)
        {
            node.getUndefined().apply(this);
        }
        outAUndefinedLiteral(node);
    }

    public void inATruePBoolean(ATruePBoolean node)
    {
        defaultIn(node);
    }

    public void outATruePBoolean(ATruePBoolean node)
    {
        defaultOut(node);
    }

    public void caseATruePBoolean(ATruePBoolean node)
    {
        inATruePBoolean(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATruePBoolean(node);
    }

    public void inAFalsePBoolean(AFalsePBoolean node)
    {
        defaultIn(node);
    }

    public void outAFalsePBoolean(AFalsePBoolean node)
    {
        defaultOut(node);
    }

    public void caseAFalsePBoolean(AFalsePBoolean node)
    {
        inAFalsePBoolean(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalsePBoolean(node);
    }

    public void inAPDate(APDate node)
    {
        defaultIn(node);
    }

    public void outAPDate(APDate node)
    {
        defaultOut(node);
    }

    public void caseAPDate(APDate node)
    {
        inAPDate(node);
        if(node.getDate() != null)
        {
            node.getDate().apply(this);
        }
        if(node.getQ1() != null)
        {
            node.getQ1().apply(this);
        }
        if(node.getDateContent() != null)
        {
            node.getDateContent().apply(this);
        }
        if(node.getQ2() != null)
        {
            node.getQ2().apply(this);
        }
        outAPDate(node);
    }

    public void inAPTime(APTime node)
    {
        defaultIn(node);
    }

    public void outAPTime(APTime node)
    {
        defaultOut(node);
    }

    public void caseAPTime(APTime node)
    {
        inAPTime(node);
        if(node.getTime() != null)
        {
            node.getTime().apply(this);
        }
        if(node.getQ1() != null)
        {
            node.getQ1().apply(this);
        }
        if(node.getTimeContent() != null)
        {
            node.getTimeContent().apply(this);
        }
        if(node.getQ2() != null)
        {
            node.getQ2().apply(this);
        }
        outAPTime(node);
    }

    public void inAPTimestamp(APTimestamp node)
    {
        defaultIn(node);
    }

    public void outAPTimestamp(APTimestamp node)
    {
        defaultOut(node);
    }

    public void caseAPTimestamp(APTimestamp node)
    {
        inAPTimestamp(node);
        if(node.getTimestamp() != null)
        {
            node.getTimestamp().apply(this);
        }
        if(node.getQ1() != null)
        {
            node.getQ1().apply(this);
        }
        if(node.getDateContent() != null)
        {
            node.getDateContent().apply(this);
        }
        if(node.getTimeContent() != null)
        {
            node.getTimeContent().apply(this);
        }
        if(node.getQ2() != null)
        {
            node.getQ2().apply(this);
        }
        outAPTimestamp(node);
    }

    public void inADateContent(ADateContent node)
    {
        defaultIn(node);
    }

    public void outADateContent(ADateContent node)
    {
        defaultOut(node);
    }

    public void caseADateContent(ADateContent node)
    {
        inADateContent(node);
        if(node.getE1() != null)
        {
            node.getE1().apply(this);
        }
        if(node.getQ1() != null)
        {
            node.getQ1().apply(this);
        }
        if(node.getE2() != null)
        {
            node.getE2().apply(this);
        }
        if(node.getQ2() != null)
        {
            node.getQ2().apply(this);
        }
        if(node.getE3() != null)
        {
            node.getE3().apply(this);
        }
        outADateContent(node);
    }

    public void inATimeContent(ATimeContent node)
    {
        defaultIn(node);
    }

    public void outATimeContent(ATimeContent node)
    {
        defaultOut(node);
    }

    public void caseATimeContent(ATimeContent node)
    {
        inATimeContent(node);
        if(node.getHour() != null)
        {
            node.getHour().apply(this);
        }
        if(node.getQ1() != null)
        {
            node.getQ1().apply(this);
        }
        if(node.getMinute() != null)
        {
            node.getMinute().apply(this);
        }
        if(node.getQ2() != null)
        {
            node.getQ2().apply(this);
        }
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        outATimeContent(node);
    }
}
