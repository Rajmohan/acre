/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.acre.lang.analysis;

import java.util.*;
import org.acre.lang.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable in;
    private Hashtable out;

    public Object getIn(Node node)
    {
        if(in == null)
        {
            return null;
        }

        return in.get(node);
    }

    public void setIn(Node node, Object in)
    {
        if(this.in == null)
        {
            this.in = new Hashtable(1);
        }

        if(in != null)
        {
            this.in.put(node, in);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(out == null)
        {
            return null;
        }

        return out.get(node);
    }

    public void setOut(Node node, Object out)
    {
        if(this.out == null)
        {
            this.out = new Hashtable(1);
        }

        if(out != null)
        {
            this.out.put(node, out);
        }
        else
        {
            this.out.remove(node);
        }
    }
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseAQueryProgram(AQueryProgram node)
    {
        defaultCase(node);
    }

    public void caseAFullQueryProgram(AFullQueryProgram node)
    {
        defaultCase(node);
    }

    public void caseAQueryQueryProgram(AQueryQueryProgram node)
    {
        defaultCase(node);
    }

    public void caseADeclarationQueryProgram(ADeclarationQueryProgram node)
    {
        defaultCase(node);
    }

    public void caseAStandaloneSemicolonQueryProgram(AStandaloneSemicolonQueryProgram node)
    {
        defaultCase(node);
    }

    public void caseAIncludeDeclaration(AIncludeDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAAliasDeclaration(AAliasDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAReturnDeclaration(AReturnDeclaration node)
    {
        defaultCase(node);
    }

    public void caseADefineDeclaration(ADefineDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAUndefDeclaration(AUndefDeclaration node)
    {
        defaultCase(node);
    }

    public void caseASimpleIncludeClause(ASimpleIncludeClause node)
    {
        defaultCase(node);
    }

    public void caseAAliasClause(AAliasClause node)
    {
        defaultCase(node);
    }

    public void caseAAsIdentifier(AAsIdentifier node)
    {
        defaultCase(node);
    }

    public void caseADefineQuery(ADefineQuery node)
    {
        defaultCase(node);
    }

    public void caseADefineQueryX(ADefineQueryX node)
    {
        defaultCase(node);
    }

    public void caseAReturnQuery(AReturnQuery node)
    {
        defaultCase(node);
    }

    public void caseATupleListReturnQuery(ATupleListReturnQuery node)
    {
        defaultCase(node);
    }

    public void caseABracketedTupleListReturnQuery(ABracketedTupleListReturnQuery node)
    {
        defaultCase(node);
    }

    public void caseASingleBracketedTupleList(ASingleBracketedTupleList node)
    {
        defaultCase(node);
    }

    public void caseAMultipleBracketedTupleList(AMultipleBracketedTupleList node)
    {
        defaultCase(node);
    }

    public void caseASingleTupleList(ASingleTupleList node)
    {
        defaultCase(node);
    }

    public void caseAMultipleTupleList(AMultipleTupleList node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierList(AIdentifierList node)
    {
        defaultCase(node);
    }

    public void caseASingleIdentifierList(ASingleIdentifierList node)
    {
        defaultCase(node);
    }

    public void caseAParameterList(AParameterList node)
    {
        defaultCase(node);
    }

    public void caseASingleParameterList(ASingleParameterList node)
    {
        defaultCase(node);
    }

    public void caseAUndefineQuery(AUndefineQuery node)
    {
        defaultCase(node);
    }

    public void caseAQualifiedName(AQualifiedName node)
    {
        defaultCase(node);
    }

    public void caseASingleQualifiedName(ASingleQualifiedName node)
    {
        defaultCase(node);
    }

    public void caseAQuery(AQuery node)
    {
        defaultCase(node);
    }

    public void caseATmpSelectQuery(ATmpSelectQuery node)
    {
        defaultCase(node);
    }

    public void caseATmpExprQuery(ATmpExprQuery node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierQuery(AIdentifierQuery node)
    {
        defaultCase(node);
    }

    public void caseADistinctQuery(ADistinctQuery node)
    {
        defaultCase(node);
    }

    public void caseADistinctIdentifierQuery(ADistinctIdentifierQuery node)
    {
        defaultCase(node);
    }

    public void caseASelectQueryRestricted(ASelectQueryRestricted node)
    {
        defaultCase(node);
    }

    public void caseAExprQueryRestricted(AExprQueryRestricted node)
    {
        defaultCase(node);
    }

    public void caseASelectX(ASelectX node)
    {
        defaultCase(node);
    }

    public void caseAListProjectionAttributes(AListProjectionAttributes node)
    {
        defaultCase(node);
    }

    public void caseAAnyProjectionAttributes(AAnyProjectionAttributes node)
    {
        defaultCase(node);
    }

    public void caseAProjectionList(AProjectionList node)
    {
        defaultCase(node);
    }

    public void caseASingleProjectionList(ASingleProjectionList node)
    {
        defaultCase(node);
    }

    public void caseAFieldProjection(AFieldProjection node)
    {
        defaultCase(node);
    }

    public void caseATmpExprProjection(ATmpExprProjection node)
    {
        defaultCase(node);
    }

    public void caseATmpIdentifierProjection(ATmpIdentifierProjection node)
    {
        defaultCase(node);
    }

    public void caseAExprProjection(AExprProjection node)
    {
        defaultCase(node);
    }

    public void caseAFromClause(AFromClause node)
    {
        defaultCase(node);
    }

    public void caseAFromClauseList(AFromClauseList node)
    {
        defaultCase(node);
    }

    public void caseASingleFromClauseList(ASingleFromClauseList node)
    {
        defaultCase(node);
    }

    public void caseAIteratorDef(AIteratorDef node)
    {
        defaultCase(node);
    }

    public void caseADistinctIteratorDef(ADistinctIteratorDef node)
    {
        defaultCase(node);
    }

    public void caseADistinctIdentifierIteratorDef(ADistinctIdentifierIteratorDef node)
    {
        defaultCase(node);
    }

    public void caseAAsIdentifierOptAs(AAsIdentifierOptAs node)
    {
        defaultCase(node);
    }

    public void caseAWhereClause(AWhereClause node)
    {
        defaultCase(node);
    }

    public void caseATmpWhereClause(ATmpWhereClause node)
    {
        defaultCase(node);
    }

    public void caseAGroupClause(AGroupClause node)
    {
        defaultCase(node);
    }

    public void caseAHavingClause(AHavingClause node)
    {
        defaultCase(node);
    }

    public void caseATmpHavingClause(ATmpHavingClause node)
    {
        defaultCase(node);
    }

    public void caseAOrderClause(AOrderClause node)
    {
        defaultCase(node);
    }

    public void caseASortCriteria(ASortCriteria node)
    {
        defaultCase(node);
    }

    public void caseASortCriteriaT(ASortCriteriaT node)
    {
        defaultCase(node);
    }

    public void caseASortCriterion(ASortCriterion node)
    {
        defaultCase(node);
    }

    public void caseAAscSortCriterionT(AAscSortCriterionT node)
    {
        defaultCase(node);
    }

    public void caseADescSortCriterionT(ADescSortCriterionT node)
    {
        defaultCase(node);
    }

    public void caseAExpr(AExpr node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierExpr(AIdentifierExpr node)
    {
        defaultCase(node);
    }

    public void caseALiteralExpr(ALiteralExpr node)
    {
        defaultCase(node);
    }

    public void caseAStarExpr(AStarExpr node)
    {
        defaultCase(node);
    }

    public void caseALongParamExpr(ALongParamExpr node)
    {
        defaultCase(node);
    }

    public void caseANamedParamExpr(ANamedParamExpr node)
    {
        defaultCase(node);
    }

    public void caseASelectExpr(ASelectExpr node)
    {
        defaultCase(node);
    }

    public void caseANestedExpr(ANestedExpr node)
    {
        defaultCase(node);
    }

    public void caseACastExpr(ACastExpr node)
    {
        defaultCase(node);
    }

    public void caseACastPrimitiveExpr(ACastPrimitiveExpr node)
    {
        defaultCase(node);
    }

    public void caseAOrExpr(AOrExpr node)
    {
        defaultCase(node);
    }

    public void caseABinorExpr(ABinorExpr node)
    {
        defaultCase(node);
    }

    public void caseAExceptExpr(AExceptExpr node)
    {
        defaultCase(node);
    }

    public void caseAOrelseExpr(AOrelseExpr node)
    {
        defaultCase(node);
    }

    public void caseAAndExpr(AAndExpr node)
    {
        defaultCase(node);
    }

    public void caseAEqualityExpr(AEqualityExpr node)
    {
        defaultCase(node);
    }

    public void caseAInstanceofExpr(AInstanceofExpr node)
    {
        defaultCase(node);
    }

    public void caseALikeExpr(ALikeExpr node)
    {
        defaultCase(node);
    }

    public void caseARlikeExpr(ARlikeExpr node)
    {
        defaultCase(node);
    }

    public void caseARelationalExpr(ARelationalExpr node)
    {
        defaultCase(node);
    }

    public void caseAAdditionExpr(AAdditionExpr node)
    {
        defaultCase(node);
    }

    public void caseASubstractionExpr(ASubstractionExpr node)
    {
        defaultCase(node);
    }

    public void caseAMultiplicationExpr(AMultiplicationExpr node)
    {
        defaultCase(node);
    }

    public void caseAIntersectionExpr(AIntersectionExpr node)
    {
        defaultCase(node);
    }

    public void caseADivisionExpr(ADivisionExpr node)
    {
        defaultCase(node);
    }

    public void caseAModuloExpr(AModuloExpr node)
    {
        defaultCase(node);
    }

    public void caseAIntersectExpr(AIntersectExpr node)
    {
        defaultCase(node);
    }

    public void caseAInExpr(AInExpr node)
    {
        defaultCase(node);
    }

    public void caseAForallExpr(AForallExpr node)
    {
        defaultCase(node);
    }

    public void caseAExistsExpr(AExistsExpr node)
    {
        defaultCase(node);
    }

    public void caseAUnaryPlusExpr(AUnaryPlusExpr node)
    {
        defaultCase(node);
    }

    public void caseAUnaryMinusExpr(AUnaryMinusExpr node)
    {
        defaultCase(node);
    }

    public void caseAUnaryAbsExpr(AUnaryAbsExpr node)
    {
        defaultCase(node);
    }

    public void caseAUnaryNotExpr(AUnaryNotExpr node)
    {
        defaultCase(node);
    }

    public void caseANewObjectExpr(ANewObjectExpr node)
    {
        defaultCase(node);
    }

    public void caseANewArrayExpr(ANewArrayExpr node)
    {
        defaultCase(node);
    }

    public void caseANewSetExpr(ANewSetExpr node)
    {
        defaultCase(node);
    }

    public void caseANewBagExpr(ANewBagExpr node)
    {
        defaultCase(node);
    }

    public void caseANewListExpr(ANewListExpr node)
    {
        defaultCase(node);
    }

    public void caseANewStructExpr(ANewStructExpr node)
    {
        defaultCase(node);
    }

    public void caseAPathExpr(APathExpr node)
    {
        defaultCase(node);
    }

    public void caseAMethodExpr(AMethodExpr node)
    {
        defaultCase(node);
    }

    public void caseAIndexExpr(AIndexExpr node)
    {
        defaultCase(node);
    }

    public void caseAConversionListtosetExpr(AConversionListtosetExpr node)
    {
        defaultCase(node);
    }

    public void caseAConversionElementExpr(AConversionElementExpr node)
    {
        defaultCase(node);
    }

    public void caseAConversionDistinctExpr(AConversionDistinctExpr node)
    {
        defaultCase(node);
    }

    public void caseAConversionFlattenExpr(AConversionFlattenExpr node)
    {
        defaultCase(node);
    }

    public void caseACollectionFirstExpr(ACollectionFirstExpr node)
    {
        defaultCase(node);
    }

    public void caseACollectionLastExpr(ACollectionLastExpr node)
    {
        defaultCase(node);
    }

    public void caseACollectionUniqueExpr(ACollectionUniqueExpr node)
    {
        defaultCase(node);
    }

    public void caseACollectionExistsExpr(ACollectionExistsExpr node)
    {
        defaultCase(node);
    }

    public void caseAAggregateSumExpr(AAggregateSumExpr node)
    {
        defaultCase(node);
    }

    public void caseAAggregateMinExpr(AAggregateMinExpr node)
    {
        defaultCase(node);
    }

    public void caseAAggregateMaxExpr(AAggregateMaxExpr node)
    {
        defaultCase(node);
    }

    public void caseAAggregateAvgExpr(AAggregateAvgExpr node)
    {
        defaultCase(node);
    }

    public void caseAIsundefExpr(AIsundefExpr node)
    {
        defaultCase(node);
    }

    public void caseAIsdefExpr(AIsdefExpr node)
    {
        defaultCase(node);
    }

    public void caseAAggregateCountExpr(AAggregateCountExpr node)
    {
        defaultCase(node);
    }

    public void caseAExprRestricted(AExprRestricted node)
    {
        defaultCase(node);
    }

    public void caseATmpCastExpr(ATmpCastExpr node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierTmpCastExpr(AIdentifierTmpCastExpr node)
    {
        defaultCase(node);
    }

    public void caseAPrimitiveTmpCastExpr(APrimitiveTmpCastExpr node)
    {
        defaultCase(node);
    }

    public void caseAPrimitiveIdentifierTmpCastExpr(APrimitiveIdentifierTmpCastExpr node)
    {
        defaultCase(node);
    }

    public void caseAOrTmpCastExpr(AOrTmpCastExpr node)
    {
        defaultCase(node);
    }

    public void caseATmpOrExpr(ATmpOrExpr node)
    {
        defaultCase(node);
    }

    public void caseALastTmpOrExpr(ALastTmpOrExpr node)
    {
        defaultCase(node);
    }

    public void caseAFirstTmpOrExpr(AFirstTmpOrExpr node)
    {
        defaultCase(node);
    }

    public void caseABothTmpOrExpr(ABothTmpOrExpr node)
    {
        defaultCase(node);
    }

    public void caseAOrelseTmpOrExpr(AOrelseTmpOrExpr node)
    {
        defaultCase(node);
    }

    public void caseATmpOrelseExpr(ATmpOrelseExpr node)
    {
        defaultCase(node);
    }

    public void caseALastTmpOrelseExpr(ALastTmpOrelseExpr node)
    {
        defaultCase(node);
    }

    public void caseAFirstTmpOrelseExpr(AFirstTmpOrelseExpr node)
    {
        defaultCase(node);
    }

    public void caseABothTmpOrelseExpr(ABothTmpOrelseExpr node)
    {
        defaultCase(node);
    }

    public void caseAAndExprTmpOrelseExpr(AAndExprTmpOrelseExpr node)
    {
        defaultCase(node);
    }

    public void caseATmpAndExpr(ATmpAndExpr node)
    {
        defaultCase(node);
    }

    public void caseALastTmpAndExpr(ALastTmpAndExpr node)
    {
        defaultCase(node);
    }

    public void caseAFirstTmpAndExpr(AFirstTmpAndExpr node)
    {
        defaultCase(node);
    }

    public void caseABothTmpAndExpr(ABothTmpAndExpr node)
    {
        defaultCase(node);
    }

    public void caseAQuantifierExprTmpAndExpr(AQuantifierExprTmpAndExpr node)
    {
        defaultCase(node);
    }

    public void caseAForallQuantifierExpr(AForallQuantifierExpr node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierForallQuantifierExpr(AIdentifierForallQuantifierExpr node)
    {
        defaultCase(node);
    }

    public void caseAExistsQuantifierExpr(AExistsQuantifierExpr node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierExistsQuantifierExpr(AIdentifierExistsQuantifierExpr node)
    {
        defaultCase(node);
    }

    public void caseAAndthenQuantifierExpr(AAndthenQuantifierExpr node)
    {
        defaultCase(node);
    }

    public void caseAInClause(AInClause node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierInClause(AIdentifierInClause node)
    {
        defaultCase(node);
    }

    public void caseADistinctInClause(ADistinctInClause node)
    {
        defaultCase(node);
    }

    public void caseADistinctIdentifierInClause(ADistinctIdentifierInClause node)
    {
        defaultCase(node);
    }

    public void caseAAndthenExpr(AAndthenExpr node)
    {
        defaultCase(node);
    }

    public void caseALastAndthenExpr(ALastAndthenExpr node)
    {
        defaultCase(node);
    }

    public void caseAFirstAndthenExpr(AFirstAndthenExpr node)
    {
        defaultCase(node);
    }

    public void caseABothAndthenExpr(ABothAndthenExpr node)
    {
        defaultCase(node);
    }

    public void caseAEqualityExprAndthenExpr(AEqualityExprAndthenExpr node)
    {
        defaultCase(node);
    }

    public void caseAEqneTmpEqualityExpr(AEqneTmpEqualityExpr node)
    {
        defaultCase(node);
    }

    public void caseALastEqneTmpEqualityExpr(ALastEqneTmpEqualityExpr node)
    {
        defaultCase(node);
    }

    public void caseAFirstEqneTmpEqualityExpr(AFirstEqneTmpEqualityExpr node)
    {
        defaultCase(node);
    }

    public void caseABothEqneTmpEqualityExpr(ABothEqneTmpEqualityExpr node)
    {
        defaultCase(node);
    }

    public void caseADistinctTmpEqualityExpr(ADistinctTmpEqualityExpr node)
    {
        defaultCase(node);
    }

    public void caseADistinctIdentifierTmpEqualityExpr(ADistinctIdentifierTmpEqualityExpr node)
    {
        defaultCase(node);
    }

    public void caseAFirstDistinctTmpEqualityExpr(AFirstDistinctTmpEqualityExpr node)
    {
        defaultCase(node);
    }

    public void caseAFirstDistinctIdentifierTmpEqualityExpr(AFirstDistinctIdentifierTmpEqualityExpr node)
    {
        defaultCase(node);
    }

    public void caseARlikeTmpEqualityExpr(ARlikeTmpEqualityExpr node)
    {
        defaultCase(node);
    }

    public void caseALastRlikeTmpEqualityExpr(ALastRlikeTmpEqualityExpr node)
    {
        defaultCase(node);
    }

    public void caseAFirstRlikeTmpEqualityExpr(AFirstRlikeTmpEqualityExpr node)
    {
        defaultCase(node);
    }

    public void caseABothRlikeTmpEqualityExpr(ABothRlikeTmpEqualityExpr node)
    {
        defaultCase(node);
    }

    public void caseALikeTmpEqualityExpr(ALikeTmpEqualityExpr node)
    {
        defaultCase(node);
    }

    public void caseALastLikeTmpEqualityExpr(ALastLikeTmpEqualityExpr node)
    {
        defaultCase(node);
    }

    public void caseAFirstLikeTmpEqualityExpr(AFirstLikeTmpEqualityExpr node)
    {
        defaultCase(node);
    }

    public void caseABothLikeTmpEqualityExpr(ABothLikeTmpEqualityExpr node)
    {
        defaultCase(node);
    }

    public void caseAInstanceofTmpEqualityExpr(AInstanceofTmpEqualityExpr node)
    {
        defaultCase(node);
    }

    public void caseALastInstanceofTmpEqualityExpr(ALastInstanceofTmpEqualityExpr node)
    {
        defaultCase(node);
    }

    public void caseAFirstInstanceofTmpEqualityExpr(AFirstInstanceofTmpEqualityExpr node)
    {
        defaultCase(node);
    }

    public void caseABothInstanceofTmpEqualityExpr(ABothInstanceofTmpEqualityExpr node)
    {
        defaultCase(node);
    }

    public void caseARelationalExprTmpEqualityExpr(ARelationalExprTmpEqualityExpr node)
    {
        defaultCase(node);
    }

    public void caseATmpRelationalExpr(ATmpRelationalExpr node)
    {
        defaultCase(node);
    }

    public void caseALastTmpRelationalExpr(ALastTmpRelationalExpr node)
    {
        defaultCase(node);
    }

    public void caseAFirstTmpRelationalExpr(AFirstTmpRelationalExpr node)
    {
        defaultCase(node);
    }

    public void caseABothTmpRelationalExpr(ABothTmpRelationalExpr node)
    {
        defaultCase(node);
    }

    public void caseAAdditiveExprTmpRelationalExpr(AAdditiveExprTmpRelationalExpr node)
    {
        defaultCase(node);
    }

    public void caseAEqEqne(AEqEqne node)
    {
        defaultCase(node);
    }

    public void caseANeEqne(ANeEqne node)
    {
        defaultCase(node);
    }

    public void caseALtCompareToken(ALtCompareToken node)
    {
        defaultCase(node);
    }

    public void caseALeCompareToken(ALeCompareToken node)
    {
        defaultCase(node);
    }

    public void caseAGtCompareToken(AGtCompareToken node)
    {
        defaultCase(node);
    }

    public void caseAGeCompareToken(AGeCompareToken node)
    {
        defaultCase(node);
    }

    public void caseASomeCompositePredicate(ASomeCompositePredicate node)
    {
        defaultCase(node);
    }

    public void caseAAnyCompositePredicate(AAnyCompositePredicate node)
    {
        defaultCase(node);
    }

    public void caseAAllCompositePredicate(AAllCompositePredicate node)
    {
        defaultCase(node);
    }

    public void caseAPlusAdditiveExpr(APlusAdditiveExpr node)
    {
        defaultCase(node);
    }

    public void caseALastPlusAdditiveExpr(ALastPlusAdditiveExpr node)
    {
        defaultCase(node);
    }

    public void caseAFirstPlusAdditiveExpr(AFirstPlusAdditiveExpr node)
    {
        defaultCase(node);
    }

    public void caseABothPlusAdditiveExpr(ABothPlusAdditiveExpr node)
    {
        defaultCase(node);
    }

    public void caseAMinusAdditiveExpr(AMinusAdditiveExpr node)
    {
        defaultCase(node);
    }

    public void caseALastMinusAdditiveExpr(ALastMinusAdditiveExpr node)
    {
        defaultCase(node);
    }

    public void caseAFirstMinusAdditiveExpr(AFirstMinusAdditiveExpr node)
    {
        defaultCase(node);
    }

    public void caseABothMinusAdditiveExpr(ABothMinusAdditiveExpr node)
    {
        defaultCase(node);
    }

    public void caseAUnionAdditiveExpr(AUnionAdditiveExpr node)
    {
        defaultCase(node);
    }

    public void caseALastUnionAdditiveExpr(ALastUnionAdditiveExpr node)
    {
        defaultCase(node);
    }

    public void caseAFirstUnionAdditiveExpr(AFirstUnionAdditiveExpr node)
    {
        defaultCase(node);
    }

    public void caseABothUnionAdditiveExpr(ABothUnionAdditiveExpr node)
    {
        defaultCase(node);
    }

    public void caseAExceptAdditiveExpr(AExceptAdditiveExpr node)
    {
        defaultCase(node);
    }

    public void caseALastExceptAdditiveExpr(ALastExceptAdditiveExpr node)
    {
        defaultCase(node);
    }

    public void caseAFirstExceptAdditiveExpr(AFirstExceptAdditiveExpr node)
    {
        defaultCase(node);
    }

    public void caseABothExceptAdditiveExpr(ABothExceptAdditiveExpr node)
    {
        defaultCase(node);
    }

    public void caseABinorAdditiveExpr(ABinorAdditiveExpr node)
    {
        defaultCase(node);
    }

    public void caseALastBinorAdditiveExpr(ALastBinorAdditiveExpr node)
    {
        defaultCase(node);
    }

    public void caseAFirstBinorAdditiveExpr(AFirstBinorAdditiveExpr node)
    {
        defaultCase(node);
    }

    public void caseABothBinorAdditiveExpr(ABothBinorAdditiveExpr node)
    {
        defaultCase(node);
    }

    public void caseAMultiplicativeExprAdditiveExpr(AMultiplicativeExprAdditiveExpr node)
    {
        defaultCase(node);
    }

    public void caseATimesMultiplicativeExpr(ATimesMultiplicativeExpr node)
    {
        defaultCase(node);
    }

    public void caseALastTimesMultiplicativeExpr(ALastTimesMultiplicativeExpr node)
    {
        defaultCase(node);
    }

    public void caseAFirstTimesMultiplicativeExpr(AFirstTimesMultiplicativeExpr node)
    {
        defaultCase(node);
    }

    public void caseABothTimesMultiplicativeExpr(ABothTimesMultiplicativeExpr node)
    {
        defaultCase(node);
    }

    public void caseAIntersectionMultiplicativeExpr(AIntersectionMultiplicativeExpr node)
    {
        defaultCase(node);
    }

    public void caseALastIntersectionMultiplicativeExpr(ALastIntersectionMultiplicativeExpr node)
    {
        defaultCase(node);
    }

    public void caseAFirstIntersectionMultiplicativeExpr(AFirstIntersectionMultiplicativeExpr node)
    {
        defaultCase(node);
    }

    public void caseABothIntersectionMultiplicativeExpr(ABothIntersectionMultiplicativeExpr node)
    {
        defaultCase(node);
    }

    public void caseADivideMultiplicativeExpr(ADivideMultiplicativeExpr node)
    {
        defaultCase(node);
    }

    public void caseALastDivideMultiplicativeExpr(ALastDivideMultiplicativeExpr node)
    {
        defaultCase(node);
    }

    public void caseAFirstDivideMultiplicativeExpr(AFirstDivideMultiplicativeExpr node)
    {
        defaultCase(node);
    }

    public void caseABothDivideMultiplicativeExpr(ABothDivideMultiplicativeExpr node)
    {
        defaultCase(node);
    }

    public void caseAModMultiplicativeExpr(AModMultiplicativeExpr node)
    {
        defaultCase(node);
    }

    public void caseALastModMultiplicativeExpr(ALastModMultiplicativeExpr node)
    {
        defaultCase(node);
    }

    public void caseAFirstModMultiplicativeExpr(AFirstModMultiplicativeExpr node)
    {
        defaultCase(node);
    }

    public void caseABothModMultiplicativeExpr(ABothModMultiplicativeExpr node)
    {
        defaultCase(node);
    }

    public void caseAIntersectMultiplicativeExpr(AIntersectMultiplicativeExpr node)
    {
        defaultCase(node);
    }

    public void caseALastIntersectMultiplicativeExpr(ALastIntersectMultiplicativeExpr node)
    {
        defaultCase(node);
    }

    public void caseAFirstIntersectMultiplicativeExpr(AFirstIntersectMultiplicativeExpr node)
    {
        defaultCase(node);
    }

    public void caseABothIntersectMultiplicativeExpr(ABothIntersectMultiplicativeExpr node)
    {
        defaultCase(node);
    }

    public void caseAInExprMultiplicativeExpr(AInExprMultiplicativeExpr node)
    {
        defaultCase(node);
    }

    public void caseATmpInExpr(ATmpInExpr node)
    {
        defaultCase(node);
    }

    public void caseAListTmpInExpr(AListTmpInExpr node)
    {
        defaultCase(node);
    }

    public void caseALastTmpInExpr(ALastTmpInExpr node)
    {
        defaultCase(node);
    }

    public void caseAFirstTmpInExpr(AFirstTmpInExpr node)
    {
        defaultCase(node);
    }

    public void caseABothTmpInExpr(ABothTmpInExpr node)
    {
        defaultCase(node);
    }

    public void caseADistinctTmpInExpr(ADistinctTmpInExpr node)
    {
        defaultCase(node);
    }

    public void caseADistinctIdentifierTmpInExpr(ADistinctIdentifierTmpInExpr node)
    {
        defaultCase(node);
    }

    public void caseAUnaryExprTmpInExpr(AUnaryExprTmpInExpr node)
    {
        defaultCase(node);
    }

    public void caseACommaExpr(ACommaExpr node)
    {
        defaultCase(node);
    }

    public void caseACommaSeparatedExprCommaExpr(ACommaSeparatedExprCommaExpr node)
    {
        defaultCase(node);
    }

    public void caseAInlist(AInlist node)
    {
        defaultCase(node);
    }

    public void caseAPlusUnaryExpr(APlusUnaryExpr node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierPlusUnaryExpr(AIdentifierPlusUnaryExpr node)
    {
        defaultCase(node);
    }

    public void caseAMinusUnaryExpr(AMinusUnaryExpr node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierMinusUnaryExpr(AIdentifierMinusUnaryExpr node)
    {
        defaultCase(node);
    }

    public void caseAAbsUnaryExpr(AAbsUnaryExpr node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierAbsUnaryExpr(AIdentifierAbsUnaryExpr node)
    {
        defaultCase(node);
    }

    public void caseANotUnaryExpr(ANotUnaryExpr node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierNotUnaryExpr(AIdentifierNotUnaryExpr node)
    {
        defaultCase(node);
    }

    public void caseAPostfixUnaryExpr(APostfixUnaryExpr node)
    {
        defaultCase(node);
    }

    public void caseAIndexPostfixExpr(AIndexPostfixExpr node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierIndexPostfixExpr(AIdentifierIndexPostfixExpr node)
    {
        defaultCase(node);
    }

    public void caseAFieldPostfixExpr(AFieldPostfixExpr node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierFieldPostfixExpr(AIdentifierFieldPostfixExpr node)
    {
        defaultCase(node);
    }

    public void caseAMethodPostfixExpr(AMethodPostfixExpr node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierMethodPostfixExpr(AIdentifierMethodPostfixExpr node)
    {
        defaultCase(node);
    }

    public void caseAPrimaryExprPostfixExpr(APrimaryExprPostfixExpr node)
    {
        defaultCase(node);
    }

    public void caseATransitivedotDotarrow(ATransitivedotDotarrow node)
    {
        defaultCase(node);
    }

    public void caseADotDotarrow(ADotDotarrow node)
    {
        defaultCase(node);
    }

    public void caseAArrowDotarrow(AArrowDotarrow node)
    {
        defaultCase(node);
    }

    public void caseAIndex(AIndex node)
    {
        defaultCase(node);
    }

    public void caseAIndexAll(AIndexAll node)
    {
        defaultCase(node);
    }

    public void caseASimpleIndexAll(ASimpleIndexAll node)
    {
        defaultCase(node);
    }

    public void caseAColonIndexAll(AColonIndexAll node)
    {
        defaultCase(node);
    }

    public void caseALastIdentifierIndexAll(ALastIdentifierIndexAll node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierIndexAll(AIdentifierIndexAll node)
    {
        defaultCase(node);
    }

    public void caseACommaIndexAll(ACommaIndexAll node)
    {
        defaultCase(node);
    }

    public void caseAFirstCommaIndexAll(AFirstCommaIndexAll node)
    {
        defaultCase(node);
    }

    public void caseALastCommaIndexAll(ALastCommaIndexAll node)
    {
        defaultCase(node);
    }

    public void caseABothCommaIndexAll(ABothCommaIndexAll node)
    {
        defaultCase(node);
    }

    public void caseAConversionPrimaryExpr(AConversionPrimaryExpr node)
    {
        defaultCase(node);
    }

    public void caseACollectionPrimaryExpr(ACollectionPrimaryExpr node)
    {
        defaultCase(node);
    }

    public void caseAAggregatePrimaryExpr(AAggregatePrimaryExpr node)
    {
        defaultCase(node);
    }

    public void caseAUndefinedPrimaryExpr(AUndefinedPrimaryExpr node)
    {
        defaultCase(node);
    }

    public void caseAObjconstrPrimaryExpr(AObjconstrPrimaryExpr node)
    {
        defaultCase(node);
    }

    public void caseAStructconstrPrimaryExpr(AStructconstrPrimaryExpr node)
    {
        defaultCase(node);
    }

    public void caseACollconstrPrimaryExpr(ACollconstrPrimaryExpr node)
    {
        defaultCase(node);
    }

    public void caseAMethodPrimaryExpr(AMethodPrimaryExpr node)
    {
        defaultCase(node);
    }

    public void caseAQueryparamPrimaryExpr(AQueryparamPrimaryExpr node)
    {
        defaultCase(node);
    }

    public void caseALiteralPrimaryExpr(ALiteralPrimaryExpr node)
    {
        defaultCase(node);
    }

    public void caseATmpQueryPrimaryExpr(ATmpQueryPrimaryExpr node)
    {
        defaultCase(node);
    }

    public void caseAListtosetConversionExpr(AListtosetConversionExpr node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierListtosetConversionExpr(AIdentifierListtosetConversionExpr node)
    {
        defaultCase(node);
    }

    public void caseAElementConversionExpr(AElementConversionExpr node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierElementConversionExpr(AIdentifierElementConversionExpr node)
    {
        defaultCase(node);
    }

    public void caseAFlattenConversionExpr(AFlattenConversionExpr node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierFlattenConversionExpr(AIdentifierFlattenConversionExpr node)
    {
        defaultCase(node);
    }

    public void caseAFirstCollectionExpr(AFirstCollectionExpr node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierFirstCollectionExpr(AIdentifierFirstCollectionExpr node)
    {
        defaultCase(node);
    }

    public void caseALastCollectionExpr(ALastCollectionExpr node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierLastCollectionExpr(AIdentifierLastCollectionExpr node)
    {
        defaultCase(node);
    }

    public void caseAUniqueCollectionExpr(AUniqueCollectionExpr node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierUniqueCollectionExpr(AIdentifierUniqueCollectionExpr node)
    {
        defaultCase(node);
    }

    public void caseAExistsCollectionExpr(AExistsCollectionExpr node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierExistsCollectionExpr(AIdentifierExistsCollectionExpr node)
    {
        defaultCase(node);
    }

    public void caseASumAggregateExpr(ASumAggregateExpr node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierSumAggregateExpr(AIdentifierSumAggregateExpr node)
    {
        defaultCase(node);
    }

    public void caseAMinAggregateExpr(AMinAggregateExpr node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierMinAggregateExpr(AIdentifierMinAggregateExpr node)
    {
        defaultCase(node);
    }

    public void caseAMaxAggregateExpr(AMaxAggregateExpr node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierMaxAggregateExpr(AIdentifierMaxAggregateExpr node)
    {
        defaultCase(node);
    }

    public void caseAAvgAggregateExpr(AAvgAggregateExpr node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierAvgAggregateExpr(AIdentifierAvgAggregateExpr node)
    {
        defaultCase(node);
    }

    public void caseACountAggregateExpr(ACountAggregateExpr node)
    {
        defaultCase(node);
    }

    public void caseAQueryStar(AQueryStar node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierQueryStar(AIdentifierQueryStar node)
    {
        defaultCase(node);
    }

    public void caseAStarQueryStar(AStarQueryStar node)
    {
        defaultCase(node);
    }

    public void caseAUndefUndefinedExpr(AUndefUndefinedExpr node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierUndefUndefinedExpr(AIdentifierUndefUndefinedExpr node)
    {
        defaultCase(node);
    }

    public void caseADefUndefinedExpr(ADefUndefinedExpr node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierDefUndefinedExpr(AIdentifierDefUndefinedExpr node)
    {
        defaultCase(node);
    }

    public void caseAStructConstruction(AStructConstruction node)
    {
        defaultCase(node);
    }

    public void caseAFieldList(AFieldList node)
    {
        defaultCase(node);
    }

    public void caseASingleFieldList(ASingleFieldList node)
    {
        defaultCase(node);
    }

    public void caseAField(AField node)
    {
        defaultCase(node);
    }

    public void caseATmpField(ATmpField node)
    {
        defaultCase(node);
    }

    public void caseATmpIdentifierField(ATmpIdentifierField node)
    {
        defaultCase(node);
    }

    public void caseAArrayCollectionConstruction(AArrayCollectionConstruction node)
    {
        defaultCase(node);
    }

    public void caseASetCollectionConstruction(ASetCollectionConstruction node)
    {
        defaultCase(node);
    }

    public void caseABagCollectionConstruction(ABagCollectionConstruction node)
    {
        defaultCase(node);
    }

    public void caseAListCollectionConstruction(AListCollectionConstruction node)
    {
        defaultCase(node);
    }

    public void caseAValueValueOrRange(AValueValueOrRange node)
    {
        defaultCase(node);
    }

    public void caseARangeValueOrRange(ARangeValueOrRange node)
    {
        defaultCase(node);
    }

    public void caseAValueList(AValueList node)
    {
        defaultCase(node);
    }

    public void caseATmpValueList(ATmpValueList node)
    {
        defaultCase(node);
    }

    public void caseASingleValueList(ASingleValueList node)
    {
        defaultCase(node);
    }

    public void caseALastValueList(ALastValueList node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierValueList(AIdentifierValueList node)
    {
        defaultCase(node);
    }

    public void caseAListRange(AListRange node)
    {
        defaultCase(node);
    }

    public void caseAQueryParam(AQueryParam node)
    {
        defaultCase(node);
    }

    public void caseANamedQueryParam(ANamedQueryParam node)
    {
        defaultCase(node);
    }

    public void caseAShortType(AShortType node)
    {
        defaultCase(node);
    }

    public void caseALongType(ALongType node)
    {
        defaultCase(node);
    }

    public void caseALonglongType(ALonglongType node)
    {
        defaultCase(node);
    }

    public void caseAFloatType(AFloatType node)
    {
        defaultCase(node);
    }

    public void caseADoubleType(ADoubleType node)
    {
        defaultCase(node);
    }

    public void caseACharType(ACharType node)
    {
        defaultCase(node);
    }

    public void caseAStringType(AStringType node)
    {
        defaultCase(node);
    }

    public void caseABooleanType(ABooleanType node)
    {
        defaultCase(node);
    }

    public void caseAOctetType(AOctetType node)
    {
        defaultCase(node);
    }

    public void caseAEnumType(AEnumType node)
    {
        defaultCase(node);
    }

    public void caseADateType(ADateType node)
    {
        defaultCase(node);
    }

    public void caseATimeType(ATimeType node)
    {
        defaultCase(node);
    }

    public void caseAIntervalType(AIntervalType node)
    {
        defaultCase(node);
    }

    public void caseATimestampType(ATimestampType node)
    {
        defaultCase(node);
    }

    public void caseASetType(ASetType node)
    {
        defaultCase(node);
    }

    public void caseABagType(ABagType node)
    {
        defaultCase(node);
    }

    public void caseAListType(AListType node)
    {
        defaultCase(node);
    }

    public void caseAArrayType(AArrayType node)
    {
        defaultCase(node);
    }

    public void caseADictionaryType(ADictionaryType node)
    {
        defaultCase(node);
    }

    public void caseATypeX(ATypeX node)
    {
        defaultCase(node);
    }

    public void caseABooleanLiteral(ABooleanLiteral node)
    {
        defaultCase(node);
    }

    public void caseALongLiteral(ALongLiteral node)
    {
        defaultCase(node);
    }

    public void caseADoubleLiteral(ADoubleLiteral node)
    {
        defaultCase(node);
    }

    public void caseACharLiteral(ACharLiteral node)
    {
        defaultCase(node);
    }

    public void caseAStringLiteral(AStringLiteral node)
    {
        defaultCase(node);
    }

    public void caseADateLiteral(ADateLiteral node)
    {
        defaultCase(node);
    }

    public void caseATimeLiteral(ATimeLiteral node)
    {
        defaultCase(node);
    }

    public void caseATimestampLiteral(ATimestampLiteral node)
    {
        defaultCase(node);
    }

    public void caseANilLiteral(ANilLiteral node)
    {
        defaultCase(node);
    }

    public void caseAUndefinedLiteral(AUndefinedLiteral node)
    {
        defaultCase(node);
    }

    public void caseATruePBoolean(ATruePBoolean node)
    {
        defaultCase(node);
    }

    public void caseAFalsePBoolean(AFalsePBoolean node)
    {
        defaultCase(node);
    }

    public void caseAPDate(APDate node)
    {
        defaultCase(node);
    }

    public void caseAPTime(APTime node)
    {
        defaultCase(node);
    }

    public void caseAPTimestamp(APTimestamp node)
    {
        defaultCase(node);
    }

    public void caseADateContent(ADateContent node)
    {
        defaultCase(node);
    }

    public void caseATimeContent(ATimeContent node)
    {
        defaultCase(node);
    }

    public void caseTWhite(TWhite node)
    {
        defaultCase(node);
    }

    public void caseTDotdotdot(TDotdotdot node)
    {
        defaultCase(node);
    }

    public void caseTArrow(TArrow node)
    {
        defaultCase(node);
    }

    public void caseTBinor(TBinor node)
    {
        defaultCase(node);
    }

    public void caseTBracketL(TBracketL node)
    {
        defaultCase(node);
    }

    public void caseTBracketR(TBracketR node)
    {
        defaultCase(node);
    }

    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    public void caseTDivide(TDivide node)
    {
        defaultCase(node);
    }

    public void caseTDollar(TDollar node)
    {
        defaultCase(node);
    }

    public void caseTDotdot(TDotdot node)
    {
        defaultCase(node);
    }

    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    public void caseTEq(TEq node)
    {
        defaultCase(node);
    }

    public void caseTGe(TGe node)
    {
        defaultCase(node);
    }

    public void caseTGt(TGt node)
    {
        defaultCase(node);
    }

    public void caseTLe(TLe node)
    {
        defaultCase(node);
    }

    public void caseTLt(TLt node)
    {
        defaultCase(node);
    }

    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    public void caseTNe(TNe node)
    {
        defaultCase(node);
    }

    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    public void caseTQuote(TQuote node)
    {
        defaultCase(node);
    }

    public void caseTSemicolon(TSemicolon node)
    {
        defaultCase(node);
    }

    public void caseTSqBracketL(TSqBracketL node)
    {
        defaultCase(node);
    }

    public void caseTSqBracketR(TSqBracketR node)
    {
        defaultCase(node);
    }

    public void caseTStar(TStar node)
    {
        defaultCase(node);
    }

    public void caseTSetAnd(TSetAnd node)
    {
        defaultCase(node);
    }

    public void caseTAbs(TAbs node)
    {
        defaultCase(node);
    }

    public void caseTAlias(TAlias node)
    {
        defaultCase(node);
    }

    public void caseTAll(TAll node)
    {
        defaultCase(node);
    }

    public void caseTAndthen(TAndthen node)
    {
        defaultCase(node);
    }

    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    public void caseTAny(TAny node)
    {
        defaultCase(node);
    }

    public void caseTArray(TArray node)
    {
        defaultCase(node);
    }

    public void caseTAs(TAs node)
    {
        defaultCase(node);
    }

    public void caseTAsc(TAsc node)
    {
        defaultCase(node);
    }

    public void caseTAvg(TAvg node)
    {
        defaultCase(node);
    }

    public void caseTBag(TBag node)
    {
        defaultCase(node);
    }

    public void caseTBoolean(TBoolean node)
    {
        defaultCase(node);
    }

    public void caseTBy(TBy node)
    {
        defaultCase(node);
    }

    public void caseTCount(TCount node)
    {
        defaultCase(node);
    }

    public void caseTChar(TChar node)
    {
        defaultCase(node);
    }

    public void caseTDate(TDate node)
    {
        defaultCase(node);
    }

    public void caseTDefine(TDefine node)
    {
        defaultCase(node);
    }

    public void caseTDesc(TDesc node)
    {
        defaultCase(node);
    }

    public void caseTDictionary(TDictionary node)
    {
        defaultCase(node);
    }

    public void caseTDistinct(TDistinct node)
    {
        defaultCase(node);
    }

    public void caseTDouble(TDouble node)
    {
        defaultCase(node);
    }

    public void caseTElement(TElement node)
    {
        defaultCase(node);
    }

    public void caseTEnum(TEnum node)
    {
        defaultCase(node);
    }

    public void caseTExcept(TExcept node)
    {
        defaultCase(node);
    }

    public void caseTExists(TExists node)
    {
        defaultCase(node);
    }

    public void caseTFalse(TFalse node)
    {
        defaultCase(node);
    }

    public void caseTFirst(TFirst node)
    {
        defaultCase(node);
    }

    public void caseTFlatten(TFlatten node)
    {
        defaultCase(node);
    }

    public void caseTFloat(TFloat node)
    {
        defaultCase(node);
    }

    public void caseTFor(TFor node)
    {
        defaultCase(node);
    }

    public void caseTFrom(TFrom node)
    {
        defaultCase(node);
    }

    public void caseTGroup(TGroup node)
    {
        defaultCase(node);
    }

    public void caseTHaving(THaving node)
    {
        defaultCase(node);
    }

    public void caseTInclude(TInclude node)
    {
        defaultCase(node);
    }

    public void caseTInstanceof(TInstanceof node)
    {
        defaultCase(node);
    }

    public void caseTIntersect(TIntersect node)
    {
        defaultCase(node);
    }

    public void caseTInterval(TInterval node)
    {
        defaultCase(node);
    }

    public void caseTIn(TIn node)
    {
        defaultCase(node);
    }

    public void caseTIsDefined(TIsDefined node)
    {
        defaultCase(node);
    }

    public void caseTIsUndefined(TIsUndefined node)
    {
        defaultCase(node);
    }

    public void caseTLast(TLast node)
    {
        defaultCase(node);
    }

    public void caseTLike(TLike node)
    {
        defaultCase(node);
    }

    public void caseTRlike(TRlike node)
    {
        defaultCase(node);
    }

    public void caseTListtoset(TListtoset node)
    {
        defaultCase(node);
    }

    public void caseTList(TList node)
    {
        defaultCase(node);
    }

    public void caseTLong(TLong node)
    {
        defaultCase(node);
    }

    public void caseTMax(TMax node)
    {
        defaultCase(node);
    }

    public void caseTMod(TMod node)
    {
        defaultCase(node);
    }

    public void caseTMin(TMin node)
    {
        defaultCase(node);
    }

    public void caseTNil(TNil node)
    {
        defaultCase(node);
    }

    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    public void caseTOctet(TOctet node)
    {
        defaultCase(node);
    }

    public void caseTOrder(TOrder node)
    {
        defaultCase(node);
    }

    public void caseTOrelse(TOrelse node)
    {
        defaultCase(node);
    }

    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    public void caseTReturn(TReturn node)
    {
        defaultCase(node);
    }

    public void caseTTquery(TTquery node)
    {
        defaultCase(node);
    }

    public void caseTSelect(TSelect node)
    {
        defaultCase(node);
    }

    public void caseTSet(TSet node)
    {
        defaultCase(node);
    }

    public void caseTSome(TSome node)
    {
        defaultCase(node);
    }

    public void caseTShort(TShort node)
    {
        defaultCase(node);
    }

    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    public void caseTStruct(TStruct node)
    {
        defaultCase(node);
    }

    public void caseTSum(TSum node)
    {
        defaultCase(node);
    }

    public void caseTTimestamp(TTimestamp node)
    {
        defaultCase(node);
    }

    public void caseTTime(TTime node)
    {
        defaultCase(node);
    }

    public void caseTTrue(TTrue node)
    {
        defaultCase(node);
    }

    public void caseTUndefined(TUndefined node)
    {
        defaultCase(node);
    }

    public void caseTUndefine(TUndefine node)
    {
        defaultCase(node);
    }

    public void caseTUnion(TUnion node)
    {
        defaultCase(node);
    }

    public void caseTUnique(TUnique node)
    {
        defaultCase(node);
    }

    public void caseTUnsigned(TUnsigned node)
    {
        defaultCase(node);
    }

    public void caseTWhere(TWhere node)
    {
        defaultCase(node);
    }

    public void caseTIdentifier(TIdentifier node)
    {
        defaultCase(node);
    }

    public void caseTDoubleLiteral(TDoubleLiteral node)
    {
        defaultCase(node);
    }

    public void caseTLongLiteral(TLongLiteral node)
    {
        defaultCase(node);
    }

    public void caseTCharLiteral(TCharLiteral node)
    {
        defaultCase(node);
    }

    public void caseTStringLiteral(TStringLiteral node)
    {
        defaultCase(node);
    }

    public void caseTLineComment(TLineComment node)
    {
        defaultCase(node);
    }

    public void caseTMultilineComment(TMultilineComment node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(Node node)
    {
    }
}
